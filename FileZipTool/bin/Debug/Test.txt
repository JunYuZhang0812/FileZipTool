// 目前支持以下几种数据类型：
// bool,vector,string,float double
// int8,int16,int32,int,int64,
// uint8,uint16,uint32,uint,uint64

// 任何类型值的包装
struct any_value
{
// 001 - bool
// 002 - int8
// 003 - int16
// 004 - int32
// 005 - int
// 006 - int64
// 007 - uint8
// 008 - uint16
// 009 - uint32
// 010 - uint
// 011 - uint64
// 012 - float
// 013 - double
// 014 - string
// 015 - binary
// 101 - vector<bool>
// 102 - vector<int8>
// 103 - vector<int16>
// 104 - vector<int32>
// 105 - vector<int>
// 106 - vector<int64>
// 107 - vector<uint8>
// 108 - vector<uint16>
// 109 - vector<uint32>
// 110 - vector<uint>
// 111 - vector<uint64>
// 112 - vector<float>
// 113 - vector<double>
// 114 - vector<string>
// 115 - vector<binary>
	uint8   type;			// 值的类型（定义如上）
	binary  value;			// 值的二进制数据（与协议字段解析方式相同）
};
// 某结构的某值
struct index_value
{
	uint8      index;			// 第几个值（从1开始）
	any_value  value;			// 值的包装
};

struct ModelInfo
{
	uint32		career;		// 职业
	uint32		model_id;	// 模型id
	uint32		zoom;		// 缩放
	int32		shift_x;	// 偏移x
	int32		shift_y;	// 偏移y
	int32		shift_z;	// 偏移z
	int32		rotate_x;	// 旋转x
	int32		rotate_y;	// 旋转y
	int32		rotate_z;	// 旋转z
};

struct NewModelInfo
{
	uint8       type;       // 枚举 0 模型ID 1 道具ID
	uint32		model_id;	// 模型id
	uint32		zoom;		// 缩放
	int32		shift_x;	// 偏移x
	int32		shift_y;	// 偏移y
	int32		shift_z;	// 偏移z
	int32		rotate_x;	// 旋转x
	int32		rotate_y;	// 旋转y
	int32		rotate_z;	// 旋转z
	uint32      item_id;    // 道具id
};

struct TypeModelInfo
{
	uint32		career;		// 职业
	uint32		model_id;	// 模型id
	uint32		zoom;		// 缩放
	uint8       show_type;  // 表现方式 0-无表现 1-可旋转 2-上下浮动 3-自转
	int32		shift_x;	// 偏移x
	int32		shift_y;	// 偏移y
	int32		shift_z;	// 偏移z
	int32		rotate_x;	// 旋转x
	int32		rotate_y;	// 旋转y
	int32		rotate_z;	// 旋转z
};

struct key_value
{
  uint32  key;
  uint32  value;
};

struct key_2value
{
  uint32  key;
  uint32  value1;
  uint32  value2;
};

struct key_3value
{
  uint32  key;
  uint32  value1;
  uint32  value2;
  uint32  value3;
};

struct key_big_value
{
  uint32  key;
  uint64  value;
};

struct big_key_value
{
	uint64	key;
	uint64	value;
};

struct CommonRedPoint
{
	uint16		type;		// 类型
	bool		is_red;		// 是否红点
};

// 已装配技能信息结构
struct BindSkillBase
{
	uint8				bind_index;   //  绑定位置(按键)  2 3 4 5
	pb_uint16				skill_index;  //  绑定的技能列表 
};

struct U2GS_RequestLogin__1116 ->
{
	string	account;				//账号
	int	identity;							//LS2U_LoginResult.identity
	int		protocolVer;			//协议版本号
	uint8	loginType;				//登陆类型  0:正常登陆  1:重连登陆
	uint64	roleID;                 //重连使用的角色ID
	string  language;               //语言
};
struct GS2U_LoginResult__1117 <-
{
	int		result;			//0:验证成功，//其它值：
							//137001:验证失败，用户名密码错误; 137002:验证失败，重复登录; 137003:被踢下线; 137004:该账户已经被冻结，禁止登录; 137005:尚未连接登录服务器
							//137006:用户名密码不能为空; 137007:验证失败，写数据库失败; 137008:验证失败，未知错误; 137009:验证失败，异常错误
							//137010:验证失败，登录服务器不支持该平台验证; 137011:验证失败，验证超时; 137012:验证失败，网络断开
							//137013:验证失败，帐号被封; 137014:版本过低;137015:版本过高
	int willCloseSocket;
	int32  timezone_seconds;	// 本地时区偏移秒数 = 本地时间 - UTC世界时间
};

// 获取等待人数
// 前端收到GS2U_LoginResult成功消息后发送
// 断线重连后端自动跳过排队，执行后续操作
struct U2GS_LoginQueue ->
{
	bool  isSkip;			// 是否跳过排队
};
struct GS2U_LoginQueueResult <-
{
	uint32  errorCode;		// 错误码
	uint16  count;			// 需要等待人数，0表示排队成功，前端可以进入角色列表界面，以及发起后续操作
	uint32  microsecond;	// 单人等待毫秒数参考值，总等待时间 = microsecond * count
};

struct U2GS_SelPlayerEnterGame__1119 ->
{
	uint64	roleID;
};
struct GS2U_SelPlayerResult__1120 <-
{
	int result;			//-1:状态不正确，-2：不是当前账号的角色，-3：重复登录, 0:成功
};

//  请求角色名
struct U2GS_requestCreateName__1121 ->
{
	uint32 career;			// 职业
};

// 创建角色名反馈
struct GS2U_createNameResult__1122 <-
{
	string	name;	// 角色名
	uint32	result;		// 反馈
};

struct U2GS_RequestCreatePlayer__1123 ->
{
	string name;				// 名字
	uint8  sex;         // 性别，0-男，1-女
	uint8	 camp;				// 阵营
	uint32 career;			// 职业
	vector<key_value> custom_list;					// 自定义列表 <角色索引 自定义值>
};
struct GS2U_CreatePlayerResult__1124 <-
{
	int		errorCode;			//0:%%成功, -1:满, -2:名字不合法, -3:重名, -4:名字里有敏感字符, -5:创建角色数据失败,2:角色创建名字最小字符,7:角色创建名字最大字符
	uint64  roleID;
};

// 收集客户端信息(为TLOG)
struct U2GS_ClientHardInfo__1127 ->
{
	string gameSvrId;	//(必填)登录的游戏服务器编号" />
	string vGameAppid;	//desc="(必填)游戏APPID" />
	int platID;		//desc="(必填)ios 0 /googleplay 1"/>
	string vopenid;		//desc="(必填)用户OPENID号" />
	string	clientVersion;		// desc="(可选)客户端版本"/>
	string	systemSoftware;		//desc="(可选)移动终端操作系统版本"/>
	string	systemHardware;		// desc="(可选)移动终端机型"/>
	string	telecomOper;	//desc="(必填)运营商"/>
	string	network;		//desc="(可选)移动网络/WIFI"/>
	int	screenWidth;		//desc="(可选)显示屏宽度"/>
	int	screenHight;		//desc="(可选)显示屏高度"/>
	float	density		//desc="(可选)像素密度"/>
	int	regChannel;		//desc="(必填)注册渠道"/>
	string	cpuHardware;	// desc="(可选)cpu类型|频率|核数"/>
	int	memory;		//desc="(可选)内存信息单位M"/>
	string	gLRender;	//desc="(可选)opengl render信息"/>
	string	gLVersion;		//desc="(可选)opengl版本信息"/>
	string	deviceId;		// desc="(可选)设备ID"/>
	int	loginChannel;		//desc="(必填)登录渠道"/>	
	float loginConsumeTime; //desc="(必填)登陆耗时(s)"/>	
};

struct U2GS_ClientHardInfoSummary ->
{
	string	systemHardware;		// desc="(必填)移动终端机型"/>
	string	systemSoftware;		//desc="(必填)移动终端操作系统版本"/>
};

//心跳包
struct U2GS_KeepAlive__1128->
{
  uint32 timestamp;    // 加速检查使用  服务器时间
};
//心跳包回复
struct GS2U_KeepAlive__1129<-
{
	int timesTamp;	//时间戳,本地时间(单位为秒)
	uint32  resVersion;  //资源版本号
};
//协议号 1650-2000 （边界可用）共350个
// TODO 公会
//--------------------------------------skill.h----------------------------------------------

//实例私有的技能修正
struct SkillFix
{
	uint32				skillID;          // 技能配置ID
	uint32				skill_index;          // 技能位
	uint8				level;              // 技能等级
	vector<uint32>		fixIDList;    // 修正ID列表
};
struct ObjectSkillFix
{
	uint64				objectID;//实例ID
	uint64				roleID; // 角色ID
	vector<SkillFix> fixList;
};
struct GS2U_ObjectSkillFix__1210<-
{
	vector<ObjectSkillFix> objectFixList;
};

struct SkillFixSt
{
	uint64  role_id;                        // 角色Id
	vector<SkillFix> fixList;;
}
// 进入地图后同步玩家自己的技能信息
struct GS2U_MySkillFix <-
{
	vector<SkillFixSt> fix_skill_list;
};

// 
struct BuffFix
{
	uint16  fix_type;
	uint16  fix_param;
	uint32  fix_id;
};
// 改变时同步
struct GS2U_MyBuffFix <-
{
	vector<BuffFix> fix_list;;
};
//--------------------------------------skill.h END----------------------------------------------
struct EqLookInfo
{
	pb_uint32 itemid; //配置id
	uint8  level;  //强化等级(段数需要整除5，1段5级)
};

struct WeaponLookInfo
{
	uint32				weapon_id;			// 神兵id
	uint8				weapon_vfx;			// 神兵特效
	uint32				weapon_level;		// 神兵阶数
	uint32				weapon_star;		// 神兵星级
};

// 角色模型（不要在中间插入字段）
struct roleModel
{
	uint64              role_id;		// 角色ID
	pb_uint32              career; 		// 职业
	uint32				create_time;	// 创建时间
	uint8               is_leader;      // 是否为领队 1是 0否
	vector<EqLookInfo>  eq_list; 		// 可见装备列表
	pb_uint16				honor_lv;		// 头衔等级
	pb_uint32				title_id;		// 称号ID
	pb_uint32  			wing_id;		// 翅膀id
	pb_uint32				mount_id;		// 坐骑id
  pb_uint32				dragon_id;		// 龙神id
  vector<uint32>      fashionCfgIDList;	// 可见时装配置ID列表
  uint32  hair_color_id;   // 发色ID
  uint32  skin_color_id;   // 皮肤色ID
  uint32  height;   // 身高百分比
  uint32  fashion_color; // 时装颜色
  uint32  tattoo; // 纹身索引
  uint32  tattoo_color; // 纹身颜色
  uint32  inherit_lv;	// 传承等级
  vector<WeaponLookInfo>      weapon_list;	// 装配的神兵
  uint8   career_lv;    // 转职等级
};

struct petModel
{
	uint32				pet_cfg_id;	// 宠物配置id
	uint32              pet_star;   // 星级
	uint8               pet_pos;    // 上阵位置
	uint16              pet_lv;     // 等级
	uint16              pet_sp_lv； // SP等级
};

// 玩家外观显示（不要在中间插入字段）
struct playerModelUI
{
	uint64	playerId;				// 玩家ID
	string	name;					// 玩家姓名
	uint8	vip;					// VIP等级
	uint8	sex;					// 玩家性别
	pb_uint16	level;					// 玩家等级
	pb_uint32 	head_id;     			// 头像ID
	pb_uint32 	frame;					// 头像框ID
	string	serverName;				// 服务器名
	string	guildName;				// 帮派名字
	pb_uint64	battleValue;			// 战斗力
	uint64	guild_id;				// 战盟ID
	pb_uint32	guildRank;				// 战盟职位
	pb_uint32  nationality_id;     	// 国籍id
	vector<roleModel> role_list;	// 角色列表
	vector<petModel> pet_list;		// 宠物列表
};

struct U2GS_player_ui_req ->
{
	uint64 player_id;
};

struct GS2U_player_ui_ret <-
{
	playerModelUI player_ui;
};

struct LookInfoPlayer4UI
{
	uint64 				player_id;
	string 				name;        // 名字
	uint32 				level;
	uint32				headid;	// 头像ID
	uint32				frame;	// 头像框
	uint64				battle_value; //战力	
	uint8 				vip;
	uint32              career; 				           	//
	uint32              fateLevel; 				           	// 命格等级
	vector<uint32>      fashionCfgIDList;					// 领队可见时装配置ID列表
	vector<EqLookInfo>  eq_list; 				    		// 可见装备列表
	uint16              suitChara; 				            //  13、觉醒大师等级
	uint16  			suitLevel; 				            //  30、强化大师等级
	uint16  			suitQuality; 				        //  31、精炼大师等级
	uint32  			wingCfgID; 				            //  128、佩戴神翼ID
	uint8   			sex; 				                //  自己的性别
	vector<uint32> 		sutraDataID; 				      	//  装配的圣物配置ID列表
	uint32    			pet_id; 				            //  宠物出战ID (配置表ID)
	uint32				weapon_id;			// 神兵id
	uint8				weapon_vfx;			// 神兵特效
	uint32				weapon_level;		// 神兵阶数
	uint32				weapon_star;		// 神兵星级
	uint32              ancient_holy_eq_id;         //古神圣装最低品质装备配置id
  uint32              ancient_holy_eq_enhance_level;  // 古神圣装最低强化等级
  uint32  hair_color_id;   // 领队发色ID
  uint32  skin_color_id;   // 领队皮肤色ID
  uint32  height;   // 领队身高百分比
  uint32  fashion_color; // 领队时装颜色
  uint32  tattoo; // 纹身索引
  uint32  tattoo_color; // 纹身颜色
};

struct U2GS_LookInfoPlayer4UIReq ->
{
	uint64 player_id;
};

struct GS2U_LookInfoPlayer4UISync <-
{
	LookInfoPlayer4UI look_info;
};

//--------------------------------------toplist.h----------------------------------------------
struct topBattleHero
{
	uint32	heroDataID;	// 上阵英雄配置ID
	uint16  star;	// 英雄星数
	uint16  chara;  // 英雄升品等级
	uint16  awaken;		// 觉醒等级
};

//排名类型
// 1).%%大闹天宫历史最高星数
// 2).%%妖魔来袭总伤害
// 3).%%妖魔来袭最高伤害
struct topPlayer
{
	uint64	playerId;	//角色ID
	string	name;		//角色姓名
	uint32	vip;		//角色VIP等级
	uint32	sex;
	uint16	career;		//角色职业
	uint16	level;		//角色等级
	uint32  fateLevel;              // 14、命格等级
	uint32 	headID;             // 16、头像ID
	uint32 	frame;	// 头像框ID
	string	serverName;	// 服务器名
	string	guildName;	//角色帮派名字
	uint64	battleValue;//角色战斗力
	uint32	titleID;	// 称号ID
	uint32	mountDataID;		// 坐骑配置ID，0表示没有坐骑
	uint16	mountStar;			// 坐骑星数
	vector<uint32> fashionCfgIDList;  // 可见时装配置ID列表
	vector<EqLookInfo> eq_list;  // 装备列表
	vector<topBattleHero>	battleHeroID_list;	// 上阵英雄配置ID列表
	uint	rank;		//角色排名
	uint64	value;		//角色排名值
	vector<int>	customInt;	//	自定义字段
	uint32	worship_times;	// 赞美次数
	uint8	is_worship;	// 是否赞美（1：已赞美 0：未赞美）
	uint	time;		//进入排名时间
	uint64	guild_id;	// 战盟ID
	uint32	guildRank;//仙盟职位
	uint32  wingCfgID;			// 128、佩戴神翼ID
	uint16	intensity_lv;	// 头衔等级
	uint32	weapon_id;			// 神兵id
	uint8	weapon_vfx;			// 神兵特效
	uint32	weapon_level;		// 神兵阶数
	uint32	weapon_star;		// 神兵星级
	uint32  nationality_id;      // 国籍id
	uint32  ancient_holy_eq_id;         //古神圣装最低品质装备配置id
    uint32  ancient_holy_eq_enhance_level;  // 古神圣装最低强化等级
	uint32	contribution;			// 远征功勋
	uint16	nobility_id;		// 爵位ID
};

struct U2GS_GetTopRankInfo__1400->
{
	uint	type;//%%排名类型(每个关卡的排行，可用关卡ID作为类型) 其它类型还未定义
};

struct GS2U_TopRank__1401<-
{
	uint	type;//排行类型
	vector<topPlayer>	topPlayers;

};

struct U2GS_WorshipPlayer__1402 ->
{
	uint64	targetID;	// 被膜拜玩家ID
};



struct U2GS_getBattleTopModel__1403 ->
{

};

struct GS2U_BattleTopModelInfo__1404 <-
{
	uint8				type;//排行类型
	vector<topPlayer>	topPlayers;
};
//----------------------------竞技场----------------------------------
struct ArenaHistory
{
	uint				time;//记录时间
	string				playerName;	//玩家名
	uint8				type;//记录类型
	int					newRank;//排名变化（>0 排名升高 <0 排名下降 =0排名不变）
	uint64				playerID;//玩家ID
};
struct ArenaPlayer
{
	LookInfoPlayer4UI	player;			// 玩家模型
	uint16				rankNumber;		// 排名
};

struct ArenaPlayerScoreRank
{
	uint64 player_id;
	string player_name;
	uint8 player_sex;
	string guild_name;
	uint32 head_id;
	uint32 frame_id;
	uint32 score;
	uint16 rank;
};

struct GS2U_ArenaPlayerInfo__1405<-
{
	uint8				rankType;//排行榜类型
	uint16				rankNumber;//排名
	uint16				lastRank;//昨日排名
	uint8				arenaMaxRankType;//竞技场最高排名榜单类型
	uint16				arenaMaxRankNum;//竞技场最高排名榜单排名
	vector<ArenaHistory>	historyList;//历史记录
	vector<ArenaPlayer>		playerList;//相关玩家信息
};

struct GS2U_ArenaRankInfo__1406<-
{
	vector<ArenaPlayer>		playerList;//相关玩家信息
};


struct U2GS_GetArenaScoreRank ->
{
};

//
struct GS2U_GetArenaScoreRankRet <-
{
	vector<ArenaPlayerScoreRank>		rank_list;
	uint16 my_rank;
	uint32 my_score;
};
//----------------------------竞技场 END----------------------------------
//--------------------------------------toplist.h END----------------------------------------------
//--------------------------------------worldboss.h----------------------------------------------
//请求世界BOSS数据
struct U2GS_RequestWolrdBossInfo__1500->
{
	uint				dungeonID;
};

//世界BOSS数据
struct GS2U_WolrdBossInfo__1501<-
{
	uint32 worldBossID; 	//boss dataid
	int32  bossIndex;		//index
	int32  worldBossLevel; 	//boss等级
	int32  maxFightCount;	//总次数
	int32  curFightCount;	//已经挑战次数
	int32  startNow; 		//0还未开始，1开始
	int32  startTime; 		//开启时间
	int32  endTime; 		//时间
	uint64 curHp; 			// 当前血量
	string lastKillerName;	//击杀者名字
};

//
struct U2GS_RequestBuyWorldBossBuff__1502->
{
	int32  buffIndex; 		//第几个buff
};

//
struct GS2U_RequestBuyWorldBossBuffResult__1503<-
{
	int32  result; 		// 0表示成功，或者其他错误码
	uint32	buffIndex; 		//第几个buff
};
//--------------------------------------worldboss.h END----------------------------------------------1549

// 奖励
struct rewardStc
{
	uint8	type;				// 1物品 2货币
	uint32	id;					// type为1时代表物品id，type为2是代表货币枚举
	uint32	num;				// 数量
	uint8	bindState;	    	// 绑定状态  0 -非绑定   1-绑定
};

//--------------------------------------guild.h----------------------------------------------
//创建帮派
struct U2GS_CreateGuild__1650->
{
	uint8	headIcon;	//仙盟图标
	string	strGuildName;	//仙盟名称
};
struct GS2U_CreateGuildResult__1651<-
{
	uint32				result;
	uint64			guildID;
};

//查询帮派列表（简略信息）
struct U2GS_QueryGuildList__1652->
{

};

struct guildCondition
{
	uint8		type;	// 限制类型 （1：战斗力）
	uint32		value;	// 限制的值 
};

//帮派信息
struct GuildInfoSmall
{
	//	帮派ID
	uint64			nGuildID;
	// 帮派图标ID
	uint8		headIcon;
	//	帮派名字
	string		strGuildName;
	//	帮主ID
	uint64			nChairmanPlayerID;
	//	帮主名字
	string		strChairmanPlayerName;
	//	帮派等级
	uint16		nLevel;
	//	人数
	int16		nMemberCount;
	//	公告
	string		strAnnouncement;
	// 是否申请中(0:未申请 1:已申请)
	uint8		isApp;
	// 排名
	uint16		rank;
	// 总战斗力
	uint64		guildBattleValue;
	// 是否自动加入(1:自动，2:手动)
	uint8		autoJoin;
	// 评级 (0:待定 1:D 2:C 3:B 4:A 5:S)
	uint8		rating;
	// 限制条件
	vector<guildCondition> condition_list;
	// 是否天神骑士团
	uint8 is_knight;

};
struct GS2U_GuildInfoSmallList__1653<-
{
	vector<GuildInfoSmall>	info_list;
};

//查询自己帮派的信息（全部信息）
struct U2GS_GetMyGuildInfo__1654->
{

};
// type
// 战盟动态
// 		1:加入战盟 params = []
// 		2:退出战盟 params = []
// 		3:解散战盟 params = []
// 		4:被踢出战盟 params = []
// 		5:任命为 params = [职位]
// 		6:降职为 params = [职位]
// 		7:建筑升级 params = [建筑ID，等级]
// 		8:祭祀 params = [祭祀类型，祭祀次数]
// 红包事件
//     1:每日首充红包 params = [红包金额]
//     2:每日累计充值红包 params = [红包金额]
//     3:玩家手动发红包 params = [红包金额]
// 仓库事件
//     1:捐献 params = [ItemDBID, ItemID, character]
//     2:兑换 params = [ItemDBID, ItemID, character, num]
//     3:清理 params = [num, guild_money]
//     4:系统自动清理 params = [num, guild_money]
// 宝箱分配事件
//     1.手动分配 params = []
//     2.自动分配 params = []
struct guild_event
{
	string	name;			// 玩家名
	uint8   rank;     // 官职
	uint8		sex;			// 性别
	uint8		type;			// 类型
	uint32	time;			// 时间
	vector<uint64>	params;		// 参数列表
};

// 赠送碎片信息
struct givePieceInfo
{
	uint64		playerID;		// 玩家ID
	string		strPlayerName; 	// 玩家名
	uint32		nPlayerLevel; 	// 玩家等级
	uint8		sex;			// 性别，0-男，1-女
	uint32		nRank; 			// 职位
	uint32 		vip;			// VIP等级
	uint32 		headID;			// 头像ID
	uint32 		frame;			// 头像框
	uint32 		fateLevel;		// 命格等级
	uint32      card_id;        // 卡片ID
	uint16		num;			// 赠送的数量
	uint32		giveTime;		// 赠送时间
};

// 仙盟许愿池信息
struct guildWishData
{
	uint64		playerID;		// 玩家ID
	string		strPlayerName; 	// 玩家名
	uint32		nPlayerLevel; 	// 玩家等级
	uint8		sex;			// 性别，0-男，1-女
	uint32		nRank; 			// 职位
	uint32 		vip;			// VIP等级
	uint32 		headID;			// 头像ID
	uint32 		frame;			// 头像框
	uint32      card_id;        // 卡片ID
	uint16      wishNum;        // 许愿的数量
	uint16		reciveCount;	// 收到的碎片数量
	uint32		msgTime;		// 发送消息时间
	uint32		wishTime;		// 发布心愿时间
	uint32		subscribe_time;	// 订阅过期时间，0表示未购买
	vector<givePieceInfo>	give_List;	// 赠送列表
};

struct guildBuilding
{
	pb_uint32		buildingID;		// 建筑ID
	pb_uint16		level;			// 等级
};

//帮派基本信息
struct GuildBaseData
{
	//	帮派ID
	uint64		nGuildID;
	// 头像
	uint8		headIcon;
	//	帮派名字
	string		strGuildName;
	//	帮主ID
	uint64		nChairmanPlayerID;
	//	帮主名字
	string		strChairmanPlayerName;
	//  排名
	uint16		nRank;
	//	等级
	uint8		nLevel;
	// 每日获得经验
	pb_uint32		dayExp;
	// 每周获得经验
	pb_uint32		weekExp;
	//	经验
	pb_uint32		nExp;
	//  贡献度
	pb_uint32			nContribute;
	//	成员数
	pb_uint16 memberCount;
	//	公告
	pb_string		strAnnouncement;
	// 封天祭祀进度
	pb_uint32		feteValue;
	// 当前祭祀人数
	pb_uint32		feteCount;
	// 当前祭祀人次
	pb_uint32		feteTotalTimes;
	// 公会创建时间
	uint32		createTime;
	// 上次更名时间
	uint32		changeNameTime;
	// 公会基金
	pb_uint64		guildMoney;
	// 是否自动加入(1:自动，2:手动)
	uint8		autoJoin;
	// 公会建材
	pb_uint32      building_materials;
	// 宝箱积分
	pb_uint32      treasure_chest;
	// 已分配的宝箱数量
	uint16      treasure_chest_consume;
	// 宝箱分配规则
	uint8       assign_treasure_rule;
	// 可许愿数量
	uint8       wish_limit_num;
	// 战车使用权限 bit0~bit5 对应0~5职位
	uint8   chariot_use_rule;
	// 公会篝火BOSS场次 bit0~7 当天场次 bit8~15 明天场次
	uint16  bonfire_boss_order;
	// 限制条件
	vector<guildCondition> condition_list;
	// 建筑等级列表
	vector<guildBuilding> building_list;
	// 战车科技
	vector<key_value> chariot_science_list;
	// 当日活跃度
	pb_uint16      active_value;
	// 活跃度连续不满足要求天数
	uint8      active_less_day;
	// 公会副本自动分配规则
	uint8       guild_ins_zones_assign_rule;
	// 是否为骑士团
	uint8 is_knight;
};

struct FeteAwardsList
{
	uint32	feteID;		//封天祭祀配置ID
};

//帮派成员信息
struct GuildMemberData
{
	//	玩家ID
	uint64			nPlayerID;
	//	玩家名字
	string		strPlayerName;
	// 性别，0-男，1-女
	uint8  		sex;         
	//	玩家等级
	uint16		nPlayerLevel;
	//	职位
	uint8		nRank;
	// VIP等级
	uint8 		vip;
	//头像框
	pb_uint32 		frame;
	// 16、头像ID
	pb_uint32 		headID;
	// 命格等级
	pb_uint32 		fateLevel;
	// 周经验
	pb_uint32			nAddExp;
	// 每日贡献度
	pb_uint32 		nDailyContr;
	// 每周贡献度
	pb_uint32 		nweeklyContr;
	//	贡献度
	pb_uint32			nContribute;
	//  贡献积分
	pb_uint32			nDonateIntegral;
	//	是否在线
	int8		bOnline; //1:在线
	uint32		join_time;	// 加入战盟时间
	pb_uint64 battleValue;            // 战斗力
	uint32	offlineTime;	//离线时间
	pb_uint32	 salary;		// 工资
	pb_uint32  nationality_id;        // 区域id
	pb_uint32  state_mark;			   // 状态标记 bit1 是否被分配宝箱 bit2 是否领取工资 bit3 是否被分配公会副本奖励
	pb_int16   active_value;  // 当日活跃度
};

//帮派基础信息
struct GS2U_GuildFullInfo__1655<-
{
	GuildBaseData		stBase;
	uint64              total_bv;    // 帮派总战力
	int8				my_rank;	 // 我的职位等级
	vector<FeteAwardsList> feteList;	// 玩家已经领奖的配置ID列表
	uint32              last_give_time;  // 最近被赠送的时间
	vector<key_value> active_value_access; // 我的 当日活跃完成情况key 活跃id value 次数
	uint8      active_less_day; // 我的 活跃度连续不满足要求天数
};

//请求帮派玩家信息
struct U2GS_GetMyGuildMemberInfo->
{
};
//帮派玩家信息
struct GS2U_GuildAllMemberInfo<-
{
	vector<GuildMemberData>	member_list;
};

//请求公会事件列表
struct U2GS_GetMyGuildEvent->
{
};
//公会事件列表
struct GS2U_GetMyGuildEventRet<-
{
	vector<guild_event> event_list;
};

//请求许愿池
struct U2GS_GetMyGuildWishData->
{
};
//许愿池
struct GS2U_GetMyGuildWishDataRet<-
{
	vector<guildWishData> wish_list;
};

//查询帮派申请成员列表
struct U2GS_GetMyGuildApplicantInfo__1656->
{

};
//帮派申请列表成员信息
struct GuildApplicantData
{
	//	玩家ID
	uint64			nPlayerID;
	//	玩家名字
	string		strPlayerName;
	//	玩家等级
	uint16		nPlayerLevel;
	//  玩家性别
	uint8       player_sex;
	// VIP等级
	uint32 		vip;
	// 16、头像ID
	uint32 		headID;
	// 头像框
	uint32 		frame;
	// 战斗力
	uint64		battleValue;
	// 命格等级
	uint32 		fateLevel;
};
//帮派申请成员信息列表
struct GS2U_GuildApplicantInfoList__1657<-
{
	vector<GuildApplicantData> info_list;
};

//修改帮派公告
struct U2GS_RequestChangeGuildAnnouncement__1658->
{
	string			strAnnouncement;
};
//修改帮派公告返回
struct GS2U_RequestChangeGuildAnnouncementResult__1659<-
{
	uint32			result;
};
//帮派公告变化
struct GS2U_GuildAnnouncementChanged__1660<-
{
	string			strAnnouncement;
};

//贡献度捐献
struct U2GS_RequestGuildContribute__1661->
{
	int				nMoney;
	int				nGold;
	int				nItemCount;
};
//贡献度捐献返回
struct GS2U_RequestGuildContributeResult__1662<-
{
	uint32	result;
};
//帮派等级经验变化
struct GS2U_GuildLevelEXPChanged__1663<-
{
	uint16		nLevel;
	int			nEXP;
};

//成员上线下线变化
struct GS2U_GuildMemberOnlineChanged__1664<-
{
	uint64				nPlayerID;
	uint8				nOnline;
};

//职位调整
struct U2GS_RequestGuildMemberRankChange__1665->
{
	uint64			nPlayerID;
	uint8			nRank;
};
//成员职位变化
struct GS2U_GuildMemberRankChangedResult__1666<-
{
	uint32				result;
	uint64				nPlayerID;
	uint32				nNewRank;
};

//踢成员
struct U2GS_RequestGuildKickOutMember__1667->
{
	uint64			nPlayerID;//被踢成员的ID
};
//踢成员返回
struct GS2U_RequestGuildKickOutMemberResult__1668<-
{
	uint32			result;
};
//主动退出帮派
struct U2GS_RequestGuildQuit__1669->
{

};
//主动退出帮派返回
struct GS2U_RequestGuildQuitResult__1670<-
{
	uint32		result;
};
//成员退出返回消息
struct GS2U_GuildMemberQuit__1671<-
{
	uint64				nPlayerID;
	uint8			bKickOut;//是否是被踢出去的，1：是;0：不是
};

//申请入帮
struct U2GS_RequestJoinGuild__1672->
{
	uint64			nGuildID;
};
//申请入帮返回
struct GS2U_RequestJoinGuildResult__1673<-
{
	uint32			result;
};

//操作入帮的申请者
struct U2GS_RequestGuildApplicant__1674->
{
	int64				nPlayerID;
	uint8				nAllowOrRefuse;//0:拒绝;1:同意
};
//操作入帮的申请者返回
struct GS2U_RequestGuildApplicantResult__1675<-
{
	uint32			result;
};

//申请列表全部操作
struct U2GS_RequestGuildApplicantOPAll__1676->
{
	uint8				nAllowOrRefuse;//0:拒绝;1:同意
};

//新加入成员
struct GS2U_GuildMemberAdd__1677<-
{
	GuildMemberData stData;
};

//加入仙盟成功
struct GS2U_JoinGuildSuccess__1678<-
{
	uint64 	guildID;	// 仙盟ID
	string 	guildName;	// 仙盟名字
	uint8	isSuc;	// 是否成功(1:成功 0:不成功)
};

//帮派改名请求
struct U2GS_RequestChangeGuildName__1679 ->
{
	string			strGuildName;
};
//帮派改名
struct GS2U_ChangeGuildNameResult__1680<-
{
	uint32				result;
};

//解散帮派
struct U2GS_RequestDissolveGuild__1681->
{

};
//解散帮派返回
struct GS2U_DissolveGuildResult__1682<-
{
	uint32 result;
};

//邀请入帮
struct U2GS_GuildInvite ->
{
	uint64 playerID; //被邀请玩家ID
};
struct GS2U_GuildInviteResult <-
{
	uint32    result;
	
	uint32    limit_timestamp;   // 退出战盟惩罚到期的时间  此值不为0时显示xxxxxxxx
	uint16    money_type;        // 清除对方的cd需要的货币
	uint32    money;
};

// 清除被邀请者的限制cd并且邀请他
struct U2GS_GuildInviteByMoney ->
{
    uint64    player_id; // 被邀请玩家ID
    bool      is_use_money; 
    uint16    money_type;        // 清除对方的cd需要的货币
    uint32    money;
};
struct GS2U_GuildInviteByMoneyRet <-
{
    uint32    result;
};


//被邀请玩家收到的邀请信息
struct GS2U_GuildInviteTip__1685<-
{
	uint64 guildID; //邀请进入帮会的帮会ID
	uint64 playerID; //邀请人，一般是帮主ID
	string playerName;//邀请人名字
	string guildName;//帮会名字
	uint16 level;// 等级
	uint64 battleValue;//战斗力
	uint32 vip;//VIP
};
//被邀请者回复邀请
struct U2GS_GuildApplyInvite__1686->
{
	uint8 isAllow;  //1同意加入 0不同意
	uint64 inviterID; //邀请人ID
	uint64 guildID; //帮派ID
};
struct GS2U_GuildApplyInviteResult__1687<-
{
	uint32 result;
};
//邀请者收到被邀请者的回复
struct GS2U_GuildApplyInviteIsAllow__1688<-
{
	string	name;	// 玩家名
	uint32 result;//0：拒绝;1：同意(主要是用在拒绝上)
};

// 封天祭祀
struct U2GS_FeteGod__1689 ->
{
	uint32	feteID;	// 封天祭祀配置ID
	uint8   feteTimes; //祭祀次数
};

// 封天祭祀反馈
struct GS2U_FeteGodResult__1690 <-
{
	uint32	feteID;	// 封天祭祀配置ID
	uint8   sucTimes; //成功次数
	vector<key_value> reward_list;	// key - id, value - num
	uint32	result;	// 反馈
};

// 领取封天祭祀
struct U2GS_getFeteGodAward__1691 ->
{
	vector<uint8> feteIdList;	// 封天祭祀配置ID
};

// 领取封天祭祀反馈
struct GS2U_getFeteGodAwardResult__1692 <-
{
	vector<uint8> feteIdList;	// 封天祭祀配置ID
	uint32	result;	// 反馈
};

// 玩家捐献积分
struct U2GS_donateIntegral ->
{
};

// 玩家捐献积分返回
struct GS2U_donateIntegralRet <-
{
	uint32		value;
};

// 玩家捐献物品
struct U2GS_donateItem__1695 ->
{
	vector<uint64>	id_list;		// 物品ID列表
};

// 玩家捐献物品反馈
struct GS2U_donateItemResult__1696 <-
{
	uint64		itemID;		// 物品ID
	uint32		result;		// 反馈
};

// 玩家兑换仓库物品
struct U2GS_changeItem__1697 ->
{
	uint64		id;		// 唯一ID
	uint16		num;	// 兑换数量（仅兑换通用道具生效）
};

// 玩家兑换仓库物品反馈
struct GS2U_changeItemResult__1698 <-
{
	uint64		id;		// 唯一ID
	uint32		result;		// 反馈
};

// 盟主删除仓库中的物品
struct U2GS_deleteFromGuildBag__1699 ->
{
	vector<uint64>	id_list;		// 物品ID列表
};

// 盟主删除仓库中的物品反馈
struct GS2U_deleteFromGuildBagResult__1700 <-
{
	uint64		saleID;		// 唯一ID
	uint32		result;		// 反馈
};


// 领取工资
struct U2GS_getGuildSalary__1711 ->
{
};

// 领取工资反馈
struct GS2U_getGuildSalaryResult__1712 <-
{
	uint32	result;		// 结果
};

// 取消申请加入帮派
struct U2GS_CancelJoinGuild__1713 ->
{
	uint64	guildID;	// 帮派ID
};

// 取消申请加入帮派反馈
struct GS2U_CancelJoinGuildResult__1714 <-
{
	uint64	guildID;	// 帮派ID
	uint32	result;		// 反馈
};

// 分配宝箱
struct U2GS_assign_treasure_chest ->
{
	vector<uint64>	id_list;		// 分配的玩家id
};

// 分配宝箱结果
struct GS2U_assign_treasure_chest_ret <-
{
	vector<uint64>	id_list;		// 成功分配的玩家id
	uint32 err_code;
};

// 自动分配宝箱规则设置
struct U2GS_assign_treasure_rule_set ->
{
    uint8 rule;  // 1-按周声望排序 2-按战力排序 3-按等级排序 4-不进行自动分配
};
struct GS2U_assign_treasure_rule_set_ret <-
{
	uint8   rule;
	uint32	err_code;
};

// 领取声望工资
struct U2GS_get_prestige_salary ->
{
};

// 领取声望工资返回
struct GS2U_get_prestige_salary_ret <-
{
	uint32	err_code;
};

//请求宝箱分配事件列表
struct U2GS_assign_treasure_event->
{
};
struct GS2U_assign_treasure_event_ret<-
{
	vector<guild_event> event_list;
};

// 玩家声望
struct U2GS_guild_member_prestige ->
{
	uint8   type;   // 1-总声望 2-周声望
};

// 玩家声望返回
struct GS2U_guild_member_prestige_ret <-
{
	uint8       type;
	uint32		value;
};

// 战盟科技信息
struct U2GS_guild_science_info ->
{
};

// 战盟科技信息返回
struct GS2U_guild_science_info_ret <-
{
	vector<key_value> list;
};

// 战盟科技升级
struct U2GS_guild_science_up ->
{
	uint16 id;
};

// 战盟科技升级返回
struct GS2U_guild_science_up_ret <-
{
	uint16 id;
	uint16 new_lv;
	uint32 error;
};

// 战车建造结构
struct chariot_stc
{
	uint64 id;
	uint16 type;
	uint32 end_time;
};

// 战争工坊信息
struct U2GS_guild_workshop_info ->
{
};

//战争工坊返回
struct GS2U_guild_workshop_info_ret <-
{
	vector<chariot_stc>list;   // 战车列表
};

// 战盟战车建造
struct U2GS_guild_chariot_build ->
{
	vector<key_value> build_list;   // 提交建造的战车 (战车类型,数量)
};

// 战盟战车建造返回
struct GS2U_guild_chariot_build_ret <-
{
	uint32 error;
};

// 战盟战车取消建造/回收
struct U2GS_guild_chariot_build_cancel ->
{
	uint64 cancel_id;
};

// 战盟战车取消建造/回收返回
struct GS2U_guild_chariot_build_cancel_ret <-
{
	uint64 cancel_id;
	uint32 error;
};

// 战车使用规则设置
struct U2GS_chariot_use_rule ->
{
    uint8 value;  // 
};
struct GS2U_chariot_use_rule_ret <-
{
	uint8 value;
	uint32	err_code;
};

// 活跃完成情况
struct GS2U_MyActiveValueAccessUpdate<-
{
	vector<key_value> active_value_access; // 我的 当日活跃完成情况key 活跃id value 次数
};
//--------------------------------仙盟副本----------------------------------------

// 被踢出仙盟
struct GS2U_KickOutGuild__1720 <-
{

};
//--------------------------------仙盟副本 END----------------------------------------
// 一键拒绝
struct U2GS_onkeyRefuseGuildApp__1721 ->
{

};
// 一键拒绝反馈
struct GS2U_onkeyRefuseGuildAppResult__1722 <-
{
	uint32		result;
};

//--------------------------------------guild.h END----------------------------------------------
//--------------------------------------player.h----------------------------------------------

struct UserPlayerData
{
	uint64 roleID;			// 角色ID
	string name;			  // 角色名
	uint8  sex;         // 性别，0-男，1-女
	uint32 career;			// 职业
	uint16	 level;			  // 等级
	vector<uint32> fashionCfgIDList;  // 可见时装配置ID列表
    uint32  fashion_color; // 时装颜色
	vector<uint32> equipCfgIDList;    // 可见装备配置ID列表
	uint32  wingCfgID;			// 128、佩戴神翼ID
	uint64	battleValue;
	uint32  ancient_holy_eq_id;         // 古神圣装最低品质装备配置id
    uint32  ancient_holy_eq_enhance_level;  // 古神圣装最低强化等级
    uint32  hair_color_id;					// 21.发色索引
    uint32  skin_color_id;					// 22.肤色索引
    uint32  height_id;						// 23.身高索引
    uint32  tattoo;							// 26.纹身索引
    uint32  tattoo_color; 				    // 27.纹身颜色
    uint8   is_show_helmet;                 // 28.是否不展示头盔
  	vector<WeaponLookInfo>  weapon_list;	// 29.神兵列表
	uint8	is_show_weapon;					// 30.是否展示神兵 1是 0否
    uint16  career_lv;      // 转职等级
};
struct GS2U_UserPlayerList__2013 <-
{
	vector<UserPlayerData>	info;
};

struct GS2U_ServerInfo <-
{
	uint32		enter_server_id;	// 入口服id
	uint32		real_server_id;		// 真实服id
};

// 1. 位置  打包 
// 2. 组队  打包ID
// 3. 普通道具  打包itemid
// 4. 表情 
// 5. 装备 
// 6. 语音

struct chat_instance
{
  uint64 uid;
  string pk;
};


// 客户端发送聊天消息
struct U2GS_ChatInfo ->
{
  uint8  channelID;		// 频道：1-世界、2-仙盟、3-系统、4-队伍、5-喇叭、6-私聊
  uint64 receiverID;	// 接收者ID，私聊时使用
  string content;			// 内容
  vector<uint64> p1_list; 
  vector<string> p2_list;  // 休息休息 [#1][#2] 爱学习
  vector<chat_instance> ins_list;  // 休息休息 [#1][%1][#2] 爱学习
};

// 获取实例信息
struct U2GS_GetChatInstance ->
{
  uint64        uid;       // 实例ID
};
struct GS2U_GetChatInstanceRet <-
{
  chat_instance ins;
};



// 服务端发送错误消息
struct GS2U_ChatError <-
{
  uint32 errorCode;    // 错误原因
};

// 服务端发送聊天消息
struct GS2U_ChatInfo <-
{
  uint8  channelID;		  // 频道：1-世界、2-仙盟、3-系统、4-队伍、5-喇叭、6-私聊
  uint64 receiverID;	// 接收者ID，私聊时使用
  string serverName;	// 服务器名
  uint64 senderID;		  // 发送者ID
  string senderName;	  // 发送者Name
  uint32 senderSex;     // 发送者性别
  uint32 senderCareer;  // 发送者职业
  uint32 		frame;    //头像框
  uint32 senderLevel;   // 发送者等级
  uint32 senderVip;     // 发送者VIP
  uint32 senderFateLevel;     // 发送者命格等级
  string content;		  	// 内容
  vector<uint64> p1_list; 
  vector<string> p2_list; 
  
  uint16 chat_bubble;		  // 聊天气泡
  uint16 horn_bubble;		  // 喇叭气泡
  
  uint32 sendTime;		  // 发送时间
  uint64 senderGuildID;		    // 发送者仙盟ID
  uint32 senderHeadID;             // 发送者头像ID
  uint8  senderGuildRank;		    // 发送者仙盟官职
};

// 客户端发送语音聊天消息
struct U2GS_VoiceChatInfo ->
{
  uint8         channelID;		// 频道：2-仙盟、4-队伍、6-私聊    xxxxx#1#2
  uint64        receiverID;	  // 接收者ID，私聊时使用            [1]
  uint8         voiceSeconds;	// 语音秒数
  vector<uint32>  voiceCacheIDList; // 语音缓存ID列表
  uint32        voiceTextID;    // 语音翻译ID，客户端自己定义
};

// 服务端发送语音聊天错误消息
struct GS2U_VoiceChatError <-
{
  uint32 errorCode;    // 错误原因
};

// 服务端发送语音聊天消息
struct GS2U_VoiceChatInfo <-
{
  uint8         channelID;		  // 频道：2-仙盟、4-队伍、6-私聊
  uint64        receiverID;	  // 接收者ID，私聊时使用
  string        serverName;	// 服务器名
  uint64        senderID;		    // 发送者ID
  string        senderName;	    // 发送者Name
  uint32        senderSex;      // 发送者性别
  uint32        senderCareer;   // 发送者职业
  uint32 		    frame;    //头像框
  uint32        senderLevel;    // 发送者等级
  uint32        senderVip;      // 发送者VIP
  uint32        senderFateLevel;     // 发送者命格等级
  
  uint16        chat_bubble;		  // 聊天气泡
  uint16		horn_bubble;		  // 喇叭气泡
  
  uint64        voiceKey;       // 语音标识符
  uint8         voiceSeconds;	  // 语音秒数
  uint32        sendTime;		    // 发送时间
  uint64        senderGuildID;		    // 发送者仙盟ID
  uint8         voiceCount;	  // 语音段数
  uint32        senderHeadID;             // 发送者头像ID
  uint8         senderGuildRank;		    // 发送者仙盟官职
};

struct U2GS_GetVoiceContent__2020 ->
{
  uint8         channelID;		  // 频道：2-仙盟、4-队伍、6-私聊
  uint64        senderID;		    // 发送者ID
  uint64        voiceKey;       // 语音标识符
};
struct GS2U_GetVoiceContent__2021 <-
{
  uint8         channelID;		  // 频道：2-仙盟、4-队伍、6-私聊
  uint64        senderID;		    // 发送者ID
  uint64        voiceKey;       // 语音标识符
  uint32        errorCode;      // 0-成功，非0-错误原因
  binary voiceContent;	  // 成功后有意义，语音内容
  uint8         voiceIndex;	  // 成功后有意义，语音索引（假如有3段，则索引依次为1,2,3）
};

//变量设置
struct VariantData
{
	int16	index;					//变量序号
	uint		value;					//变量值
};
//64位类型变量设置
struct VariantBigData
{
	int16		index;					//变量序号
	uint64		value;					//变量值
};

//变量设置
struct pb_VariantData
{
	pb_int16	index;					//变量序号
	pb_uint		value;					//变量值
};
//64位类型变量设置
struct pb_VariantBigData
{
	pb_int16		index;					//变量序号
	pb_uint64		value;					//变量值
};

// 变化的值，只发变化的。替换本地缓存值
struct GS2U_VariantDataSet__2022 <-
{
	int8	variant_type;			//-变量类型 1:玩家静态变量, 2:玩家动态变量, 3世界变量
	vector<pb_VariantData>	info_list;
	vector<pb_VariantBigData>	big_list;
};
// 所有值，没有发的默认为0。先把本地缓存全部重置为0，再用这些值替换
struct VariantDataSetAll
{
	int8	variant_type;			//-变量类型 1:玩家静态变量, 2:玩家动态变量, 3世界变量
	vector<pb_VariantData>	info_list;
	vector<pb_VariantBigData>	big_list;
};

struct GS2U_VariantDataSetAll <-
{
	vector<VariantDataSetAll>	info_list;
};

// 变化的值，只发变化的。替换本地缓存值
struct GS2U_VariantRoleDataSet <-
{
	uint64  role_id;				// 角色id
	int8	variant_type;			//-变量类型 1:角色静态变量, 2:角色动态变量
	vector<VariantData>	info_list;
	vector<VariantBigData>	big_list;
};

// 所有值，没有发的默认为0。先把本地缓存全部重置为0，再用这些值替换
struct variantRoleDataSetAll
{
	uint64  role_id;				// 角色id
	int8	variant_type;			//-变量类型 1:角色静态变量, 2:角色动态变量
	vector<VariantData>	info_list;
	vector<VariantBigData>	big_list;
}

struct GS2U_VariantRoleDataSetAll <-
{
	vector<variantRoleDataSetAll> info_list; // 角色变量列表
};

// 玩家基本信息
struct PlayerBaseInfo__2023 <-
{
	uint64 id;                     			// 2、唯一ID号
	string name;                   			// 3、人物昵称
	uint8  sex;                    			// 4、性别，0-男，1-女
	pb_uint32 career;                 			// 5、职业
	uint16 level;                  			// 6、玩家等级
	uint64 exp;                    			// 7、经验值
	pb_uint32 energy;                 			// 9、体力值
	pb_uint32 stamina;                			// 10、精力值
	pb_uint32 vip;                    			// 11、VIP等级
	uint64 battleValue;            			// 12、战斗力
	uint32 offlineTime;			   			// 14、最后下线时间
	pb_uint32 recharge;			   			// 18、累充元宝
	uint32 createTime;			   			// 20、创建时间
	uint64 guildID;							// 22、帮派ID
	uint32 quitTime;						// 23、退出帮派时间
	vector<uint32> fashionCfgIDList;  		// 26、可见时装配置ID列表
	uint32 recharFlag;						// 33、玩家首冲标识
	uint32 freeVipVal;						// 35、赠送的VIP经验值
	pb_uint32 keepLoginDays;					// 36、玩家连续登陆天数
	uint32 titleID;							// 38、称号ID
	uint32 weapon_id;						// 42、神兵id
	uint8  weapon_vfx;						// 43、神兵特效
	pb_uint32 weapon_level;					// 44、神兵解封等级
	pb_uint32 weapon_star;						// 45、神兵星级(主体)
	pb_uint32 nationality_id; 					// 47、国籍id
	pb_uint32 military_rank;					// 53、军衔
	uint32 wingCfgID;						// 65、佩戴神翼ID
	uint32 fwinglevel;						// 66、飞翼等级
	uint32 res_point;						// 69、资源点
	uint32 guard_id;   						// 71、守护ID
	pb_uint32 rein_lv;                         // 78、转生等级
	pb_uint64 recharge_price;                  // 79、充值金额（对应地区货币金额*100）
	// 以下不会通过 PlayerBasePropertyChanged 刷新
	pb_uint32 headID;                 			// 头像ID
	string guildName;						// 仙盟名字
	uint8  isInit;							// 是否初次进游戏(0:否 1:是)
	pb_uint32 guildRank;						// 仙盟职位
};

// 玩家属性变化
struct PlayerBasePropertyChanged <-
{
	uint8	 index;			// 属性序号（参考PlayerBaseInfo注释）
	uint64 value;			// 属性值
};

// 角色
struct role
{
    uint64  role_id;                        // 3.角色Id
    uint16  career;                         // 4.职业
    uint32  create_time;                    // 5.创建时间
	uint32	attr_title_id;					// 9.属性佩戴称号ID
	uint32	show_title_id;					// 10.显示佩戴称号ID    
	uint32  guard_id;						// 11.装配的守护
    uint32  mount_id;                       // 12.装配的坐骑
    uint32  wing_id;						// 13.装配的翅膀
    uint32  holy_id;						// 14.装配的圣物
    uint32  dragon_id;						// 15.装配的龙神
    uint64  battle_value;                   // 16.角色战斗力
    uint32  hair_color_id;					// 21.发色索引
    uint32  skin_color_id;					// 22.肤色索引
    uint32  height_id;						// 23.身高索引
    uint32  tattoo;							// 26.纹身索引
    uint32  tattoo_color; 				    // 27.纹身颜色
    uint8   is_show_helmet;                 // 28.是否不展示头盔
  	vector<WeaponLookInfo>  weapon_list;	// 29.神兵列表
	uint8	is_show_weapon;					// 30.是否展示神兵 1是 0否
};
// 所有的角色列表
struct GS2U_all_role_list <-
{
    uint64        leader_role_id;           // 领队角色Id
    vector<role>  role_list;                // 角色列表
};
// 更新的角色列表
struct GS2U_updated_role_list <-
{
    vector<role>  role_list;                // 角色列表
};
// 更新的角色属性
struct role_property
{
    uint64  role_id;                        // 角色Id
    uint8   index;                          // 属性序号（参考role注释）
    uint64  value;                          // 属性值
};
struct GS2U_updated_role_property <-
{
	vector<role_property>  property_list;                // 属性列表
};

// 创建新角色
struct U2GS_create_role ->
{
    uint16  career;                         // 职业
};
struct GS2U_create_role <-
{
    uint16        career;                   // 职业
    uint32        error;                    // 错误码，为0时后面值才有效
    vector<role>  role_list;                // 新角色列表（成功1个，失败0个）
};

// 改变领队角色
struct U2GS_change_leader_role ->
{
    uint64  role_id;                        // 角色Id
};
struct GS2U_change_leader_role <-
{
    uint32  error;                          // 错误码，为0时后面值才有效
    uint64  leader_role_id;                 // 新领队角色Id
};

// 随机属性信息
struct RandProp
{
	uint16 index;		// 属性号
	pb_uint64 value;		// 属性值
	uint8 character;		// 品质
	uint32 p_index;		// 品质评分索引
};

// 成长属性信息
struct GrowProp
{
	uint8	index;		// 属性号
	pb_uint64	value;		// 初始属性值
	pb_uint64	add_value;	// 成长属性值
	uint8	character;	// 品质
	pb_uint32	p_index;	// 品质评分索引
};

struct AddItem
{
  uint32 itemDataID;          // 道具配置ID
  uint32 itemCount;           // 道具数量
};

struct AddCoin
{
  uint8				type;//货币类型
	uint				amount;//数量
};

// 装备结构
struct EqInfo
{
  uint64	equid;			// 装备ID 8
  pb_uint32	cfg_id;			// 配置ID 4
  uint8		character;		// 品质 1
  uint8		star;			// 星星  1 
  uint8		bind;			// 绑定状态
  vector<RandProp> rand_prop;	// 随机属性列表 [{属性ID,属性值, 属性品质, 评分索引}] 4  27
  vector<RandProp> beyond_prop;	// 卓越属性列表 [{属性ID,属性值, 属性品质, 评分索引}] 4 + 9
  vector<GrowProp> gd_prop;		// 龙饰属性列表(基础属性) [{属性ID,初始属性值,成长属性值, 属性品质, 评分索引}]
  uint32	gem_hole_num;		// 宝石孔位数  4
  uint8   polarity	// 相性 幻默认为0
};

// 神饰属性
struct godOrnamentAttr
{
	uint16 index;        // 属性ID
	uint32 value;		 // 属性值
	uint8  is_start;	 // 是否星级属性
};

// 神饰分阶信息
struct godOrnamentLayer
{
	uint8 type;       								// 神饰类型
	uint8 order;									// 阶数
	uint8 quality;									// 品质
	uint8 active_times;								// 卓越激活次数
	vector<godOrnamentAttr>	excellence_active;		// 卓越激活属性
	uint8 advance_times;							// 卓越进阶次数	
	vector<godOrnamentAttr>	excellence_advance;		// 卓越进阶属性
};

// 魔/翼/兽 灵装备结构
struct EqAddition
{
  uint64  eq_Uid;		// 装备ID
  uint32  cfg_id;				  // 配置ID
  vector<RandProp> rand_props;	// 随机属性列表 [{属性ID,属性值, 颜色, 评分索引}]
};

// 万神殿装备结构
struct AEquipmentInfo
{
  uint64  aequip_uid;		// 装备ID
  uint32  cfg_id;				  // 配置ID
  uint16  intensity_level;			    // 强化等级  
  uint32  intensity_exp;					  // 强化经验 经验满了升级  
  uint32  intensity_t_exp;					  // 强化获得的总经验经验(避免遍历配置表)
  vector<RandProp> rand_props;	      // 随机属性列表 [{属性ID,属性值}]
};

// 配饰结构
struct ornament
{
	uint64			uid;		// 配饰uid
	uint32			cfg_id;		// 配置id
	uint8			bind;		// 绑定状态
	uint32			int_lv;		// 强化等级
	vector<uint32>	rand_prop;	// 极品属性
	vector<uint32>	beyond_prop;// 极品属性
};

// 星魂装备信息
struct constellation_equipment {
    uint64 equipment_id;            // 装备id
    uint32 cfg_id;                  // 装备配置id
    vector<uint32> excellent_attr;  // 极品属性
    vector<uint32> excellent_attr1;  // 卓越属性
};

// 古神圣装装备信息
struct ancient_holy_equipment {
    uint64              equipment_id;               // 装备id
    uint32              cfg_id;                     // 装备配置id
    vector<uint32>      high_quality_attr;          // 极品属性
    vector<uint32>      superior_attr;              // 卓越属性
};

// 圣翼
struct holy_wing {
    uint64                      holy_wing_id;           // uid
    uint32                      cfg_id;                 // 道具id
    vector<key_value>           attr;                   // 随机属性
};

// 暗炎装备
struct dark_flame_eq
{
    uint64          uid;            // 装备uid
    uint32          cfg_id;         // 配置id
    vector<uint32>  best_attr;      // 极品属性
    vector<uint32>  exc_attr;       // 卓越属性
};

//圣纹
struct ShengWen
{
	uint64  			uid;
	uint32  			cfg_id;		
	uint8          		bind;				//绑定状态
	vector<RandProp>	jipin_prop;			//极品属性	
	vector<RandProp>	zhuoyue_prop;		//卓越属性	
};

// 物品基本信息
struct ItemBaseInfo
{
	uint32		item_id;	// 物品id
	uint8		bind;		// 绑定
	uint32		count;		// 数量
};

// 货币基本信息
struct CoinBaseInfo
{
	uint8		type;		// 货币类型
	uint32		count;		// 货币数量
};

// 装备基本信息
struct EqBaseInfo
{
	uint32		cfg_id;		//装备id
	uint8		character;	//品质
	uint8		star;		//星级
	uint8		bind;		//绑定
	uint32		count;		//数量
};

// ============================== 寻宝 end ==============================
struct HeroDrawItem
{
	uint16  index;          // 排序
	uint32  cfgId;          // 配置ID
	uint32  amount;         // 数量
	uint8   bind;			// 绑定
	uint8	exchange;       // 是否兑换获得
	uint8   runescoreid;	//符文评分段序号
};
struct HeroDrawEquipment
{
	uint16  index;          // 排序
	uint32  cfgId;          // 配置ID
	uint8   bind;			// 绑定
	uint16  quality;        // 品质
	uint16  star;         	// 星级
	uint8	exchange;       // 是否兑换获得
};
struct HeroDrawCurrency
{
	uint16  index;          // 排序
	uint32  cfgId;          // 配置ID
	uint32  amount;         // 数量
	uint8	exchange;       // 是否兑换获得
};

// 抽卡热点奖励
struct HeroDrawAward
{
	uint8   index;     		// 序号
	uint16  needNum;  	 	// 所需次数
	vector<HeroDrawItem>      itemParaNew1;    			// 物品1
	vector<HeroDrawCurrency>  currencyParaNew1;    		// 货币1
	vector<HeroDrawItem>      itemParaNew2;    			// 物品2
	vector<HeroDrawCurrency>  currencyParaNew2;    		// 货币2
	vector<HeroDrawItem>      itemParaNew3;    			// 物品3
	vector<HeroDrawCurrency>  currencyParaNew3;    		// 货币3
};
struct HeroDrawFinishAward
{
	uint8  index;     		// 序号
	uint8  choice;			// 奖励选择：1-奖励1、2-奖励2、3-奖励3
};

// 界面奖励
struct HeroDrawAwardShow
{
	uint8	index;		// 序号
	uint8	type;		// 类型
	uint32	typeId;		// 类型ID
	uint8	order;		// 品质
	uint8	star;		// 星级
	uint8	bind;		// 是否绑定
	uint32	number;		// 数量
	uint8	show;		// 是否有转圈特效
};

struct	HeroDrawModelShow
{
	uint32		itemId;		// 物品ID
	uint32		modelId;	// 模型ID
	uint32		zoom;		// 缩放比例
	int32		shift_x;	// 偏移x
	int32		shift_y;	// 偏移y
	int32		shift_z;	// 偏移z
	int32		rotate_x;	// 旋转x
	int32		rotate_y;	// 旋转y
	int32		rotate_z;	// 旋转z	
};

struct HeroDrawTimesShow
{
	uint16	drawTimes;		// 连抽次数
	uint32	type;			// 类型
	uint32	typeId;			// 类型ID
	uint32	quality;		// 品质
	uint32	star;			// 星级
	uint32	bind;			// 是否绑定
	uint32	num;			// 数量
};

struct HeroDrawEffect
{
	uint32	item_id;		// 道具id
	uint32	min;			// 最小道具数量
	uint32	max;			// 最大道具数量
	uint32	index;		// 特效序号
};

struct HeroAwardShow
{
	uint32 type; 	// 类型
	uint32 equip_id; 	// 装备ID
	uint32 num; 	// 数量
	uint32 quality; 	// 装备品质
	uint32 star; 	// 装备星级
}

//大预览配置
struct RoulettePreviewBigInfo
{
	uint8 id;			//id
	uint8 type;			//类型 
	vector<key_2value> itemlist;	//道具列表
	NewModelInfo model; //模型（物品ID,模型ID,x轴位移,y轴位移,z轴位移,x轴旋转,y轴旋转,z轴旋转,比例)
	string picPath;		//展示（图片）路径
	string text;		//展示对应的文字说明
}	
// 抽卡配置
struct HeroDrawCfg
{
	uint8   data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint16	levelLimit;						// 等级限制
	uint16	turnId;							// 轮换ID
	uint32  consItem;      					// 消耗道具ID
	uint32  genericConsItem;      					// 通用消耗道具ID
	vector<key_value>          consNumList;	// 消耗道具数量：key：寻宝次数，value 消耗道具数量
	vector<HeroDrawItem>       item;    				// 固定产出物品
	vector<HeroDrawCurrency>   currency;    			// 固定产出货币
	vector<HeroDrawEquipment>  rollingEquipShow;    	// 滚动装备显示预览
	vector<HeroDrawItem>       rollingItemShow;    		// 滚动道具预览
	vector<HeroDrawCurrency>   rollingCurrencyShow;    	// 滚动货币预览
	vector<HeroDrawEquipment>  equipShow;    			// 所有装备显示预览
	vector<HeroDrawItem>       itemShow;    			// 所有道具预览
	vector<HeroDrawCurrency>   currencyShow;    		// 所有货币预览
	vector<key_value> 			showNum;				// 符文评分，序号  [pk_key_value{key=序号,value=符文评分}]
	uint16                     timeNum; 				// 多次寻宝必得奖励所需次数
	vector<HeroDrawEquipment>  timeEquipShow;    		// 多次寻宝必定获得装备显示预览
	vector<HeroDrawItem>       timeItemShow;    		// 多次寻宝必定获得道具预览
	vector<HeroDrawCurrency>   timeCurrencyShow;    	// 多次寻宝必定获得货币预览
	vector<HeroDrawAward> 	   awardList;				// 热点奖励
	vector<uint32> 			   awardShowitem;			// 热点需要显示模型的道具ID
	uint32                	   awardExpireTime;			// 热点重置时间
	uint8  					   awardNum;     			// 热点分页数量
	vector<float> 			   awardModelScale;			// 热点需要显示模型缩放大小
	uint32  shopID;      								// 积分兑换店ID
	string  textID;                                     // 规则字段文本ID
	string  textTitle;                                  // 寻宝界面标题
	string  textDoc;                                    // 寻宝界面额外赠送文字说明
	uint16	personLuckyMax;								// 个人幸运值上限
	uint16	worldLuckyMax;								// 全服幸运值上限
	uint16	worldLuckyAddRate;							// 全服幸运值增加概率万分比
	vector<HeroDrawAwardShow>	show;					// 界面奖励	
	HeroDrawModelShow	modelLeft;						// 左侧模型展示
	HeroDrawModelShow	modelcentre;					// 中间模型展示
	HeroDrawModelShow	modelright;						// 右侧模型展示
	HeroDrawModelShow	scoreModel;						// 兑换商店展示模型
	vector<HeroDrawTimesShow> timeShow;					// 首次连抽奖励预览
	bool				isTurn;							// 大奖是否轮换
	string				slotLeft;						// 左侧特效展示
	string				slotCenter;						// 中间特效展示
	string				slotRight;						// 右侧特效展示
	HeroDrawModelShow	modelLeft2;						// 火力值界面模型1
	HeroDrawModelShow	modelCenter2;					// 火力值界面模型2
	HeroDrawModelShow	modelRight2;					// 火力值界面模型3
	vector<HeroDrawEffect>	effect;					// 奖池道具卡背特效
	uint32  				xunbao_Show; 					// 寻宝界面10连抽必得道具展示
	vector<HeroAwardShow>	awardShow;					// 大奖预览
};

//	预览配置列表
struct 	U2GS_PreviewBigList ->
{
	uint8   data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
};

//	预览配置列表返回
struct 	GS2U_PreviewBigListRet <-
{
	uint8   data_id; 									// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	vector<RoulettePreviewBigInfo> previewBigList;		//	预览配置列表
};

// 抽卡信息
struct HeroDrawInfo
{
	uint8   data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint32  free_time; 						// 免费开始时间，当前时间大于该值时为免费状态
	uint32  period_num; 					// 热点次数
	vector<HeroDrawFinishAward>  finishAwardList;		// 热点已领奖列表
	uint16	person_lucky;					// 个人幸运值
	uint16	time_draw_award_time;				// 多次寻宝累计次数
	uint16 	today_times; 				// 今日寻宝次数
};

// 服务端发送抽卡信息，玩家登录成功或抽卡状态改变时发送
struct GS2U_HeroDrawNotify__2124 <-
{
	// 一次只发送一种寻宝数据，多种寻宝发送多次
	HeroDrawInfo  drawInfo;		// 抽卡信息
	HeroDrawCfg   drawCfg;		// 抽卡配置
};

struct HeroDrawResult
{
	vector<HeroDrawItem>      itemList;				// 物品
	vector<HeroDrawCurrency>  currencyList;			// 货币
	vector<EqInfo>            equipmentList;		// 装备
};

// 抽卡
struct U2GS_HeroDraw__2125 ->
{
	uint8  data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint8  draw_time;						// 此次抽奖次数
	bool   isFree;							// 是否是免费寻宝
};
struct GS2U_HeroDraw__2126 <-
{
	uint8  data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint8  draw_time;						// 此次抽奖次数
	bool   isFree;							// 是否是免费寻宝
	bool   isRefresh                        // 是否是需要刷新
	uint32        errorCode;		  		// 0-成功，非0-错误原因
	HeroDrawInfo  drawInfo;					// 成功后有意义，新的抽卡信息
	HeroDrawCfg   drawCfg;					// 成功后有意义，新的抽卡配置
	vector<HeroDrawItem>      giftItemList;				// 成功后有意义，固定产出物品
	vector<HeroDrawCurrency>  giftCurrencyList;			// 成功后有意义，固定产出货币
	vector<HeroDrawResult>    drawResultList;			// 成功后有意义，抽卡产出（按照顺序来）
};

struct HeroDrawRecord
{
	uint32                	  time;
	uint64                    playerId;
	string                    playerName;
	uint8                     type; // 记录类型 1 普通奖励 2 大奖 3兑换奖励
	vector<HeroDrawItem>      itemList;
	vector<HeroDrawCurrency>  currencyList;
	vector<EqInfo>            equipmentList;
};

// 抽卡记录
struct U2GS_HeroDrawRecord ->
{
	uint8  data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
};
struct GS2U_HeroDrawRecord <-
{
	uint8  data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	vector<HeroDrawRecord>  myList;			// 我的记录
	vector<HeroDrawRecord>  allList;		// 全服记录
};

// 龙印寻宝预览
struct HeroDrawRuneShow
{
	uint16                    runeNum;        	// 通关龙神塔层数
	vector<HeroDrawItem>      itemShow;
	vector<HeroDrawCurrency>  currencyShow;
};
struct U2GS_HeroDrawRuneShow ->
{
};
struct GS2U_HeroDrawRuneShow <-
{
	vector<HeroDrawRuneShow>  list;
};

// 抽卡记录新增通知
struct GS2U_HeroDrawRecordAdd <-
{
	uint8  data_id; 						// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint8  type;							// 1-我的记录、2-全服记录
	HeroDrawRecord  record;
};

// 装备寻宝奖池
struct HeroDrawEquipLevel
{
	uint16  levelLimit;             // 寻宝等级
	string  preview;        		// 奖池变更图标
	uint16  previewLimtLv;        	// 可提前变更奖池的等级限制
};

// 装备寻宝奖池列表
struct U2GS_HeroDrawEquipLevelList ->
{
};
struct GS2U_HeroDrawEquipLevelList <-
{
	uint16  levelLimit;        		// 当前寻宝等级
	bool    auto_level;				// 是否自动提升等级
	vector<HeroDrawEquipLevel>  list;
};

// 装备寻宝奖池修改
struct U2GS_HeroDrawEquipLevel ->
{
	uint16  levelLimit;        		// 当前寻宝等级
	bool    auto_level;				// 是否自动提升等级
};
struct GS2U_HeroDrawEquipLevel <-
{
	uint32  error;		  			// 0-成功，非0-错误原因
};

// 多次寻宝领奖
struct U2GS_HeroDrawTimeAward ->
{
	uint8  data_id; 		// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
};
struct GS2U_HeroDrawTimeAward <-
{
	uint8  data_id; 		// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint32 errorCode;		// 0-成功，非0-错误原因
};

// 寻宝仓库物品领取
struct BagTransfer{
	uint8   bag_type;			// 起点背包
	vector<uint64>  ids;					// 实例Id
	uint8   target_bag_type;	// 目标背包
};

struct U2GS_GetDrawStorageItemReq ->
{
	vector<BagTransfer>  transfer_list; 		// 转移列表
};
struct GS2U_GetDrawStorageItemRet <-
{
	vector<BagTransfer>  transfer_list; 		// 转移列表
	uint32 errorCode;		// 0-成功，非0-错误原因
};

// ============================== 寻宝 end ==============================

// 道具结构定义
struct BagItemInfo
{
	uint64 id;                  //%实例ID
	uint32 item_data_id;        //%道具配置ID
	uint32 amount;              //%数量
	uint16 quality;             //品质
	uint8 genius;				//资质
	uint8 bind;					//是否绑定：0-非绑、1-绑定
	uint32 expireTime;			//过期时间，0为不过期
};

//更新物品结果
struct GS2U_UdateItem__2128 <-
{
	uint8 bagType;		//背包类型
	BagItemInfo itemInfo;  //道具详细信息
};

// 客户端使用道具
struct U2GS_UseItem__2132 ->
{
  uint8 bag_id;
  uint64 itemDBID;		// 道具ID
  uint16 itemCount;		// 道具数量
  uint32 param;			// 参数(useType=32: param=bossID)
};
struct GS2U_UseItem__2133 <-
{
  uint64 itemDBID;		// 道具ID
  uint8  bag_id;
  uint32 use_count;		// 使用个数
  uint32 errorCode;   // 0-成功，非0-错误原因
  vector<AddItem> addItemList; // 得到的道具列表，成功后有意义
  uint8  useType;		// 道具使用类型，定义同item表的useType字段，成功后有意义
  uint64 getCount;		// 得到的道具之外的值，值的类型依据useType，成功后有意义
  uint64 artiItemDBID;  // 获得神器的实例ID，成功后有意义
  uint32 itemDataID;	// 物品配置ID
  
  vector<AddCoin> coinList;	//货币奖励列表
  vector<EqInfo>    eqs;
};

struct GS2U_SellItem__2135 <-
{
  uint32 errorCode;   // 0-成功，非0-错误原因
};
// 任务进度
struct TaskProgress
{
  uint64 roleID;	// 0  主角色任务   非0 多角色任务
  uint32 taskID;
  uint32 progress;
};

// 服务端发送任务信息，三种情况会发送该消息（上线、增加任务、删除任务） 2021.8.5 前端请求时发送
struct GS2U_TaskInfo__2161 <-
{
  vector<TaskProgress> acceptedList;			// 已接受任务列表
  vector<uint32>       activeIDList;            // 已领奖的活跃宝箱ID
  uint32               activeValue;             // 累积活跃值
};

// 前端请求当前任务进度
struct U2GS_RequestTaskInfo ->
{
};

// 已完成的任务id列表
struct GS2U_TaskCompleteList <-
{
	vector<uint32> task_id_list;	//任务id列表
};

// 任务进度更新，一般是服务器主动发送更新，特殊任务（对话、探索）可以由客户端提交更新
struct U2GS_TaskProgressUpdate__2162 ->
{
  uint64 roleID;		// 角色ID
  uint32 taskID;
  uint32 progress;
};
struct GS2U_TaskProgressUpdate__2163 <-
{
  uint64 roleID;		// 角色ID
  uint32 taskID;
  uint32 errorCode;		// 0-成功，非0-错误原因
  uint32 progress;    // 成功后有意义
};

// 提交任务
struct U2GS_TaskComplete__2164 ->
{
  uint64 roleID;		// 角色ID
  uint32 taskID;
  bool   isMultiple;	// 是否购买多倍经验
};
struct GS2U_TaskComplete__2165 <-
{
  uint64 roleID;		// 角色ID
  uint32 taskID;
  bool   isMultiple;	// 是否购买多倍经验
  uint32 errorCode;		// 0-成功，非0-错误原因
  uint32 activeValue;   // 成功后有意义，累积活跃值
};

// 前端请求检查任务进度
struct U2GS_CheckTaskProgress ->
{
	  uint32 taskID;
};

struct ShopDiscount
{
  pb_uint32 num;                // 购买第几个，大于10个按10个算
  pb_uint32 discount;           // 折扣
};
struct ShopItem
{
  pb_uint32 itemDataID;          // 道具配置ID
  uint8  bind;                // 绑定
  uint8  bind_show;           // 显示绑定
  pb_uint32 oldCount;            // 原价
  pb_uint32 count;               // 现价，count>0有效
  pb_uint32 discount;            // 当前折扣
  vector<ShopDiscount> discountList;        // 折扣列表，列表为空时直接使用现价
};
struct ShopCurrency
{
  uint8  currencyType;        // 0-元宝Gold、1-铜币Money、2-魂玉SoulValue、3-声望Reputation、4-荣誉Honor、5-战魂WarSpirit、6-铸魂EquipSoul、7-宝物TreaSoul、8-神器ArtiSoul
  pb_uint32 oldPrice;            // 原价
  pb_uint32 price;               // 现价，price>0有效
  pb_uint32 discount;            // 当前折扣
  vector<ShopDiscount> discountList;        // 折扣列表，列表为空时直接使用现价
};
struct ShopEquip
{
	pb_uint32	cfg_id;		// 配置id
	uint8	chara;		// 品质
	uint8	star;		// 星级
	uint8	bind;		// 绑定
	pb_uint32	count;
	pb_uint32	discount;
	vector<ShopDiscount> discountList;
};
struct ShopData
{
  pb_uint32       shopDataID;      // 商品记录ID
  uint8        refresh_ctl;     // 刷新控制
  ShopItem     item;            // 商品道具（ShopItem.itemDataID表示道具ID，ShopItem.oldCount表示道具数量）
  ShopCurrency currency;        // 商品货币（ShopCurrency.currencyType表示货币类型，ShopCurrency.oldPrice表示货币数量）
  ShopEquip    equip;			// 商品装备
  ShopCurrency currency1;       // 货币1
  ShopCurrency currency2;       // 货币2
  ShopItem     needItem1;       // 所需道具1
  ShopItem     needItem2;       // 所需道具2
  uint8        limitType;			  // "作者: 限购类型 0为不限购, 1为普通限购, 2为VIP限购
  pb_uint32       limitParam;        // "作者: 限购参数 普通限购：限购次数,VIP限购：VipFunNew表ID"
  pb_uint32       buyNum;		    // 已经购买的个数
  //uint16       vipFunID;		// 可以购买的总个数对应的VIPID，0表示无提升
  uint8        conditionType;		// 购买条件类型：0-无需条件、1-玩家等级、2-VIP等级、3-历史最大竞技场排名、4-大闹天宫最高星数、5-帮会等级、6-历史最大比武排名、7-历史最大世界BOSS单次伤害、8-领地等级
  pb_uint32       conditionParam;  // 购买条件参数，ConditionType=3时代表竞技场类型、ConditionType=6时代表比武排名类型、ConditionType=8时代表领地等级（1为最低级领地）
  pb_uint32       conditionParam2; // 购买条件参数2，ConditionType=3或6时代表排名
  pb_uint32       conditionParam3; // 购买条件参数3，用于区分职业
  uint8        recommend;       // 推销：0-no，1-yes
  uint8        show_type;		// 可显示条件类型
  pb_uint32        show_param;		// 可显示条件参数1
  pb_uint32        show_param2;	// 可显示条件参数2
  pb_uint32        show_param3;	// 可显示条件参数3
  uint8	        disappearType;              // 隐藏条件类型
  pb_uint32	    disappearParam;            // 隐藏条件参数1
  pb_uint32	    disappearParam2;          // 隐藏条件参数2
  uint8         newItem;                  // 是否显示new
  pb_uint16		recNum;					// 推荐购买数量
};
struct ShopInfo
{
  uint32           shopID;              // 商店ID
  uint32           shopTime;            // 商店时间
  uint8            refreshFreeType;     // 免费刷新类型：0-不支持、1-有最大值限制、2-无最大值限制
  uint32           refreshFreeNum;      // 免费刷新次数
  uint32           refreshFreeNumMax;   // 免费刷新次数最大值
  uint16       	   refreshFreeVipFunID;	// 免费刷新的总次数对应的VIPID，0表示无提升
  uint8            refreshPayType;      // 道具刷新类型：0-不支持、1-有最大值限制、2-无最大值限制
  uint32           refreshPayNum;       // 道具刷新次数
  uint32           refreshPayNumMax;    // 道具刷新次数最大值
  ShopItem         refreshPayItem;      // 道具刷新所需道具
  ShopCurrency     refreshPayCurrency;  // 道具刷新所需货币
  uint16       	   refreshPayVipFunID;	// 道具刷新的总次数对应的VIPID，0表示无提升
  uint8            resetType;           // 重置类型：0-小时重置、1-天重置、2-周重置、3-月重置、4-永不重置
  uint32           resetParam;          // 重置参数：ResetType=0时代表每几小时重置（0点为基础）、ResetType=1时代表几点重置、ResetType=2时代表周几0点重置、ResetType=3时代表几号0点重置
  vector<ShopData> shopDataList;        // 商品列表
};
// 商店数据
struct U2GS_ShopDataList__2170 ->
{
  uint32 shopID;              // 商店ID
};
struct GS2U_ShopDataListAck__2171 <-
{
  uint32 shopID;              // 商店ID
  uint32   errorCode;		    // 0-成功，非0-错误原因
  ShopInfo shopInfo;        // 成功后有意义，商店数据
};

// 商店手动刷新
struct U2GS_ShopRefresh__2172 ->
{
  uint32 shopID;            // 商店ID
  uint32 shopTime;          // 商店时间
};
struct GS2U_ShopRefreshAck__2173 <-
{
  uint32 shopID;            // 商店ID
  uint32   errorCode;		    // 0-成功，非0-错误原因
  ShopInfo shopInfo;        // 成功后有意义，商店数据
};

//商店购买/结果
struct shopbuy_info
{
	uint32	shopID;			// 商店ID
	uint32	shopTime;		// 商店时间
	uint32	shopDataID;		// 商品记录ID
	uint32	count;			// 购买次数
	bool	isUseItem;		// 是否使用购买的道具（血瓶等）
};
struct shopbuy_ackinfo
{
	uint32 shopID;          // 商店ID
	uint32 shopDataID;      // 商品记录ID
	uint32 newPrice1;       // 成功后有意义，货币1新的现价
	uint32 discount1;       // 成功后有意义，货币1新的当前折扣
	uint32 newPrice2;       // 成功后有意义，货币2新的现价
	uint32 discount2;       // 成功后有意义，货币2新的当前折扣
	uint32 newNeedItemCount1;       // 成功后有意义，所需道具1新的现价
	uint32 needItemDiscount1;       // 成功后有意义，所需道具1新的当前折扣
	uint32 newNeedItemCount2;       // 成功后有意义，所需道具2新的现价
	uint32 needItemDiscount2;       // 成功后有意义，所需道具2新的当前折扣
	uint32 newBuyNum;		    // 成功后有意义，新的已经购买的个数
};

// 商店购买
struct U2GS_ShopBuyNew ->
{
	vector<shopbuy_info>	buy_list;	//购买列表
};
struct GS2U_ShopBuyAckNew <-
{
	uint32	errorCode;	//错误码
	vector<shopbuy_ackinfo>	ack_list;	//结果列表
};

//快捷获取请求信息
struct shop_data_req_info
{
	uint32	shop_id;	//商店id
	vector<uint32>	item_id_list;	//物品id列表
};

//快捷获取返回信息
struct shop_data_ret_info
{
	pb_uint32	shop_id;	//商店id
	uint32	shop_time;	//时间
	vector<ShopData>	shop_data_list;	//商品信息列表
};

//获取快捷购买商品信息
struct U2GS_GetShopDataInfoReq ->
{
	vector<shop_data_req_info>	data_list;
};

//获取快捷购买商品信息返回
struct GS2U_GetShopDataInfoRet <-
{
	pb_uint32	err_code;
	vector<shop_data_ret_info>	data_list;
};

//获取商店限制条件的值
struct U2GS_GetShopBuyCondition ->
{
};
struct GS2U_ShopBuyCondition <-
{
	uint8		fight_1v1_grade;	//1v1段位
};

// 命格升级
struct U2GS_FateAddLevel__2178 ->
{
};

// 命格增加经验（神力注入）
struct U2GS_FateAddExp__2180 ->
{
};

//进入地图请求
struct U2GS_RequestEnterMap__2185 ->
{
	uint32 mapDataID;		//地图定义ID，0是主城
	uint8	isReconnect;	//是否是重连进入地图 1:是重连进入 0:正常进入
	uint32	index;			//传送阵id，没有填0
	string  reasonContent;         //传送原因
};

// 进入地图请求回复
struct GS2U_RequestEnterMapResult__2186 <-
{
	uint32 result;			//%0:可以进入，其它为失败
	uint64 id;              //%地图实例ID,
	uint32 mapDataID;		//地图定义ID
	float	x;   			//出生坐标（小于0.1无效）
	float	y;   			//出生坐标（小于0.1无效）
    uint8  isServerRequest; //是否是后端发起的请求：0-前端发起、1-后端发起
};

struct U2GS_EnterMap__2187 ->
{
	uint64 id;              //%地图实例ID
	uint8	index;			//出生点序号 startPoint
	uint32 toMapDataID;     // 目标地图ID
};

struct GS2U_EnterMapResult__2188 <-
{
	uint32 result;			//%0:可以进入，其它为失败
	uint32 mapDataID;		//地图定义ID
	uint16 line;			//地图线号
	float	x;   			//出生坐标
	float	y;   			//出生坐标
};

//战斗属性property
struct BattleProp
{
	pb_uint16 index;		// 战斗属性号
	pb_int64 value;		// 战斗属性值
};

// 服务器返回该对象的全部战斗属性，只发非0的值
struct RequestBattleProp
{
	uint64					id;				//对象ID
    uint64                  role_id;
	uint8					objectType		//对象类型
	vector<BattleProp>		battleProp;		//属性
};
struct GS2U_RequestBattleProp__2190 <-
{
	vector<RequestBattleProp>	battle_info_list;
};

// 服务器推送对象战斗属性的变化列表，只发变化的值
struct GS2U_BattlePropList__2191 <-
{
	uint64					id;				//对象ID
    uint64                  role_id;
	uint8					objectType		//对象类型
	vector<BattleProp>		battleProp;		//属性
};
//----------------------------战斗属性号列表----------------------------------
//字段名称（英文）	序号 字段名称
//Hp	生命值	2
//HpCorr	生命值修正	3
//LifePerHit	击中生命恢复	4
//LifePerHitRatio	击中生命恢复比	5
//HealRatio	治疗效果比	6
//HealedRatio	被治疗效果比	7
//Mp	魔力值	8
//MpRec	魔力恢复	9
//SuperArmor	霸体值	10
//SuperArmorRec	霸体自然增量	11
//HitRecover	硬直	12
//ResHitRecover	硬直抵抗	13
//Attack	伤害强度	14
//Defence 	防御强度	15
//AmpDamage	基础伤害加成	16
//DamageRed	基础伤害减免	17
//TrueDamage	真实伤害	18
//TrueDefence	真实防御	19
//Fire	火焰元素强度	20
//Cold	冰冻元素强度	21
//Thunder	雷电元素强度	22
//DefFire	火焰元素防御	23
//DefCold	冰冻元素防御	24
//DefThunder	雷电元素防御	25
//Crit	暴击值	26
//ResCrit	抗暴值	27
//CritDamage	暴击伤害	28
//Block	格挡值	29
//ResBlock	格挡抗性	30
//BlockDefence	格挡减免	31
//Silence	沉默值	32
//ResSilence	沉默抗性	33
//Stun	晕眩值	34
//ResStun	晕眩抗性	35
//Slow	减速值	36
//ResSlow	减速抗性	37
//Freeze	冻结值	38
//ResFreeze	冻结抗性	39
//AddControl	控制加成	40
//ResControl	控制减免	41
//Speed	移动速度	42
//AmpElement	元素伤害加成	43
//RedElement	元素伤害减免	44
//AmpFinal	最终伤害加成	45
//RedFinal	最终伤害减免	46
//AmpDamaBogy	对妖基础伤害加成	47
//AmpDamaImmo	对仙基础伤害加成	48
//AmpDamaBudd	对佛基础伤害加成	49
//AmpDamaDemo	对魔基础伤害加成	50
//AmpDamaZero	对無基础伤害加成	51
//RedDamaBogy	对妖基础伤害减免	52
//RedDamaImmo	对仙基础伤害减免	53
//RedDamaBudd	对佛基础伤害减免	54
//RedDamaDemo	对魔基础伤害减免	55
//RedDamaZero	对無基础伤害减免	56
//Inspire	鼓舞	57
//InspireTime	鼓舞时间	58
//Rest	休整	59
//RestTime	休整时间	60

// 地图角色(不要在中间插字段，保持已有顺序不变)
struct LookInfoRole
{
    uint64  id;                             // 2.角色Id
    uint64  player_id;                      // 3.玩家Id
    uint16  career;                         // 4.职业
    int     charState;                      // 5.状态信息
    uint64  hp;                             // 6.当前生命值
    uint64  maxhp;                          // 7.最大生命值
    uint32  transform_id;                   // 8.变身对应配置id
    vector<EqLookInfo> eq_list;      		// 9.可见装备列表
    uint32	mount_id;		       			// 10.坐骑id
  	uint16	mount_star;			       		// 11.坐骑星数
  	uint32  wing_id;			       		// 12.翅膀id
  	uint32  guard_id;			       		// 13.守护id
  	vector<uint32> holy_id_list;	      	// 14.圣物id列表
  	uint8   enable;                         // 15.是否可用
  	uint32	title_id;				    	    // 16.称号ID
  	uint32	honor_lv;                   // 17.头衔等级
    uint8 	pos;							// 18.站位
    vector<uint32>      fashionCfgIDList;	// 19.可见时装配置ID列表
    uint32  hair_color_id;   // 20.发色ID
    uint32  skin_color_id;   // 21.皮肤色ID
    uint32  height;   // 22.身高百分比
    uint32  fashion_color; // 23.时装颜色
    uint32  tattoo; // 24.纹身索引
    uint32  tattoo_color; // 25.纹身颜色
    uint8   is_show_helmet; // 26.是否不显示头盔
  	uint8	fwingstate; // 27.  飞翼  0-不在飞行状态  1- 飞行状态
  	vector<WeaponLookInfo>      weapon_list;	// 28.装配的神兵
};

// 宠物结构信息(地图)
struct map_pet
{
	uint64  pet_object_id;      // 宠物实例ID
	uint32  pet_id;				// 宠物配置ID
	uint16  pet_star;			// 宠物星级
	uint8	pet_pos;			// 宠物出战位置
	uint16	pet_sp_lv;			// sp英雄战阶等级
	uint32  been_link_pet_cfg_id; // 被链接的宠物配置ID
	uint32  transform_id;       // 变身对应配置id
};

// 玩家外观信息(不要在中间插字段，保持已有顺序不变)
struct LookInfoPlayer
{
  uint64 id;								        // 2. 
  uint32	career;							      // 3. 
  uint32	fateLevel;	              // 4.  命格等级
  uint32 ponchoLevel;               // 5.  15、披风阶数
  uint32 headID;                    // 6.  16、头像ID
  vector<uint32> fashionCfgIDList;  // 7.  可见时装配置ID列表
  vector<uint32> equipCfgIDList;    // 8.  可见装备配置ID列表
  vector<EqLookInfo> eq_list;       // 9.  可见装备列表
  uint16  suitChara;						    // 10.  13、觉醒大师等级
  uint16  suitLevel;      		  		// 11.  30、强化大师等级
  uint16  suitQuality;    		  		// 12.  31、精炼大师等级
  string name;							        // 13. 
  float	x;  					 		          // 14.  in pixel
  float	y;  					 		          // 15.  in pixel
  uint32	move_speed;						    // 16. 
  int16	level;							        // 17. 
  int		charState; 				  		    // 18. 状态信息
  uint8	group;					  		      // 19. 阵营
  uint64	hp;								        // 20.  当前生命值
  uint32	mp;								        // 21.  魔力值
  uint32  superArmor; 			  		  // 22.  霸体值
  uint32	titleID;				    	    // 23.  称号ID
  uint64	guildID;				 		      // 24. 帮派ID
  string	guildName;						    // 25. 帮派名字
  uint8	pkGroup;						        // 26. PK阵营、战斗阵营 0).%%默认模式; 1).%%公会模式
  uint64  battleValue;              // 27.  战斗力
  uint64	maxhp;							      // 28.  最大生命值
  uint32	guildRank;						    // 29. 仙盟职位
  uint32 vip;                       // 30. VIP等级
  uint32	mountDataID;		       		// 31.  坐骑配置ID，0表示没有坐骑
  uint16	mountStar;			       		// 32.  坐骑星数
  uint8	mountStatus;		       		  // 33.  坐骑状态：0-未骑乘，1-骑乘
  uint8	vehicle_state;		       		// 34.  是否在载具中（0:乘坐载具中，1：未进入载具）
  uint32	transform_id;		       		// 35. 变身对应配置id
  uint8	meleeQuality;              	// 36.  麒麟洞积分品质：0-无，1-羊，2-狼，3-熊，4-虎，5-麒麟
  uint32  wingCfgID;			       		// 37.  128、佩戴神翼ID
  uint	serverID;						        // 38. 
  vector<uint32> sutraDataID;	      // 39.  装配的圣物配置ID列表 
  uint8	team_id;			       		    // 40. 队伍ID，同地图可能有多个队伍
  bool  showFateLevel;	            // 41.  HUD显示头衔等级
  uint8   weddingState;		        	// 42.  仙侣状态：0-未婚、1-订婚、2-已婚
  uint64  weddingPlayerID;	        // 43.  仙侣对方ID
  string  weddingPlayerName;        // 44.  仙侣对方名字
  uint8   sex;				        	    // 45.  自己的性别
  uint8	fwingstate;                 // 46.  飞翼  0-不在飞行状态  1- 飞行状态（移到LookInfoRole）
  uint32	pet_id;                   // 47.  宠物出战ID (配置表ID)
  uint32	honor_lv;                   // 48.  头衔等级
  uint32	red_value;                   // 49.  红名值
  uint8	  battle_status;                   // 50.  战斗状态  服务器转发
  uint8	  gc_color;                   // 51. 战盟争霸颜色  0-无 1-黄 2蓝 
  uint32	hang_dungeon_id;			// 52. 挂机的副本ID（0表示未挂机）
  uint16	pet_star;                   // 53.  出战宠物的星
  uint32	weapon_id;					// 54. 装备的神兵id
  uint8		weapon_vfx;					// 55. 神兵特效: 0-未激活, 1-已激活
  uint32	weapon_level;				// 56. 神兵阶数
  uint32	weapon_star;				// 57. 神兵星级
  uint32    nationality_id;             // 58. 区域id
  uint32	shield;						// 59. 圣盾值
  uint32	max_sheild; 			  	// 60. 最大圣盾值
  uint32	shield_id;					// 61. 圣盾id
  uint32    ancient_holy_eq_id;         // 62. 古神圣装最低品质装备配置id
  uint32    ancient_holy_eq_enhance_level;  // 63. 古神圣装最低强化等级
  string  serverName;                       // 64. 
    uint64  leader_role_id;                 // 65. 领队角色Id
    uint64  control_role_id;                // 66. 控制角色Id
    vector<LookInfoRole>  mapRoleList;      // 67. 地图角色列表
    uint64  pet_object_id;      // 68.宠物实例ID
    uint32  frame_id;           // 69.头像框id
	vector<map_pet> pet_infos;	// 70.出战宠物信息
    vector<uint64>  attach_monster_list;      // 71.附着怪ID列表
};
//注意:LookInfoPlayer添加属性，记得在在镜像里面初始化

struct GS2U_PlayerList__2192 <-
{
	vector<LookInfoPlayer> info_list;
	bool  is_enter_map;
};

struct GS2U_LookInfoPlayer_update <-
{
	uint64               id;
	vector<index_value>  value_list;
};
struct GS2U_LookInfoPlayer_EqLookinfo <-
{
	uint64               id;
	uint64               role_id;
	vector<EqLookInfo>  eq_list;
};

struct GS2U_LookInfoRole_update <-
{
	uint64               id;
	uint64               role_id;
	vector<index_value>  value_list;
};

struct GS2U_LookInfoRole_WeaponInfo <-
{
	uint64               id;
	uint64               role_id;
	vector<WeaponLookInfo>  weapon_list;
};

struct MirrorPlayerBindSkill
{
    uint64                   role_id;            // 角色Id
    vector<BindSkillBase>        bind_skill_list;    // 操作位上的技能-自动技能
};

struct GS2U_map_pet_info_update <-
{
    uint64    			player_id;    // 玩家ID
    vector<map_pet>   	pet_infos;    // 战斗宠物信息
};


// 镜像玩家外观信息
struct LookInfoMirrorPlayer
{
	uint64 id;
	uint32	career;
	uint32	fateLevel;	// 命格等级
	uint32 ponchoLevel;            // 15、披风阶数
	uint32 headID;             // 16、头像ID
	vector<uint32> fashionCfgIDList;  // 可见时装配置ID列表
	vector<EqLookInfo> eq_list;    // 可见装备配置ID列表
	uint16  suitChara;			// 13、觉醒大师等级
	uint16  suitLevel;          // 30、强化大师等级
	uint16  suitQuality;        // 31、精炼大师等级
	string name;
	float	x;   // in pixel
	float	y;   // in pixel
	uint32	move_speed;
	int16	level;
	uint32	titleID;	// 称号ID
	int		charState;		//状态信息
	uint8	group;//阵营
	uint8			typeFrom;//0：来自怪物 1:来自玩家
	uint64	hp;				// 当前生命值
	uint32	mp;				// 魔力值
	uint32  superArmor;   // 霸体值
	uint64	guildID;	 	//帮派ID
	string	guildName;		//帮派名字
	uint64  battleValue;                             // 战斗力
	uint64	maxhp;				// 最大生命值
	uint32	guildRank;	//仙盟职位
	uint32 vip;                 //VIP等级
	uint32  wingCfgID;			// 128、佩戴神翼ID
	bool  showFateLevel;	// HUD显示大圣之路等级
	vector<uint32> sutraDataIDList;	// 装配的法宝配置ID列表
	uint8   weddingState;		  // 仙侣状态：0-未婚、1-订婚、2-已婚
	uint64  weddingPlayerID;	  // 仙侣对方ID
	string  weddingPlayerName;    // 仙侣对方名字
	uint8   sex;				  // 自己的性别
	vector<map_pet> pet_infos;	// 出战宠物信息
	uint32	weapon_id;			// 装备的神兵id
	uint8	weapon_vfx;			// 神兵特效: 0-未激活, 1-已激活
	uint32	weapon_level;		// 神兵阶数
	uint32	weapon_star;		// 神兵星级
	uint32  nationality_id;     // 区域id
	uint32	shield;				// 圣盾值
	uint32	max_sheild; 		// 最大圣盾值
	uint32	shield_id;			// 圣盾id
	uint32  ancient_holy_eq_id;         // 古神圣装最低品质装备配置id
    uint32  ancient_holy_eq_enhance_level;  // 古神圣装最低强化等级
    uint64  leader_role_id;                 // 领队角色Id
    uint64  control_role_id;                // 控制角色Id
    vector<LookInfoRole>  mapRoleList;      // 地图角色列表
    uint32  frame_id;           // 头像框id
    uint32  server_id;          // 服务器id
    string  server_name;        // 服务器名
    vector<MirrorPlayerBindSkill> bind_skill_list; // 绑定的自动技能
    vector<uint64>  attach_monster_list;      // 71.附着怪ID列表
};
//注意:LookInfoPlayer添加属性，记得在在镜像里面初始化

struct GS2U_MirroList__2193 <-
{
	vector<LookInfoMirrorPlayer> info_list;
};

struct LookInfoStump
{
	uint32	stumpid;
	uint32	hp;
};
struct LookInfoMonster
{
	uint64 id;				// 实例ID
	uint32 dataID;			// 定义ID
	uint32 resID;			// 资源ID
	uint16	level;			// 等级
	float x;				// 坐标
	float y;
	float	rotw;			// 旋转坐标W
	int8	status;			// 怪物状态：0-巡逻、1-战斗攻击、2-死亡、3-传送、4-逃跑
	uint64 targetID;				// 怪物战斗状态仇恨目标，0表示没有目标
	int8	owner_type;		// 所有者类型
	uint64	owern_id;		// 所有者ID
	uint32	move_speed;		// 移动速度
	uint64	hp;				// 生命值
	int		charState;		//状态信息
	uint8	group;//阵营
	uint32  superArmor;   // 霸体值
	uint64				guildID;//所属仙盟ID
	uint64	maxhp;				// 最大生命值
	uint16	hp_count;				// 血管数
	string	guildName;
	uint32	transform_id;		//变身对应配置id
	vector<LookInfoStump> stumpInfo; //残肢信息
	vector<key_big_value> skill_use_list; //对该怪物已使用的技能 key 技能id value 角色id
    uint64  attach_player_id;       // 附着怪玩家ID
    uint32 	attach_buff_data_id;    // 附着怪BUFFID
    uint64  attach_caster_id;       // 附着怪释放者id
    uint64 	attach_caster_role_id;    // 附着怪释放者角色id
};

struct GS2U_MonsterSpeedSync <-
{
	uint64 id;				// 实例ID
	uint32	move_speed;		// 移动速度
};

struct GS2U_MonsterList__2194 <-
{
	vector<LookInfoMonster> info_list;	// 视野范围内怪物列表
	bool  is_enter_map;
};

struct LookInfoSummon
{
	uint64 id;				// 实例ID
	uint32 dataID;			// 定义ID
	float x;				// 坐标
	float y;
	int8	owner_type;		// 所有者类型
	uint64	owern_id;		// 所有者ID
	uint32	move_speed;		// 移动速度
	uint64	hp;				// 当前生命值
	int		charState;		//状态信息
	uint8	group;//阵营
	uint32  superArmor;   // 霸体值
	uint64	maxhp;				// 最大生命值
};

struct GS2U_SummonList__2195 <-
{
	vector<LookInfoSummon> info_list;	// 视野范围内怪物列表
};

struct LookInfoNpc
{
	uint64 id;				// 实例ID
	uint16 dataID;			// 定义IDNpc ID
	uint32 resID;			// 资源ID
	float x;			// Npc 坐标
	float y;
	float rotw;			// 旋转坐标W
	int8 status;		// npc的动作状态
	uint32  superArmor;   // 霸体值
	uint8	npcType;	// NPC类型
};
struct GS2U_NpcList__2196 <-
{
	vector<LookInfoNpc> info_list;	// 视野范围内 Npc 列表
};

struct LookInfoHero
{
	uint64 id;				// 实例ID
	uint16 pos;				// 队伍位置
	float x;				// 坐标
	float y;
	uint32	move_speed;		// 移动速度
	int8	status;			// 英雄状态：0-地图显示、1-地图隐藏
	uint64	owern_id;		// 所有者ID
	uint32 item_data_id;        //%道具配置ID
	uint16         star;				  // 英雄星数
	uint32 chara;         //升品等级
	int		charState;			//状态
	uint8	group;//阵营
	uint64	hp;				// 生命值
	uint32  superArmor;   // 霸体值
	uint64	maxhp;				// 最大生命值
};

struct GS2U_LookHeroList__2197 <-
{
	vector<LookInfoHero> info_list;
};

// 墓碑信息
struct MapTombInfo
{
	uint32		bossID;
	string      serverName;
	string		killerName;
	uint32		deadTime;
};

struct LookInfoMachineTrap
{
	uint64 id;				// 实例ID
	uint16 dataID;			// 定义ID
	float x;				// 坐标
	float y;
	float rotw;			// 旋转坐标W
	uint64 hp;              // 生命值
	uint32 att_cd;          // 攻击剩余CD
	int8 stat;				// 机关状态，0：关闭，1：打开，2:死亡， 3：僵尸
	uint32 skillID;	    	// 技能ID,0：没有技能，其它，有技能
	uint64				guildID;//所属仙盟ID
	MapTombInfo	map_tomb;	// 墓碑信息
	
};
struct GS2U_MachineTrapList__2199 <-
{
	vector<LookInfoMachineTrap> info_list;	// 视野范围内 LookInfoMachineTrap 列表
};

// 客户端改变控制角色
struct U2GS_control_role ->
{
    uint64  object_id;                      // 控制对象Id（玩家Id、镜像Id）
    uint64  control_role_id;                // 控制角色Id
};
// 服务器转发控制角色
struct GS2U_control_role <-
{
    uint64  object_id;                      // 控制对象Id（玩家Id、镜像Id）
    uint64  control_role_id;                // 控制角色Id
};

// 地图对象说话
struct GS2U_MapObjectSpeak__2200 <-
{
  uint64 id;        // 对象ID
	string stringID;  // 内容文字的stringID，如有多句，以|分隔并按顺序播放（MonsterChat.xlsm）
};

// Boss怪物击倒事件（客户端最好只发Boss的，并且有虚弱AI的）
struct U2GS_MonsterBossDown__2201 ->
{
  uint64 id;        // ID
};
struct GS2U_MonsterBossDown__2202 <-
{
  uint64 id;        // ID
  uint8  isWeak;    // 是否虚弱：0-no、1-yes，开始虚弱状态会广播GS2U_MonsterBossNotify消息
};

// Boss怪物状态通知
struct GS2U_MonsterBossNotify__2203 <-
{
  uint64 id;        // ID
  uint8  bossState; // 状态：1-虚弱、2-召唤小怪、3-加buff、4-陷阱、5-狂暴
	uint8  type;      // 类型：1-预警、2-开始、3-结束
};

// 怪物出生完毕事件（当前服务器只处理友方怪物）
struct U2GS_MonsterBornFinish__2204 ->
{
  uint64 id;        // ID
};

// 物件消失
struct GS2U_ActorDisapearList__2206 <-
{
    int	        		delay;
	vector<uint64>		info_list;
};

struct PosInfo
{
	int x;
	int y;
};

struct U2GS_MoveTo__2207 ->
{
	uint64 id;                     	//移动的目标ID
	int posX;						//移动的目标点X
	int posY;						//移动的目标点Y
	vector<PosInfo> posInfos;		//包括起点和目标点在内所有路径点
	
	uint32 timestamp;    // 当前时间戳 秒
};

struct U2GS_StopMove__2208 ->
{
	uint64 id;                     	//移动的目标ID
	int posX;						//停止时的坐标点X
	int posY;						//停止时的坐标点Y
	int angleX;					//坐标点X方向
	int angleY;					//坐标点Y方向
};
struct GS2U_StopMove__2209 <-
{
	uint64 id;                     	//移动的目标ID
	int posX;						// 停止到的位置X
	int posY;						// 停止到的位置Y
	int angleX;					//坐标点X方向
	int angleY;					//坐标点Y方向
};

struct GS2U_MoveInfo__2210 <-
{
	uint64 id;                    //移动的目标ID
	int	posX;				//移动的目标点X
	int	posY;				//移动的目标点Y
	vector<PosInfo> posInfos;	//包括起点和终点在内的所有路径点
};

struct U2GS_SyncView ->
{
	uint8		type;			// 类型 1：圣甲
	uint32		view_num;		// 范围内玩家数量
};

//对象状态标识变化广播
struct GS2U_ActorStateFlagSet__2213 <-
{
	int64	actorID;//对象ID
	int		nSetStateFlag;//新的状态标识
};

//请求操作某个Trigger
struct U2GS_RequestTrigger__2214 ->
{
	int id;                 //Trigger定义ID
	int8 op;				//操作动作，1：打开，0：关闭

};

struct TriggerInfo
{
	uint triggerId;			 //Trigger定义ID
	int8 type;				//触发类型，0：进入触发，1：离开触发
};
//移动触发Trigger
struct U2GS_MoveTrigger__2215 ->
{
	uint64 objectid;                 //触发Trigger对象ID
	vector<TriggerInfo> info;		//包括起点和目标点在内所有路径点

};
//广播某个Trigger
struct GS2U_Trigger__2216 <-
{
	int id;                 //Trigger定义ID
	int8 op;				//操作动作，1：打开，0：关闭
	uint64 fromObjectid;    //来源对象实例ID
};

//机关请求操作(以pk_GS2U_MachineTrapList更新某个id)
struct U2GS_RequestMachineTrap__2217 ->
{
	uint64 id;                 //机关实例ID
	int8 op;				//操作动作，1：打开，0：关闭
};

//广播某个Trigger
struct GS2U_MachineTrap__2218 <-
{
	uint64 id;               //机关实例ID
	int8 op;				//操作动作，0：关闭，1：打开，2:死亡， 3：僵尸
};

//机关请求血量操作
struct U2GS_RequestMachineHP__2219 ->
{
	uint64 attackerID;			 //机关实例ID
	uint64 targetID;			 //目标ID
    uint64  target_role_id;
};
//机关血量变化
struct GS2U_MachineHP__2220 <-
{
	uint64 attackerID;			 //机关实例ID
	uint64 targetID;			 //目标ID
    uint64  target_role_id;
	int  value;			 		//血量变化值
};
//奖励物品信息
struct itemInfo
{
	uint32	itemID;		//物品ID
	uint32	count;		// 数量
	uint8	  multiple;	// 奖励倍数（默认1倍）
	uint8	  bindState;	 // 绑定状态  0 -非绑定   1-绑定
};

//奖励物品信息
struct NewitemInfo
{
	uint32	  itemID;		 //物品ID
	uint32	  count;		 // 数量
	float	  multiple;	     // 奖励倍数
	uint8	  bindState;	 // 绑定状态  0 -非绑定   1-绑定
};

//货币信息
struct CoinInfo
{
	uint8				type;//货币类型
	uint				amount;//数量
	uint8	multiple;	// 奖励倍数（默认1倍）
};

//货币信息
struct NewCoinInfo
{
	uint8	type;       //货币类型
	uint	amount;     //数量
	float	multiple;	//奖励倍数
};

//副本挑战中(或地图途中)，奖励推送
struct GS2U_CopyMapAwardList__2226 <-
{
	uint64				objectID;//掉落物品的对象ID
	vector<CoinInfo>	coinList;//掉落的货币
	vector<itemInfo>	itemList;//掉落的物品
	vector<EqInfo>		eqs; // 掉落的装备
};
struct PlayerShortInfo
{
	string name;                   // 人物昵称
	uint64 battleValue;            // 33、战斗力
};
//------------------------------------------------
struct demonItem
{
	uint32		itemID;
	uint16		num;
	uint64		itemDBID;	// >0表示为神器，=0为普通物品
	uint8		bind;		// 是否绑定：0-非绑、1-绑定
	uint16		level;		// 神器阶数
	uint32		point;		// 神器评分
};

//副本结算信息
struct GS2U_CopyMapSettleAccounts__2239 <-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint64				cardID;//牌ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				settleType;//结算类型
	uint8				isConqAward;//是否同时领取征服奖励（暂时为首通奖励）0:不是，1:是
	vector<demonItem>   demonItemList;	//神器掉落
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
	uint8     			cur_star;    // 当前通关星数
	uint8 	  max_enter_count;		// 最大进入次数
    uint8	  enter_count;		    // 已进入次数
    uint8     double_times;         // 双倍次数
	uint32				challenge_time;		// 挑战时间
};

//扫荡结果
struct GS2U_MopUpCopyMapResult__2240 <-
{
	uint32				result;
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint64				cardID;//牌ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<demonItem>   demonItemList;	//神器掉落
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
};

//打开章节宝箱返回
struct GS2U_OpenChapterBoxResult__2241 <-
{
	uint32				result;
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	uint8				index;//奖励序号
};

//领取征服奖励返回
struct GS2U_GainConqAwardResult__2242 <-
{
	uint32				result;
	uint				dungeonID;//关卡ID
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	uint8				index;//奖励序号
};
//------------------登陆奖励 start--------------
// 请求奖励数据
struct U2GS_GiftsDataReq ->
{
};

// 请求奖励数据返回
struct GS2U_GiftsDataRet <-
{
	uint32	login_days;			// 累计登录天数
	vector<key_value>	get_list;	// 领取过的 {奖励id,是否领取双倍奖励}
};

// 请求领取奖励
struct U2GS_GetGiftReq ->
{
	uint32	gift_id;	// 奖励id
};

// 请求领取奖励结果
struct GS2U_GetGiftRet <-
{
	uint32	err_code;	// 错误码
	uint32	gift_id;	// 奖励id
	uint8	type;		//奖励领取情况 0 普通奖励+双倍奖励 1 普通奖励 2 双倍奖励
};
//------------------登陆奖励 end----------------

//------------------签到奖励--------------------
//玩家请求签到奖励数据
struct U2GS_getRegisterData__2249 ->
{
};

// 发送签到奖励数据到客户端
struct GS2U_sendRegisterData__2250 <-
{
	uint16	sign_level;		// 签到奖励计算等级
	uint16	sign_vip;		// 签到奖励计算VIP等级
	uint16	sign_days;		// 已签到天数
	uint16	sign_pro_group;	// 签到进度奖励组别
	uint16	sign_pro_level;	// 签到进度奖励计算等级
	uint16	sign_pro_days;	// 签到进度奖励已领天数
	uint16	sign_pro_total_days;	// 本轮累计签到天数
};

// 玩家签到
struct U2GS_Register__2251 ->
{
	uint16	day;	//日期
};

// 签到反馈
struct GS2U_feedbackRegister__2252 <-
{
	uint16	day;	//日期
	uint32	isSuc;	//是否成功（0：成功 1：失败ID）
};

// 领取签到进度奖励
struct U2GS_getRegisterProAward__2253 ->
{
	uint16 day;		//天数
};

struct GS2U_getRegisterProAwardResult__2254 <-
{
	uint16 day;		//天数
	uint32 result;	//是否成功（0：成功 1：失败ID）
};

//------------------签到奖励 end----------------
// 玩家请求开启的活动列表
struct U2GS_requestOpenActivity__2257 ->
{
};

struct activityList
{
	pb_uint16	activityID;		//活动ID(1:签到奖励 2:登陆奖励 3:成长基金 4:等级礼包)
};

// 返回开启的活动列表
struct GS2U_ActivityOpenList__2258 <-
{
	vector<activityList> activity_list;	//活动列表
};

//------------------等级礼包 -------------------
// 领取等级礼包奖励
struct U2GS_getLevelGift__2267 ->
{
	uint16	level;		//等级
	uint8 is_vip; //是vip领奖 0不是 1是
};

// 领取等级礼包奖励
struct GS2U_feedbackGetLevelGfit__2268 <-
{
	uint16	level;		// 领取奖励的等级
	uint8 is_vip;//是vip领奖 0不是 1是
	uint32	isSuc;		//领取是否成功(0：成功 非0-错误原因)
	vector<itemInfo>	item;	// 物品列表
	vector<CoinInfo>	coin;	// 货币列表
	vector<EqInfo>		eq;		// 装备列表
	vector<itemInfo>	item1;	// vip物品列表
	vector<CoinInfo>	coin1;	// vip货币列表
	vector<EqInfo>		eq1;	// vip装备列表
};

// 奖励数据
struct lvlGiftInfo
{
	pb_uint16	id;				// 配置ID
	pb_uint16	lvl;			// 等级礼包
	uint8	isGetGift;		// 是否领奖
	uint8   isGetVipGift;   //是否VIP领奖 0未领 1已领
	pb_uint32	award_count;	// 剩余奖励数量
};

//玩家等级礼包数据
struct GS2U_sendLevelGift__2270 <-
{
	vector<lvlGiftInfo> gift_list;	//奖励数据
};
//------------------等级礼包 end----------------


//----------------------------竞技场----------------------------------
// 对局伤害信息
struct arenaDamageInfo
{
	uint64	roleID;		// 角色ID
	uint32	career;		// 角色职业
	uint64	damage;		// 造成伤害
	uint64	treat;		// 造成治疗
	uint64	taskDamage;	// 承受伤害
	bool	isMine;		// 是否是自己
	bool	isLeader;	// 是否是领队
};
//挑战结果
struct GS2U_FightArenaResult__2272 <-
{
    bool              isWin;      // 是否获胜
    uint16            score;      // 新的积分
    int16             add_score;  // 增加积分
    vector<CoinInfo>  coinList;   // 奖励货币列表
    vector<itemInfo>  itemList;   // 奖励物品列表
    uint64            exp;        // 奖励经验
};

//----------------------------竞技场 END----------------------------------
//---------------------------月卡系统 ----------------------------
// 获取月卡奖励
struct U2GS_getMonthlyCardReward__2277 ->
{
	uint32	id;	//月卡ID
};

// 获取月卡奖励反馈
struct GS2U_feedbackMonthlyReward__2278 <-
{
	uint32	id;	//月卡ID
	uint32	gold;	//领取的元宝
	uint32	isSuc;	//是否成功
	vector<CoinInfo>	coinList; //领取的其他货币列表
};

// 升级反馈
struct GS2U_feedbackUplevelMonthlyCard__2279 <-
{
	uint32	id;	//月卡ID
	uint32	isSuc;	//是否成功
};

// 请求玩家月卡数据
struct U2GS_requestMonthlyCard__2280 ->
{
};

// 月卡数据
struct monthlyCardInfo
{
	uint32	id;		//月卡ID
	uint8	isBuy;	// 是否为够买（0：掉落  1：购买  2：已经掉落和购买）
	uint16	lvl;		//等级
	uint16	getDays;	//已经领取的天数
	uint16	allDays;	//可领取的天数
	uint32	perDayNum;	//每天可领取的数量
	uint8	isGet;		//当日是否已经领取(0:yes 1:no)
};

//返回玩家月卡数据
struct GS2U_sendMonthlyCardInfo__2281 <-
{
	vector<monthlyCardInfo> info_list;
};

//---------------------------月卡系统 end-------------------------
//发送提示信息(文字内容)
struct GS2U_SendTipMsg__2285 <-
{
	uint8	type;	//提示类型
	string msg;	//提示内容
};
//发送提示信息(数字)
struct GS2U_SendTipID__2286 <-
{
	uint8	type;	//提示类型
	uint32 errorCode;	//id来源于ErrorMessage.xlsm
};

// ---------------------登陆公告 走马灯------------------------
// 登陆公告
struct GS2U_LoginAnnounce__2287 <-
{
	string	announce;	// 登陆公告
};

struct GS2U_marqueeAnnounce__2288 <-
{
	string	announce;	// 走马灯公告内容
	uint16	playTimes;	// 播放次数
};

// 下载资源包领奖
struct U2GS_DownloadReward__2289 ->
{
};
struct GS2U_DownloadReward__2290 <-
{
  uint32 errorCode;		  // 0-成功，非0-错误原因
};
//-----------------------新手引导 功能开放----------------------------
// 获取未开放的功能ID列表
struct U2GS_requestFuncList__2296 ->
{
};

// 发送开放的功能ID列表
struct GS2U_sendCloseFuncIDList__2297 <-
{
	vector<pb_uint32>	funcID_list;	// 功能ID列表
};

// 发送开放的功能ID
struct GS2U_openFunction__2298 <-
{
	uint32	funcID;		//功能ID
};

// 请求引导
struct U2GS_GuideReq ->
{
	uint32	guide_id;	//引导id
};

// 请求引导返回
struct GS2U_GuideRet <-
{
	uint32	guide_id;	//引导id(0已经引导过了不需要引导)
};
//-----------------------新手引导 功能开放 end------------------------
// 免费体力
struct U2GS_FreeEnergy__2306 ->
{
    vector<uint8>  type;              // 领取的列表
};
struct GS2U_FreeEnergy__2307 <-
{
    vector<uint8>  type;              // 领取的列表
    uint32 errorCode;		  // 0-成功，非0-错误原因
};

// 领取平台激活码
struct U2GS_PlatActiveCode__2310 ->
{
	string	token;
	string	code;
	string	cilentID;
};

// 领取平台激活码反馈
struct GS2U_PlatActiveCodeResult__2311 <-
{
	uint32	result;
	vector<CoinInfo> coinList;
	vector<itemInfo> itemList;
};

// ------------------------------------------------------------------------
// 玩家发送GM留言
struct U2GS_GMAsk__2312 ->
{
    string content;			// 内容
};
struct GS2U_GMAsk__2313 <-
{
    uint32 errorCode;		// 0-成功，非0-错误原因
    string content;		  	// 内容
    uint32 sendTime;		// 发送时间
};

// GM发送留言应答
struct GS2U_GMAnswer__2314 <-
{
    string senderName;	    // 发送者Name
    string content;		  	// 内容
    uint32 sendTime;		// 发送时间
};

// KICK玩家
struct GS2U_KickMe__2315 <-
{
    int32 reason;			// 内容    reason：143007，资源有更新，需要下线后，进行更新
};
// ------------------------------------------------------------------------
// 变身职业信息
struct CareerInfo
{
    uint32         career;                 // 职业
	vector<SkillInfo> skillIDList;	           // 已学技能列表
};

struct GS2U_CareerInfoList__2318 <-
{
    vector<CareerInfo> careerInfoList;			// 只发已激活的
};

struct GS2U_CareerSwitch__2322 <-
{
    uint32 career;                     // 职业
    uint32 errorCode;		           // 0-成功，非0-错误原因
};

// ------------------------------------------------------------------------
// 服务器时间
struct U2GS_ServerTime__2327 ->
{
};
struct GS2U_ServerTime__2328 <-
{
    uint32 serverTime;         // 服务器当前时间（秒）
	uint32 serverDay;			//开服天数
};

//服务器向客户端发送的初始信息
struct GS2U_InitMsg__2329 <-
{
	uint32 serverTime;     // 服务器当前时间（秒）
    uint16 cmdkey;         // 命令号key(客户端发送包是：实际cmd+cmdkey)
	uint16 lenkey;         // 包长key(客户端发送包是：实际len+lenkey)
	int32 serverWaitTime;    //服务端的响应最大时长
};

// 服务端发送商店通知
struct GS2U_ShopBuyNotify__2330 <-
{
    uint32 shopID;          // 商店ID
    uint8 canBuy;           // 商店能否购买：0-不能、1-可以
};

// 商店新增商品
struct shop_new
{
    uint32         shop_id;                 // 商店ID
	vector<uint32> item_list;	           // 商品id
};

// 商店有新商品
struct GS2U_shop_new_notify <-
{
    vector<shop_new> shop_id_list;   // 商店ID
};

struct U2GS_getVipAward__2332 ->
{

};

struct GS2U_getVipAwardResult__2333 <-
{
	int32 code;
};

struct U2GS_getVipFreeExp__2334 ->
{

};

struct GS2U_getVipFreeExpResult__2335 <-
{
	int32 code;
};
//----------------------------主线副本  部分更改----------------------------------------
//副本结算信息
struct GS2U_MainCopyMapSettleAccounts__2336 <-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint64				cardID;//牌ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	vector<uint8>		conditionIDList;//已完成的条件星数
	uint8				settleType;//结算类型
	uint8				isConqAward;//是否同时领取征服奖励（暂时为首通奖励）0:不是，1:是
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
};
//----------------------------主线副本  部分更改 END----------------------------------------
//---------------------------------竞技场 部分修改-------------------------------------
struct MopUpArenaResult
{
	uint32				errorCode;// 0-成功，非0-错误原因
	uint64				cardID;//牌ID
	vector<CoinInfo>	coinList;//固定奖励货币列表
	uint64				exp;
	vector<itemInfo>	itemList;//奖励物品列表
};
struct GS2U_MopUpArenaResult__2337 <-
{
	vector<MopUpArenaResult> info_list;
};
//---------------------------------竞技场 部分修改 END-------------------------------------

// 玩家简要外观信息
//注：名字、职业、命格、进阶、时装ID列表、基础移动速度、vip等级、元神信息、称号
struct LookBasePlayerInfo
{
	uint64 id;					//实例ID
	string name;				//名字
	uint32	career;				//职业
	uint16	level;				//玩家等级
	uint32	fateLevel;			// 命格等级
	uint32 ponchoLevel;            // 15、披风阶数
	uint32 headID;             // 16、头像ID
	vector<uint32> fashionCfgIDList;  // 可见时装配置ID列表
	vector<uint32> equipCfgIDList;    // 可见装备配置ID列表
	vector<EqLookInfo> eq_list;
	uint16  suitChara;			// 13、觉醒大师等级
	uint16  suitLevel;          // 30、强化大师等级
	uint16  suitQuality;        // 31、精炼大师等级
	uint32 vip;                 //VIP等级
	uint32 title;           	//称号ID
	uint64			guildID;	//帮派ID
	uint64			heroID;		//展示英雄ID
	uint32          heroDataID; //展示英雄配置ID，为0表示该位置没有英雄
    uint16          heroStar;   //展示英雄星数
	string	guildName;		//帮派名字
	uint32	guildRank;	//仙盟职位	
	uint32	mountDataID;		// 坐骑配置ID，0表示没有坐骑
	uint16	mountStar;			// 坐骑星数
	uint32  wingCfgID;			// 128、佩戴神翼ID
	bool  showFateLevel;	// HUD显示大圣之路等级
	uint8   weddingState;		  // 仙侣状态：0-未婚、1-订婚、2-已婚
	uint64  weddingPlayerID;	  // 仙侣对方ID
	string  weddingPlayerName;    // 仙侣对方名字
	uint8   sex;				  // 自己的性别
	uint32	pet_id;				// 宠物id
	uint32	mount_id;			// 坐骑id
	uint32	wing_id;			// 翅膀id
	vector<uint32>	holy_ids;	// 圣物id
	uint32	guard_id;			// 守护id
	uint32	move_speed;			// 坐骑速度
	uint32	weapon_id;			// 神兵id
	uint8	weapon_vfx;			// 神兵特效
	uint32	weapon_level;		// 神兵阶数
	uint32	weapon_star;		// 神兵星级
	uint32  nationality_id;     // 区域id
};
//请求全服角色简要数据列表
struct GS2U_BasePlayerList__2340 <-
{
	vector<LookBasePlayerInfo> info_list;
};

//请求全服角色简要数据
struct U2GS_BasePlayerList__2341 ->
{
	uint16	maxCount;	// 最大玩家个数
};

//请求更新恢复值
//recoverType
// 0  energy  体力值
// 1  stamina  精力值
// 2  UsedMopUpValue  已使用的主线副本 扫荡点
// 3  FightValue  比武令
struct U2GS_RefreshRecoverValue__2342 ->
{
	uint8				recoverType;//
};
//仙盟副本结算
struct GS2U_GuildDungeonFightResult__2343 <-
{
	uint8				isWin;//0:失败 1:胜利
	uint				dungeonID;
	uint64				damage;//造成的伤害
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;//物品列表
	uint16				rank;//排名  0表示未上榜
	uint8				settleType;//结算类型
	string				killerName;//击杀者名字
};

//比武擂台官职变化时，推送客户端
struct GS2U_OfficeChange__2346<-
{
	uint8		oldOfficeType;//原官职类型
	uint8		oldOffice;//原官职
	uint8		officeType;//官职类型
	uint8		office;//官职
};

//组队副本结算
struct GS2U_TeamCopyMapSettleAccounts__2347<-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint64				cardID;//牌ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	uint8         exp_multi; // 运营活动 经验倍数
	uint32				intimacy;	// 增加的亲密度
	vector<string>		name_list;	// 好友名列表
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				fightType;//0:单人挑战的 1:与镜像挑战的 2:与玩家挑战的
	uint8				settleType;//结算类型
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
	uint16  double_times;           // 双倍次数
	uint16  merge_times;            // 合并次数
};

// 客户端使用选择宝箱
struct U2GS_UseSelectItem__2348 ->
{
    uint8			bag_id;
    uint64			itemDBID;		// 道具ID
    vector<uint16>	selectIndex;		// 选项1-4
    uint16			itemCount;		// 道具数量
    uint32			params;          // 参数
};
struct GS2U_UseSelectItem__2349 <-
{
    uint8			bag_id;
    uint64			itemDBID;		// 道具ID
    vector<uint16>	selectIndex;		// 选项1-4
    uint32			errorCode;       // 0-成功，非0-错误原因
};

// 功能提示数据信息
struct actionHintInfo
{
	uint32	dataID;		// 配置ID
	uint8	isActive;	// 是否激活属性
	vector<uint32>	buyItem_list;	// 已购买的物品序号列表
};

// 发送功能提示数据信息到客户端
struct GS2U_actionHintData__2361 <-
{
	vector<actionHintInfo> data_list;
};

// 玩家请求激活功能属性
struct U2GS_activePlayerAttr__2362 ->
{
	uint32	dataID;	// 配置ID
};

// 玩家请求激活功能属性返回
struct GS2U_activePlayerAttrResult__2363 <-
{
	uint32 	dataID;		// 配置ID
	uint32	result;		//返回
};

// 玩家购买功能礼包
struct U2GS_buyActionItem__2364 ->
{
	uint32 	dataID;		// 配置ID
	uint32 	buyNumber;		// 物品序号
};

// 玩家购买功能礼包返回
struct GS2U_buyActionItemResult__2365 <-
{
	uint32 	dataID;		// 配置ID
	uint32 	buyNumber;		// 物品序号
	uint32	result;		// 返回
};

// 客户端移除灵魂锁链装备
struct U2GS_FetterEquipRemove__2378 ->
{
    uint64  equipmentID;           // 装备ID
};
struct GS2U_FetterEquipRemove__2379 <-
{
    uint64          equipmentID;           // 装备ID
    uint32          errorCode;             // 0-成功，非0-错误原因
    vector<uint64>  fetterEquipIDList;     // 灵魂锁链装备ID列表（有几个就发几个，最多16个）
};

//比武擂台积分时，推送客户端
struct GS2U_fightRingScore__2380<-
{
	uint32	fightRingScore;	// 比武擂台积分
};

// 获取玩家的称号信息
struct U2GS_getPlayerTitleInfo__2381 ->
{

};

// 称号数据
struct titleInfo
{
	uint32	titleID;	// 称号ID
	uint16	type;		// 称号类型
	uint32	expireTime;	// 称号过期时间
};

// 发送玩家称号数据
struct GS2U_SendPlayerTitleInfo__2382 <-
{
	vector<titleInfo>	title_list;
};

// 羁绊ID
struct FetterID
{
    uint32  id;
    uint32  numb;
};

// 战斗属性
struct ObjectProperty
{
    vector<BattleProp>  battlePropList;    // 战斗属性列表（只发非0的属性）
    vector<FetterID>    fetterIDList;      // 羁绊ID列表
};

// 战斗属性变化
struct ObjectPropertyChanged
{
    vector<BattleProp>  battlePropList;    // 战斗属性列表（只发变化的属性）
    vector<FetterID>    fetterIDList;      // 羁绊ID列表
};

// 战力参数
struct BattleValueTuple
{
    uint64  battleValue;                  // 玩家战力
    float   baseFactor;                   // 玩家战力基础系数
    float   scaleFactor;                  // 玩家战力比例系数
	float   trueFactor;                   // 玩家战力真实系数
	float   elementFactor;                // 玩家战力元素系数
};

// 野外地图附加属性
struct InspireTuple
{
	uint32  inspireHp;                                // 野外地图提供生命值
    uint32  inspireAttack;                            // 野外地图提供伤害强度
    uint32  inspireDefence;                           // 野外地图提供防御强度
	uint32  inspireTrueDamage;                        // 野外地图提供真实攻击
    uint32  inspireTrueDefence;                       // 野外地图提供真实防御
	uint32  inspireFire;                       		  // 野外地图提供火焰元素强度
	uint32  inspireCold;                       		  // 野外地图提供冰冻元素强度
	uint32  inspireThunder;                       	  // 野外地图提供雷电元素强度
	uint32  inspireDefFire;                       	  // 野外地图提供火焰元素防御
	uint32  inspireDefCold;                       	  // 野外地图提供冰冻元素防御
	uint32  inspireDefThunder;                        // 野外地图提供雷电元素防御	
    uint32  inspire;                                  // 野外地图转换万分比
	uint32  inspireHpElement;                         // 野外地图提供元素生命
};
struct GS2U_PlayerProperty__2384 <-
{
    uint32  errorCode;                     // 0-成功，非0-错误原因
    ObjectProperty  objectProperty;        // 成功后有意义，战斗属性
    BattleValueTuple  battleValueTuple;    // 成功后有意义，玩家战力参数
    uint32  skillHp;                      // 成功后有意义，技能提供生命值
    uint32  skillAttack;                  // 成功后有意义，技能提供伤害强度
    uint32  skillDefence;                 // 成功后有意义，技能提供防御强度
};
struct U2GS_HeroProperty__2385 ->
{
    uint64  heroID;                        // 英雄ID
};
struct U2GS_EquipProperty__2387 ->
{
    uint64  equipmentID;                   // 装备ID
};
struct GS2U_EquipProperty__2388 <-
{
    uint64  equipmentID;                   // 装备ID
    uint32  errorCode;                     // 0-成功，非0-错误原因
    ObjectProperty  objectProperty;        // 成功后有意义，战斗属性
};

// 服务器通知战斗属性变化
struct GS2U_PlayerPropertyChanged__2389 <-
{
    ObjectPropertyChanged  objectPropertyChanged;    // 战斗属性变化
    BattleValueTuple  battleValueTuple;              // 玩家战力参数
    uint32  skillHp;                                // 技能提供生命值
    uint32  skillAttack;                            // 技能提供伤害强度
    uint32  skillDefence;                           // 技能提供防御强度
};
struct GS2U_EquipPropertyChanged__2391 <-
{
    uint64  equipmentID;                             // 装备ID
    ObjectPropertyChanged  objectPropertyChanged;    // 战斗属性变化
};

// 批量删除物品
struct GS2U_DeleteItemBatch__2397 <-
{
	vector<uint64>	idList;	// 物品ID列表 (需要客户端根据ID删除英雄和装备相关信息)
};
// 选择装备的称号
struct U2GS_equipTitle__2398 ->
{
	uint16 type;	// 类型：0属性佩戴 1显示佩戴
	uint64 role_id;	// 角色
	uint32 titleID;	// 称号ID
};
struct GS2U_equipTitleResult__2399 <-
{
	uint16 	type;		// 类型：0属性佩戴 1显示佩戴
	uint64 	role_id;	// 角色
	uint32 	titleID;	// 称号ID
	uint32	result;		// 反馈ID
};
struct conditionInfo
{
	uint16	type;	// 类型
	uint32	curNum;	// 当前值
};
struct GS2U_SendAchievementTarget__2410 <-
{
	uint32	achieveID;		// 成就ID
	vector<conditionInfo> condition_list;
};
struct GS2U_getAchievementTargetResult__2411 <-
{
	uint32	achieveID;		// 成就ID
	uint32	result;			// 反馈ID
}
// 卸下装备的称号
struct U2GS_unEquipTitle__2412 ->
{
	uint16 type;	// 类型：0属性佩戴 1显示佩戴
	uint64 role_id;	// 角色
	uint32 titleID;	// 称号ID
};
struct GS2U_unEquipTitleResult__2413 <-
{
	uint16 	type;		// 类型：0属性佩戴 1显示佩戴
	uint64 	role_id;	// 角色
	uint32 	titleID;	// 称号ID
	uint32	result;		// 反馈ID
};

struct U2GS_getPayAward__2414->
{
	uint8	type;//0 首冲奖励1档，1 每日充值奖励1档，2首冲奖励2档，3首冲奖励3档， 4每日充值奖励2档，5 每日充值奖励3档,6诚意奖
				 // 7-周期累充第一档、8-周期累充第二档、9-周期累充第三档
				 // 10-新服累充第一档、11-新服累充第二档、12-新服累充第三档
	uint32	index;	// 附加参数
};

struct GS2U_getPayAwardResult__2415 <-
{
	 uint32  errorCode;
	 uint8   type;
	 uint32	index;	// 附加参数
};

// 查看陌生人信息
struct U2GS_getPlayerLookInfo__2420 ->
{
	uint64	playerID;	//ID
};

struct GS2U_sendPlayerLookInfo__2421 <-
{
	uint64	playerID;	//ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32	career;		//职业
	uint32 	fateLevel;  // 14、命格等级
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//帮派ID
	string	guildName;	//帮派名称
	uint32	offlineTime;	//离线时间（0：即为在线，>0：离线）
	uint32				headID;             // 16、头像ID
};

struct U2GS_goldChangeName__2426 ->
{
	string	name;
	uint8	type; //1角色改名，2修改仙盟名字
};

struct GS2U_goldChangeNameResult__2427 <-
{
	uint32	result;
};

//提前告知客户端BOSS的掉落
struct GS2U_MonsterDrop__2428 <-
{
    uint64               id;          // 实例ID（怪物、采集物），客户端副本该值为0
    vector<CoinInfo>  addCurrencyList;       // 自己得到的货币列表
	vector<itemInfo>	itemList;
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
};

/*
%% 活动类型
-define(SalesActivity_Type_Condition, 1).   %% 条件限制类
-define(SalesActivity_Type_Multi, 2).       %% 多倍奖励类
-define(SalesActivity_Type_limitShop, 3).   %% 限时购买类
-define(SalesActivity_Type_Exchange, 4).    %% 物品兑换类
-define(SalesActivity_Type_Top, 5).         %% 排行榜
-define(SalesActivity_Type_Dungeon, 6).     %% 副本
-define(SalesActivity_Type_Boss, 7).		%% 7为四海BOSS
-define(SalesActivity_Type_DemonsRefresh, 8).      %% 本服天魔Boss刷新CD修正
-define(SalesActivity_Type_Recharge, 101).  %% 庆典累充

%% 限制条件

-define(LimitCondition_PerDay, 1).  %% 限制每天次数类型（0:表示没有限制 >0表示每天限制次数）
-define(LimitCondition_Total, 2).   %% 活动期间总共的限制次数

%% 活动参与条件
-define(JoinCondition_Null, 0).     %% 无
-define(JoinCondition_Level, 1).    %% 等级段
-define(JoinCondition_Recharge, 2). %% 充值金额

%% 限购商城类型
-define(LimitShopType_Integral, 1). %% 积分购物
-define(LimitShopType_Coin, 2). %% 货币购物
-define(LimitShopType_DisCount, 3). %% 打折限购
-define(LimitShopType_VipReward, 4).    %% VIP特权


%% 条件达成类 条件
-define(SalesActivity_Level, 1).        %% 等级
-define(SalesActivity_Recharge_Total, 2).   %% 累积充值
-define(SalesActivity_SpentGold, 3).    %% 消耗元宝
-define(SalesActivity_Recharge_single, 4).  %% 单次充值
-define(SalesActivity_JoinTimes_Arena, 5).  %% 参与次数 竞技场
-define(SalesActivity_JoinTimes_Plunder, 6).    %% 参与次数 掠夺
-define(SalesActivity_JoinTimes_Team, 7).       %% 参与次数 组队副本
-define(SalesActivity_JoinTimes_Secret, 8).     %% 参与次数 妖魔来袭
-define(SalesActivity_JoinTimes_WorldBoss, 9).  %% 参与次数 世界boss
-define(SalesActivity_JoinTimes_DNTG, 10).      %% 参与次数 大闹天空
-define(SalesActivity_JoinTimes_Arti, 11).      %% 参与次数 神器副本
-define(SalesActivity_JoinTimes_Active, 12).    %% 参与次数 活动副本
-define(SalesActivity_JoinTimes_Excellence, 13).    %% 参与次数  精英副本
-define(SalesActivity_VipLevel, 14).        %%  VIP等级
-define(SalesActivity_DrawHeroTimes, 15).       %% 元宝抽英雄次数
-define(SalesActivity_DrawEquipTimes, 16).      %% 元宝抽装备次数
-define(SalesActivity_DrawTimes, 17).           %% 元宝抽卡次数
-define(SalesActivity_LoginRecharge, 18).       %% 连续充值
-define(SalesActivity_loginDays, 19).           %% 连续登陆
-define(SalesActivity_NormalMain, 20).          %% 参与次数 剧情副本
-define(SalesActivity_Battlefield, 21).         %% 参与次数 三界战场
-define(SalesActivity_WildBoss, 22).            %% 参与次数 诛仙
-define(SalesActivity_Roulette, 23).            %% 参与次数 转盘
-define(SalesActivity_Manor, 24).               %% 参与次数 领地战
-define(SalesActivity_CampFire, 25).            %% 参与次数 晚宴次数
-define(SalesActivity_CampTreat, 26).           %% 参与次数 请客次数
-define(SalesActivity_CampPacket, 27).          %% 参与次数 开红包次数
-define(SalesActivity_GoldMount, 28).           %% 元宝抽坐骑
-define(SalesActivity_FieldBoss, 29).           %% 野外Boss次数
-define(SalesActivity_FieldTime, 30).           %% 野外挂机小时数
-define(SalesActivity_DungeonGuild, 31).        %% 参与次数 仙盟副本次数
-define(SalesActivity_ActiveValue, 32).         %% 日常活跃度
-define(SalesActivity_OnlineTime, 33).          %% 在线时长
-define(SalesActivity_UseItem, 34).             %% 使用物品次数
-define(SalesActivity_Melee, 35).               %% 麒麟洞参与次数
-define(SalesActivity_convoyTimes, 36).         %% 运镖次数
-define(SalesActivity_AshuraTimes, 37).         %% 修罗战场次数
-define(SalesActivity_DrawHLWingsTimes, 38).    %% 高级神翼元宝抽卡次数
-define(SalesActivity_DrawLegendWinsTimes, 39). %% 传说神翼元宝抽卡次数
-define(SalesActivity_ShareServerFightRing, 40).%% 跨服比武参与次数
-define(SalesActivity_41, 41).					%% 41为天宫试炼次数
-define(SalesActivity_42, 42).					%% 42为天宫试炼开丹炉个数
-define(SalesActivity_43, 43).					%% 43为法宝幻境次数
-define(SalesActivity_44, 44).					%% 44仙侣2V2次数
-define(SalesActivity_45, 45).					%% 45为挑战副本次数
注：使用指定ID的道具次数类型为物品ID

%% 多倍奖励
-define(SalesActivity_Multi_Arena, ?MapAI_Arena).      %% 竞技场  9
-define(SalesActivity_Multi_Plunder, ?MapAI_Plunder).    %% 掠夺  7
-define(SalesActivity_Multi_Team, ?MapAI_Team).       %% 组队副本   4
-define(SalesActivity_Multi_Secret, ?MapAI_Secret).     %% 妖魔来袭 3
-define(SalesActivity_Multi_WorldBoss, ?MapAI_WorldBoss).  %% 世界Boss 14
-define(SalesActivity_Multi_DNTG, ?MapAI_DNTG).       %% 大闹天空   8
-define(SalesActivity_Multi_Arti, ?MapAI_Arti).       %% 神器副本   6
-define(SalesActivity_Multi_Active, ?MapAI_Active).     %% 活动副本 5
-define(SalesActivity_Multi_Excellence, ?MapAI_Excellence). %% 精英副本 15
-define(SalesActivity_Multi_Main, ?MapAI_NormalMain).      %% 主线副本  1
-define(SalesActivity_Multi_WildAuto, ?MapAI_WildAuto).     %% 野外挂机 105
-define(SalesActivity_Multi_ActiveExtend, ?MapAI_ActiveExtend).     %% 21为挑战副本
-define(SalesActivity_Multi_FaBao, ?MapAI_FaBao).     %% 17为法宝幻境

%%副本多倍奖励，货币、物品类型定义
-define(SalesActivity_MultiType_Gold, ?AwardType_Gold).%%元宝 0
-define(SalesActivity_MultiType_Money, ?AwardType_Money).%%铜币 1
-define(SalesActivity_MultiType_SoulValue, ?AwardType_SoulValue).%%魂玉SoulValue 2
-define(SalesActivity_MultiType_Reputation, ?AwardType_Reputation).%%声望Reputation 3
-define(SalesActivity_MultiType_Honor, ?AwardType_Honor).%%荣誉Honor 4
-define(SalesActivity_MultiType_WarSpirit, ?AwardType_WarSpirit).%%战魂WarSpirit 5
-define(SalesActivity_MultiType_EquipSoul, ?AwardType_EquipSoul).%%铸魂EquipSoul 6
-define(SalesActivity_MultiType_Gan, ?AwardType_Gan).%%帮会贡献值Gan 7
-define(SalesActivity_MultiType_ArtiSoul, ?AwardType_ArtiSoul).%%神器 8
-define(SalesActivity_MultiType_Item, ?AwardType_Item).%%物品 19
-define(SalesActivity_MultiType_ItemType, 20).      %%指定物品类型
*/


struct conditionItem
{
	uint32		conditionID;	// 条件ID
	uint32		targetNum;		// 目标
	uint32		param1;			// 参数1
};
struct indexCoinInfo
{
	uint16	index;		// 奖励索引	
	uint8	type;		//货币类型
	uint32	amount;		//数量
	uint8	effect;		// 是否转圈特效
};
//物品信息
struct indexItemInfo
{
	uint16	index;		// 奖励索引	
	uint32	itemID;		//物品ID
	uint32	count;		// 数量
	uint8	bind;		// 是否绑定
	uint8	effect;		// 是否转圈特效
	bool	is_equip;	// 是否是装备
	uint16  quality;    // 品质
	uint16  star;       // 星级
};

struct indexTypeItem
{
	pb_uint16	index;		// 奖励索引	
	uint8   type;       // 类型 1道具 2货币 3装备
	pb_uint32	itemID;		//物品ID
	pb_uint32	count;		// 数量
	uint8	bind;		// 是否绑定
	uint8	effect;		// 是否转圈特效
	pb_uint16  quality;    // 品质
	pb_uint16  star;       // 星级
};

//分组信息
struct groupInfo
{
	uint32	index;		// 群组编号
	uint32	sort_id;	// 排序id
	uint8	show;		// 达成后是否显示
};

// 条件达成类
struct activityItem
{
	uint32					id;			// 活动项ID
	groupInfo				group;		// 分组
	uint8					vip_limit;	// 
	vector<conditionItem>	condition_list;	// 活动条件列表
	vector<indexCoinInfo>	coin_List;	// 奖励货币
	vector<indexTypeItem>	item_list;	// 奖励物品
	vector<uint32>			limit;		// 领奖限制[类型,次数]
	uint32					score;		// 奖励积分
	vector<ModelInfo>		model;		// 模型
};

// 门票活动 --> 恶魔讨伐令活动
struct ac_ticket
{
	uint32		n_id;				      // N表Id
	vector<CoinInfo> cost;	    // 购买门票消耗的货币
	vector<itemInfo> cost_item; // 购买门票消耗的道具
	uint64  	limit_timestamp;		// 门票购买时限 在这个时间以后就不能买了  
	vector<uint32>		a_ids;		// 对应的计数类A表Id
	string    name_text;      
	uint32    over_time;      
};

struct multiType
{
	uint32	type;				// 类型
	uint16	param1;				// 参数1 跳转Id
	uint16	param2;				// 参数2 废弃
	uint16	multiNum;			// 获得奖励倍数(2:双倍奖励 3:三倍奖励)
};

// 多倍奖励类
struct multiItem
{
	uint32		id;				// 活动项
	uint32		funcId;			// 参加活动的功能列表
	string		title;			// 多倍标题
	string		des;			// 多倍描述
	vector<multiType>	multiType;		// 获得奖励倍数列表
};

struct limitItem
{
	uint32		sellID;			// 销售ID
	uint32		itemID;			// 物品ID
	uint32		itemNum;		// 物品数量
	uint16		curType;		// 货币类型
	uint32		oldPrice;		// 售价
	uint32		nowPrice;		// 现价
	vector<uint32>	limit;		// 领奖限制[类型,次数]
};
// 限时购买类
struct limitShop
{
	uint32		shopID;			// 商城ID
	uint8		type;			// 类型
	uint32		vipLevel;		// vip等级限制
	vector<limitItem> buyItem_list;	// 商城物品
};

struct exchangeGetEq
{
	uint32		index;		// 序号
	uint32		itemId;		// 物品id
	uint8		chara;		// 品质
	uint8		star;		// 星级
	uint8		bind;		// 绑定
	uint32		count;		// 数量
};

struct exchangeGetItem
{
	uint32		index;		// 序号
	uint8		type;		// 类型(1道具, 2货币)
	uint32		itemId;		// 物品Id
	uint8		bind;		// 绑定
	uint32		count;		// 数量
};

struct exchangeSpent
{
	uint8		type;		// 1物品 2货币
	uint32		id;			// type为1时代表物品id，type为2是代表货币枚举
	uint32		num;		// 数量
};

// 物品兑换类
struct exchangeItem
{
	uint32					changeID;	// 兑换ID
	vector<exchangeGetEq>	changeEq;	// 兑换获得的装备
	vector<exchangeGetItem>	changeItem;	// 兑换获得的物品
	uint16					discount;	// 折扣
	vector<exchangeSpent>	spentItem;	// 兑换消耗
	vector<uint32>			limit;		// 兑换限制[类型,次数]
};

// 活动时间区间
struct timeInterval
{
	uint32		startSec;
	uint32		endSec;
};

struct entryCond
{
	uint16		index;			// 序号
	uint32		type;			// 条件类型
	uint32		value;			// 条件值
};

struct conqItem
{
	uint16		index;			// 序号
	uint16		times;			// 征服次数
	uint32		itemID;			// 物品ID 
	uint16		num;			// 数量
};

struct monsterDrop
{
	uint16		index;			// 功能编号
	uint32		dropID;			// 掉落包ID
	uint16		dropTimes;		// 调用次数
};

struct dungeonSales
{
	uint32		dungeonID;		// 副本ID
	uint16		maxTimes;		// 运营活动副本每日最大次数
	vector<entryCond> entry_list;	// 进入条件
	vector<uint32> dropItem;	// 掉落显示
	vector<conqItem> item_list;	// 副本进度奖励
	vector<monsterDrop> drop_list;	// 副本掉落相关参数
};

struct bossSales
{
	uint32  id;							// 四海BOSS活动ID
	vector<uint32>  bornMapList;		// 四海BOSS活动地图ID列表
	vector<uint32>  bossIDList;			// 四海BOSS活动BossID列表，只填1个bossID表示活动期间刷同一个BOSS
	vector<timeInterval>  timeList;		// 四海BOSS活动Boss时间列表
};

struct timeReset
{
	uint32	mapDataID;
	uint16	bossIndex;
	uint16	resetPer;
};
struct demonTimeReset
{
	uint32	id;
	string	title;
	string	describe;
	vector<timeReset>	reset_list;
};

//----------------------------满减折扣----------------------------
// 折扣信息
struct discount
{
	uint8	type;		// 折扣类型
	uint32	param1;		// 参数1
	uint32	param2;		// 参数2
};

// 限购信息
struct limit
{
	uint8	type;		// 限购类型
	uint32	param1;		// 参数1
	uint32	param2;		// 参数2
};

// 折扣商品
struct discount_goods
{
	uint32	shop_id;				// 商店id
	uint32	goods_id;				// 商品id
	uint32	sort_id;				// 排序id
	ItemBaseInfo	item;			// 物品
	CoinBaseInfo	coin;			// 货币
	vector<EqBaseInfo>	eq;			// 装备
	uint8	cost_curr_type;			// 需要的货币类型
	uint32	cost_curr_num;			// 需要的货币数量
	uint32	cost_item_id;			// 需要的物品id
	uint32	cost_item_num;			// 需要的物品数量
	vector<discount>	discount;	// 折扣信息
	vector<limit>		limit;		// 限购信息
	uint8		recommend;			// 推荐
	uint8		show;				// 特效
	uint8		condition_type;		// 购买条件
	uint32		condition_param1;	// 购买条件参数1
	uint32		condition_param2;	// 购买条件参数2
	uint8		show_type;			// 显示条件
	uint32		show_param1;		// 显示条件参数1
	uint32		show_param2;		// 显示条件参数2
};

//// 折扣商店
//struct discount_shop
//{
//	uint32	shop_id;					// 商店id
//	vector<discount_goods>	goods_list;	// 商品列表
//};

// 满减商品数据
struct dcs_goods
{
	uint32	shop_id;	// 商店id
	uint32	goods_id;	// 商品id
	uint32	buy_count;	// 购买数量
};

//// 满减商店数据
//struct dcs_shop
//{
//	uint32	shop_id;				// 商店id
//	vector<dcs_goods>	goods_data;	// 商品数据
//};

// 满减商品购买信息
struct dcs_buy
{
	uint32	goods_id;	// 商品id
	uint32	count;		// 购买数量
};

//// 请求满减促销活动数据
//struct U2GS_DiscountShopInfoReq ->
//{
//	uint32	ac_id;					// 活动id
//};
//
//// 满减促销活动数据
//struct GS2U_DiscountShopInfoSync <-
//{
//	uint32	ac_id;						// 活动id
//	vector<discount_shop>	shop_list;	// 商店列表
//	vector<dcs_shop>		shop_data;	// 商店数据
//};

// 购买满减商品请求
struct U2GS_DiscountGoodsBuyReq ->
{
	uint32			ac_id;		// 活动id
	uint32			shop_id;	// 商店id
	vector<dcs_buy>	buy_list;	// 购买列表
};

// 购买满减商品返回
struct GS2U_DiscountGoodsBuyRet <-
{
	uint32			err_code;	// 错误码
	uint32			ac_id;		// 活动id
	uint32			shop_id;	// 商店id
	vector<dcs_buy>	buy_list;	// 购买列表
};
//--------------------------满减折扣 end--------------------------

//----------------------------龙神777----------------------------
// 物品奖励
struct IndexAwardItem
{
	pb_uint16		index;
	uint8		type;
	uint32		cfg_id;
	uint8		bind;
	pb_uint32		num;
	pb_uint32		param;
};

// 装备奖励
struct IndexAwardEquip
{
	pb_uint16		index;
	pb_uint32		cfg_id;
	uint8		chara;
	uint8		star;
	uint8		bind;
	pb_uint32		num;
	pb_uint32		param;
};

// 龙神777抽奖
struct U2GS_Card777DrawReq ->
{
	uint32	ac_id;		// 活动id
	uint32	show_index;	// 表现序号
};

// 龙神777抽奖返回
struct GS2U_Card777DrawRet <-
{
	uint32	err_code;	// 错误码
	uint32	ac_id;		// 活动id
	uint32	show_index;	// 表现序号
	uint32	award_index;// 奖励序号
};

// 龙神777重置
struct U2GS_Card777ResetReq ->
{
	uint32	ac_id;	// 活动id
};

// 龙神777重置返回
struct GS2U_Card777ResetRet <-
{
	uint32	err_code;	// 错误码
	uint32	ac_id;		// 活动id
};

// 领取大奖
struct U2GS_GetCard777SpecAwardReq ->
{
	uint32	ac_id;			// 活动id
	uint32	award_index;	// 奖励序号
};

// 领取大奖返回
struct GS2U_GetCard777SpecAwardRet <-
{
	uint32	err_code;		// 错误码
	uint32	ac_id;			// 活动id
	uint32	award_index;	// 奖励序号
};

// 请求大奖记录
struct U2GS_GetCard777RecordReq ->
{
	uint32	ac_id;
};

struct Card777Record
{
	uint8					type;	// 标记 1翻牌得到 2大奖得到
	string					name;	// 玩家名字
	vector<CoinBaseInfo>	coin;	// 货币
	vector<ItemBaseInfo>	item;	// 物品
	vector<EqBaseInfo>		eq;		// 装备
	uint32					time;	// 时间
};

// 请求大奖记录返回
struct GS2U_GetCard777RecordRet <-
{
	uint32					ac_id;			// 活动id
	vector<Card777Record>	record_list;	// 大奖记录
};

// 新增大奖记录
struct GS2U_AddCard777Record <-
{
	uint32			ac_id;	// 活动id
	Card777Record	record;	// 大奖记录
};

//--------------------------龙神777 end--------------------------

//----------------------------节日签到----------------------------
// 签到请求
struct U2GS_FSign_SignReq ->
{
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint32		day;		// 天数
};

// 签到请求返回
struct GS2U_FSign_SignRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint32		day;		// 天数
};

// 补签请求
struct U2GS_FSign_RepSignReq ->
{
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint32		day;		// 天数
};

// 补签请求返回
struct GS2U_FSign_RepSignRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint32		day;		// 天数
};

// 一键补签请求
struct U2GS_FSign_OneKeyRepSignReq ->
{
	uint32		ac_id;		// 活动id
};

// 一键补签返回
struct GS2U_FSign_OneKeyRepSignRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
};

// 玩家领奖请求
struct U2GS_FSign_AwardReq ->
{
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint8		type;		// 类型(1:累计签到奖励, 2:大奖)
	uint32		day;		// 天数
};

// 玩家领奖返回
struct GS2U_FSign_AwardRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		sign_id;	// 签到id
	uint8		type;		// 类型(1:累计签到奖励, 2:大奖)
	uint32		day;		// 天数
};

//--------------------------节日签到 end--------------------------


//----------------------------神秘商店----------------------------
// 打开神秘商店请求
struct U2GS_MysteryShopOpenReq ->
{
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
};

// 打开神秘商店结果
struct GS2U_MysteryShopOpenRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
};

// 神秘商店购买请求
struct U2GS_MysteryBuyReq ->
{
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
    uint8       goods_position // 商品位置
};

// 神秘商店购买结果
struct GS2U_MysteryBuyRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
    uint8       goods_position // 商品位置
};

// 神秘商店刷新请求
struct U2GS_MysteryRefreshReq ->
{
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
};

// 神秘商店刷新结果
struct GS2U_MysteryRefreshRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		shop_id;	// 商店id
};

//--------------------------神秘商店 end--------------------------

//-------------------招财猫---------------------------

// 抽奖消耗
struct lucky_cat_cost
{
	uint32      programme;    // 方案
	uint8    type;   // 消耗类型
	uint32   id;     // 消耗的id
	uint32   number; // 消耗的数量
};

// 抽奖记录
struct lucky_draw
{
	string    name;             // 玩家名字
	uint8     multiple;         // 抽中的倍率
	key_value  reward;          // 获得的奖励（货币类型，货币数量）
};

// 转盘信息
struct big_reward
{
	uint32     order;     // 编号
	uint32     multiple;  // 倍率
	uint8      show;      // 是否显示大奖标识
};

// 招财猫基础信息
struct LuckyCat
{
	uint32                   times;           // 次数
	key_value                condition;      // 抽奖条件（条件类型，参数）
	vector<lucky_cat_cost>   consume;        // 消耗
	uint32                   reward_type;    // 抽中返还的货币ID
	vector<big_reward>       award_index;    // 倍率和大奖标志
};

// 请求全服抽奖记录
struct U2GS_LuckyCatDrawRecordReq ->
{
	
};

// 全服抽奖记录返回
struct GS2U_LuckyCatDrawRecordRet <-
{
	vector<lucky_draw>     all_record;  // 抽奖记录
};

// 请求招财抽奖
struct U2GS_GetLuckyCatDrawReq ->
{
	uint32					ac_id;			// 活动id
	uint32                  times;          // 次数
};

// 招财抽奖返回
struct GS2U_LuckyCatDrawRet <-
{
	uint32			ac_id;	     // 活动id
	uint32          order;       // 抽中的序号
	uint32          multiple;    // 倍率  
	vector<key_value> reward;    // 获得的奖励(货币类型，货币数量)
	uint8           is_record;   // 是否大奖
	uint32	        err_code;    // 错误码
	
};

//-------------------招财猫 end---------------------------

//-------------------荣耀龙徽---------------------------

// 等级奖励装备结构
struct badge_equip
{
	uint8       rank_lv;  // 进阶等级 0 兑换商店装备 1 精英 2 进阶 3 至尊
	uint32      career; //职业
	uint32      equip_id; //装备ID
	uint32      equip_quality;   // 装备品质
	uint32      equip_star;   // 装备星级
	uint8       is_bind;    // 是否绑定
	uint32      number;     // 数量
	uint32      sort;     //排序权重
};

// 等级奖励道具结构
struct badge_item
{
	uint8       rank_lv;  // 进阶等级 1 精英 2 进阶 3 至尊
	uint32      career; //职业
	uint16      type;   //类型
	uint32      item_id; //物品ID
	uint8       is_bind;    // 是否绑定
	uint32      number;     // 数量
	uint32      sort;     //排序权重
};

// 进阶消耗
struct advanced_consume
{
	uint16      type;  // 0 普通进阶 1 至尊进阶
	uint32      coin_id;   // 消耗货币ID
	uint32      coin_num;   // 消耗货币数量
	string      recharge_coin; // 直购消耗数量
	string      advancedtext; //进阶特权文字
};

// 等级奖励
struct level_reward
{
	uint32        			  level;   			// 等级
	uint64      			  exp;    			// 升下一级经验	
	vector<badge_equip>       equip_reward;  	//装备奖励  （进阶等级，职业，装备ID，装备品质，装备星级，是否绑定，数量)
	vector<badge_item>        item_reward;   	// 道具/货币奖励  (进阶等级,职业,类型，物品ID，是否绑定，数量)
	uint8        			  show;   			// 大奖是否预览
};

//荣耀龙徽基础信息
struct glory_badge_info
{
	vector<uint32>          dailytask;   //日常
	vector<uint32>          weeklytask;   // 周
	vector<uint32>   buyexp;    //购买等级
	vector<badge_item>   dailyReward;   // 每日领奖
	vector<advanced_consume>   consume_list;  //进阶消耗
	vector<ModelInfo>            battle_pic;   // 大奖图片
	string            battle_text;  //大奖文字
	vector<level_reward>    reward_list;	 //等级奖励列表
	vector<badge_equip>    icon_equip;  //  装备Icon
	vector<badge_item>     icon_item;   // 道具Icon
	vector<key_value>      big_item_list;   // 大奖id
};

// 商店道具
struct shop_item
{
	uint64      id;   // 道具id
	uint8       bind;  //是否绑定
	uint32      num;   // 道具数量
};

//兑换商店
struct exchange_goods
{
	uint32    shop_id;
	uint32    goods_id;
	uint32     sort;
	shop_item  item;  // 道具商品
	key_value   coin;     // 货币商品 {货币类型,数量}
	vector<badge_equip>    equip;  // 装备商品  （职业，装备ID，装备品质，装备星级，是否绑定，数量)
	key_value    price;   // 购买消耗的货币{货币类型,数量}
	key_value      limit;   // 限购(类型，次数)
	uint32       buy_times; // 已经购买的次数
	uint8         show;      // 特效
	uint8        push;   // 推荐
	key_value    buy_condition; // {条件，等级}
};

//玩家信息
struct glory_badge_player
{
	uint32        battle_lv;   //龙徽等级
	uint64        curr_exp;    // 当前龙徽经验
	uint64        reward_lv;   // 当前龙徽奖励领到第几级了
	uint8         rank_lv;      // 0 精英 1 进阶 2 至尊进阶
	vector<exchange_goods>      shop;        // 商店
	uint8         daily_reward;   //是否领取每日宝箱 0 不能领 1 可以领 2 已经领了  
	uint8         is_advance;    //是否达到过普通进阶
};

// 请求进阶龙徽
struct U2GS_UpGloryBadgeReq ->
{
	uint32        ac_id;  
	uint16        type; // 进阶类型 1 进阶 2 至尊进阶
	
};

// 进阶龙徽返回
struct GS2U_UpGloryBadgeRet <-
{
	uint32        ac_id; 
	uint16        type; // 进阶类型 1 进阶 2 至尊进阶
	uint32	      err_code;    // 错误码
};

// 购买龙徽等级
struct U2GS_BuyGloryBadgeLvReq ->
{
	uint32        ac_id; 
	uint64        level_num; // 购买等级的级数
};

// 购买龙徽等级返回
struct GS2U_BuyGloryBadgeLvRet <-
{
	uint32          ac_id; 
	uint32          new_Level; // 新等级
	uint32          new_exp;   // 新总经验值
	uint32	        err_code;    // 错误码
};

// 领取龙徽等级奖励
struct U2GS_GloryBadgeLevelReq ->
{
	uint32       ac_id; 
	uint64      level;   // 领取的等级
};

// 领取龙徽等级奖励返回
struct GS2U_GloryBadgeLevelReq <-
{
	uint32          ac_id;
	uint32	        err_code;    // 错误码
};

// 每日领奖
struct U2GS_GloryBadgeDailyReq ->
{
	uint32        ac_id; 
};

// 每日领奖返回
struct GS2U_GloryBadgeDailyReq <-
{
	uint32        ac_id; 
	uint32	        err_code;    // 错误码
};

// 购买商品
struct U2GS_BuyGloryBadgeGoodsReq ->
{
	uint32        ac_id; 
	uint32      shop_id;
	uint32      goods_id;
	uint32      buy_times;
};

// 购买商品返回
struct GS2U_BuyGloryBadgeGoodsReq <-
{
	uint32        ac_id;
	uint32      shop_id;
	uint32      goods_id;
	uint32      buy_times;
	uint32	        err_code;    // 错误码
};

//-------------------荣耀龙徽 end---------------------------

//----------------------------节日工资----------------------------
// 重置条件结构
struct pay_condition
{
	uint32   reset_order; // 重置序号
	uint32   type;    // 条件类型
	uint32   param;   // 条件参数
};

// 需要的配置数据
struct holiday_pay_cfg
{
	uint32        order;   //位数（1个 2十 3百 4千）
	vector<pay_condition>   reset_condition; // 重置条件
	uint32        awardsType;  // 枚举类型
};

// 工资卡片属性结构
struct holiday_pay
{
	uint32        order;   // 位数
	uint32        num;       // 卡片翻出的值
	uint32        state;     // 当前状态（0没翻过 1可以翻 2已经翻了）
	uint32        recharge_num; // 当前充值进度
	uint32        consume_num;      // 当前消费进度
	uint32        reset_times;  // 当前拥有的重置次数（仅供前端显示使用）
	bool          is_today;  // 是否是今天的可以翻的牌
};
// 翻牌请求
struct U2GS_FWage_DrawReq ->
{
	uint32		ac_id;		// 活动id
	uint32		order;	// 位数
};

// 翻牌请求返回
struct GS2U_FWage_DrawRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		order;	// 位数
	uint32		pay_value;	  // 翻出的值
};

// 重置请求
struct U2GS_FWage_ResetReq ->
{
	uint32		ac_id;		// 活动id
	uint32		order;	// 位数
};
//重置请求返回
struct GS2U_FWage_ResetRet <-
{
	uint32		err_code;	// 错误码
	uint32		ac_id;		// 活动id
	uint32		order;	     // 位数
};

//--------------------------节日工资 end--------------------------


//-------------- 开服礼包start -----------
struct openServerGiftPacks
{
	uint32 goods_id;							// 商品id
	string adver;								// 广告语
	string name;								// 名称
	string discribe;							// 描述
	string pack_image;							// 底图
	vector<indexItemInfo>	item_list;			// 奖励物品
	vector<TypeModelInfo>	model;				// 模型
	uint16                  discount;			// 折扣
	key_2value              limit;				// 限购
	key_value               curr_type;			// 货币消耗
	key_value               condition_type;		// 可购买条件
	key_value               show_type;			// 可显示条件
};

// 请求购买礼包
struct U2GS_open_server_buy ->
{
	uint32		ac_id;		// 活动id
	uint32		goods_id;	// 商品id
};

// 请求购买礼包返回
struct GS2U_open_server_buy_ret <-
{
	uint32		err_code;			// 错误码
	uint32		ac_id;				// 活动id
	uint32		goods_id;		   // 商品id
};
//-------------- 开服礼包end -------------

// 活动基础数据
struct activeBaseInfo
{
	uint32		id;				// 活动ID
	uint32      group_id        // 组id(组内第一个活动的id)
	uint16      group_index;    // 分组顺序
	string      group_name; 	// 所属组名
	string 		name;			// 活动名称
	string		title;			// 活动副标题
	string		describe;		// 活动公告内容
	string		describe_big;		// 活动公告内容
	string		pic;			// 背景图
	string		iconPic;		// 活动图标
	vector<uint32>	pic_list;	// 活动配置图标
	uint8   push_title;
	uint8		teamType;		// 活动分组
	string		teamName;		// 活动分组名
	uint8		type;			// 活动类型(1、条件达成类, 2、多倍奖励类, 3、限时购买类, 4、物品兑换类, 5、排行榜类型)
	uint16		detailedType;	// 详细类型（客户端显示图片用）
	uint32		startTime;		// 开始时间
	uint32		endTime;		// 结束时间
	string		banner_upleft;	// 左上banner
	string		banner_lowleft;	// 左下banner
	string		banner_upright;	// 右上banner
	string		banner_lowright;// 右下banner
	vector<timeInterval> interval_list;	// 活动时间区间
	vector<uint64>	joinCustom;		// 参与条件([Type,MinLevel,MaxLevel] or [Type, MinVip, MaxVip] or [Type, MinBattleValue, MaxBattleValue] or [])
	vector<activityItem> activityList;	// 活动项目列表(条件达成类)
	vector<ac_ticket> ticket_list;	// 门票类活动项目列表(条件达成类加强)
	vector<multiItem> multiItemList;	// 多倍奖励列表(多倍奖励类)
	vector<limitShop>	shop_list;		// 限时购买列表(限时购买类)
	vector<exchangeItem> exchange_list;	// 物品兑换列表(物品兑换类)
	vector<dungeonSales> dungeon_list;	// 副本类型列表(限时副本类)
	vector<bossSales> bossList;		    // 四海BOSS列表(四海BOSS类)
	vector<demonTimeReset> timeResetList;// Boss刷新CD列表(本服天魔Boss刷新CD修正类)
	vector<discount_goods>	dcs_shop;	// 满减商店列表
	vector<holiday_pay_cfg>    pay_list;    // 节日工资数据列表
	glory_badge_info      glory_badge;  // 荣耀龙徽
};

// 登陆服发往游戏服数据
struct LS2GS_ActivityBaseInfo__2429 <->
{
	uint32		id;				// 活动ID
	string 		name;			// 活动名称
	string		title;			// 活动副标题
	string		describe;		// 活动公告内容
	string		pic;			// 背景图
	uint8		type;			// 活动类型(1、条件达成类, 2、多倍奖励类, 3、限时购买类)
	uint32		show_start;		// 图标开始显示时间
	uint32		show_end;		// 图标结束显示时间
	uint32		startTime;		// 开始时间
	uint32		endTime;		// 结束时间
	vector<int>	joinCustom;		// 参与条件([Type,MinLevel,MaxLevel] or [Type,RechargeTarge] or [Type] or [])
	vector<activityItem> activityList;	// 活动项目列表(条件达成类)
	vector<multiItem> multiItemList;	// 多倍奖励列表(多倍奖励类)
	vector<limitShop>	shop_list;		// 限时购买列表(限时购买类)
};

// 发送活动基础数据到客户端
struct GS2U_sendActivityBaseList__2430 <-
{
	uint8		teamType;		// 活动分组
	vector<activeBaseInfo> activity_list;
};

// 客户端请求互动基础数据
struct U2GS_requestActivityBaseinfo__2431 ->
{
	uint8		teamType;		// 活动分组
};

// 活动条件列表
struct commitCondition
{
	uint32		conditionID;	// 条件ID
	uint64		curNum;			// 当前值
	uint64		param;			// 参数1(物品类型时：物品ID)
};

// 达成项目列表
struct reachedInfo
{
	uint32		id;				// 活动项
	uint32		getRewardTimes;	// 领奖次数
};


// 领奖功能次数列表
struct multiFunc
{
	uint32		funcID;			// 功能ID
	uint32		getTimes;		// 次数
};
// 多倍奖励领奖列表
struct playerMultiInfo
{
	uint32		id;				// 活动项
	vector<multiFunc> func_list;	// 参加过的活动的功能列表
};

struct playerlimitItem
{
	uint32		sellID;			// 销售ID
	uint16		buyTimes;		// 购买次数
	uint16		serverTimes;	// 全服购买次数
};
// 玩家限时商城活动
struct playerLimitShop
{
	uint32		shopID;			// 商城ID
	vector<playerlimitItem>	buy_list;	// 购买次数
};

// 玩家物品兑换活动数据
struct playerExchangeInfo
{
	uint32		changeID;		// 兑换ID
	uint16		changeTimes;	// 兑换次数 
	uint16		serverTimes;	// 全服兑换次数
};

// 庆典累充数据
struct playerRecharAct
{
	uint32		id;
	uint8		isAward;	// 是否领奖（0：未领奖 1：已领奖）
};

struct playerFunds
{
	uint8		index;				// 档次索引
	uint8		buy_funds;			// 是否购买基金（1是 0否）
	uint16		award_num;			// 已领取次数
	uint8		get_award;			// 当日是否已经领取（1是 0否）
};
struct PlayerWeeklyReward
{
	uint8		curDay;				// 当前第几天
	vector<uint8>	day_list;		// 已经领取的天数
};

// 活动玩家门票购买记录
struct player_ac_ticket
{
	uint32	id;				// 门票活动的Id switchBase里面的Id
	uint32	n_id;				// 门票活动的Id N表Id
	bool    is_buy;   // 是否购买
};

struct PlayerFireworks
{
	uint32				total_times;		// 总抽奖次数
	vector<uint32>		cond_award_list;	// 已领取的达成奖励[index,...]
};

// 龙神777数据
struct IndexMap
{
	uint32	id1;
	uint32	id2;
};
struct Player777
{
	uint32				total_times;		// 总重置次数
	uint32				free_reset_times;	// 免费重置次数
	vector<IndexMap>	select_list;		// [{表现id, 奖励id}, ...]
	vector<uint32>		award_spec_list;	// 已领取的大奖
};

// 节日签到
struct f_sign_key
{
	uint32	id;		// 签到id
	uint32	day;	// 天数
};
struct f_sign_cost
{
	uint32					day;	// 天数
	vector<CoinBaseInfo>	coin;	// 消耗
};
struct player_f_sign
{
	vector<key_value>	recharge_list;	// 充值记录 [{天数,数量}]
	vector<f_sign_cost>	cost_list;		// 消耗记录
	vector<f_sign_key>	reach_normal;	// 普通签到达成列表
	vector<f_sign_key>	award_normal;	// 普通签到领奖列表
	vector<f_sign_key>	reach_total;	// 累计签到达成列表
	vector<f_sign_key>	award_total;	// 累计签到领奖列表
	vector<uint32>		reach_final;	// 大奖达成列表
	vector<uint32>		award_final;	// 大奖领取列表
};

// 神秘商店
struct mystery_item
{
	uint8		type;			// 类型 1道具，2货币，3装备
	uint32		id;				// 奖励id
	uint8		chara;			// 品质
	uint8		star;			// 星级
	uint8		bind;			// 是否绑定
	uint32		num;			// 数量
	uint8		vfx;			// 特效
};
struct mystery_discount
{
	uint8		is_active_discount;	// 是否有激活折扣
	uint64      d1;                // 默认折扣
	uint64      d2;               // 默认折扣
};
struct mystery_goods
{
    uint32      pool_id;                // 商品库id
	uint32		goods_id;				// 商品id
	uint8		quality;				// 是否精品
	uint8		limit_type;				// 限购类型
	uint32		limit_p1;				// 限购参数1
	uint32		limit_p2;				// 限购参数2
	vector<key_value>   cost_list       // 消耗
	vector<mystery_item>	items;		// 出售物品
	mystery_discount	discount;		// 折扣
	uint8       is_min_price;           // 是否显示最低价
};
struct mystery_cost
{
	uint32      programme;    // 方案
    uint8       type;   // 消耗类型
    uint32      id;     // 消耗的id
    uint32      number; // 消耗的数量
};
struct mystery_shop
{
	uint32		shop_id;					// 商店id
	uint32		auto_refresh_interval;		// 自动刷新间隔
	uint32		free_refresh_max;			// 最大免费刷新次数
	uint8		refresh_warn;			// 刷新警告
	vector<mystery_cost>	refresh_cost;	// 刷新消耗
	vector<mystery_goods>	quality_goods;	// 精品列表
};
struct  mystery_buy_info
{
        uint32      pool_id;                // 商品库id
    	uint32		goods_id;				// 商品id
    	uint32      times;                  // 购买次数
};

struct player_mystery
{
	uint32		shop_id;			// 商店id
	uint32		auto_refresh_time;	// 上次自动刷新时间
	uint32		free_refresh_times;	// 免费刷新次数
	uint32		cost_refresh_times;	// 付费刷新次数
	uint32		cur_turns;			// 当前商品轮次
	vector<mystery_goods>	goods_list;	// 商品列表
	vector<mystery_buy_info>	buy_list1;	// 购买信息
	vector<uint8>	        buy_list2;   // 当前购买信息
};

// 龙神秘宝
struct player_treasure
{
	vector<uint32>		select_ids;		// 选择的奖励
	vector<key_value>	draw_ids;		// 抽到的奖励
	vector<uint32>		times_rewards;	// 领取的次数奖励
};

//--------------------------限时直购 start------------------------
// 限时直购
struct limit_direct_buy
{
	uint16          goods_id;   		// 商品id
	string          name;
	uint8           character;          //展示品质
	vector<indexTypeItem> item_list;
	key_value curr_type;
	string          direct_purchase;
	key_2value		limit;
	key_value       condition_type;
};

struct limit_direct_player
{
	uint16          goods_id;      // 商品id
	uint16          daily_times;   // 今日购买次数
	uint16          total_times;   // 总购买次数
};

// 购买
struct U2GS_limit_direct_buy ->
{
	uint32        ac_id; 
	uint16        goods_id;      // 商品id      
};

// 购买返回
struct GS2U_limit_direct_buy_ret <-
{
	uint32        error_code; 
	uint32        ac_id; 
	uint16        goods_id;      // 商品id   
};
//--------------------------限时直购 end------------------------

// 活动玩家数据
struct activePlayerInfo
{
	uint32		id;				// 活动ID
	uint32		recharge;		// 活动期间充值金额
	uint32      consume;        // 活动期间消费金额
	vector<commitCondition>	commit_list;	// 活动条件列表
	vector<player_ac_ticket>	ticket_list;	// 门票活动是否购买列表
	vector<reachedInfo>	reached_list;	// 达成项目列表
	vector<playerMultiInfo> multi_list;	// 多倍奖励列表(多倍奖励类)
	vector<playerLimitShop>	shop_list;	// 限时购买列表(限时购买类)
	vector<playerExchangeInfo> change_list; // 物品兑换列表(物品兑换类)
	vector<playerRecharAct> recharge_list;	// 庆典累充数据(庆典累充)
	uint16		lotteryNum;			// 庆典抽奖次数（庆典抽奖）
	vector<playerFunds> funds_list;	// 大圣基金进度
	PlayerWeeklyReward	playerWeeklyReward;	// 特权周卡
	vector<dcs_goods>		dcs_shop;	// 折扣商店数据
	Player777	player777;				// 龙神777
	player_f_sign	player_sign;		// 节日签到
	vector<player_mystery>	player_mystery;	// 神秘商店
	uint16      first_reset;             // 首充重置次数
	PlayerFireworks playerFireworks;    // 新版烟花盛典
	vector<holiday_pay>     holiday_pay_list;  // 节日工资
	key_value        lucky_cat_times; // 招财猫
	glory_badge_player   player_glory_badge;  //荣耀龙徽
	vector<int32>     change_package;  // 换包奖励
	player_treasure		player_treasure;	// 龙神秘宝
	vector<key_value>   player_open_gift; //  开服礼包{id,times}
	uint16 player_wheel_luck_one;		// 幸运转盘已抽奖次数
	key_value player_wheel_luck_two;   //  {已抽奖次数，已用幸运值挡位}
	vector<limit_direct_player>     limit_direct_buy;  // 限时直购
};

// 运营活动买门票
struct U2GS_AcTicketBuy ->
{
  uint32	id;				// 门票活动的Id switchBase里面的Id
  uint32	n_id;				// 门票活动的Id N表Id
};
// 玩家领奖
struct	GS2U_AcTicketBuyRet <-
{
  uint32  err_code;
  uint32	id;				// 门票活动的Id switchBase里面的Id
  uint32	n_id;			// 门票活动的Id N表Id
};

// 发送玩家活动数据到客户端
struct GS2U_sendActivityPlayerList__2432 <-
{
	vector<activePlayerInfo> activityInfo_list;
};

// 玩家请求自己活动的数据
struct U2GS_getActivityPlayerInfo__2433 ->
{

};


// 玩家领奖
struct	U2GS_getConditionReward__2434 ->
{
	uint32		id;				// 活动ID
	uint32		funcID;			// 活动项
	uint16		index;			// 奖励索引
};

// 领奖反馈
struct GS2U_getConditionRewardResult__2435 <-
{
	uint32		id;				// 活动ID
	uint32		funcID;			// 活动项
	uint16		index;			// 奖励索引
	uint32		result;			// 反馈ID
};

struct U2GS_GetAllConditionReward ->
{
	uint32	ac_id;		// 活动id
	uint8	type;		// 1-49枚举，0-其他
};

struct GS2U_GetAllConditionRewardRet <-
{
	uint32	err_code;	// 错误码
	uint32	ac_id;		// 活动id
	uint32	score;		// 获得的积分
};

// 购买限时商城物品
struct	U2GS_buyActivityItem__2436 ->
{
	uint32		id;				// 活动ID
	uint32		shopID;			// 商城ID
	uint32		sellID;			// 销售ID
	uint16		buyTimes;		// 购买次数
};

// 购买限时商城物品 反馈
struct	GS2U_buyActivityItemResult__2437 <-
{
	uint32		id;				// 活动ID
	uint32		shopID;			// 商城ID
	uint32		sellID;			// 销售ID
	uint16		buyTimes;		// 购买次数
	uint32		result;			// 反馈ID
};

struct GS2U_WorshipPlayerResult__2438 <-
{
	uint64	targetID;	// 被膜拜玩家ID
	uint32	result;		//  膜拜玩家返回
	vector<CoinInfo> coin_List;	// 货币列表
	vector<itemInfo> item_list;	//奖励的道具
};

// 客户端发送语音聊天缓存
struct U2GS_VoiceChatCache__2439 ->
{
    uint32  voiceCacheID;       // 语音缓存ID，客户端自己定义
    binary  voiceContent;       // 语音内容
};

// 英雄调整等级
struct U2GS_HeroAdjustLevel__2440 ->
{
    uint64  heroID;         // 英雄ID
};
// 玩家请求单个活动的数据
struct U2GS_getPlayerActivityData__2443 ->
{
	uint32	id;		// 活动ID
};

// 返回玩家请求的单个活动数据
struct GS2U_updatePlayerActivityData__2444 <-
{
	uint32		id;				// 活动ID
	uint32		recharge;		// 活动期间充值金额
	uint32      consume;        // 活动期间消费金额
	vector<commitCondition>	commit_list;	// 活动条件列表
	vector<player_ac_ticket>	ticket_list;	// 门票活动是否购买列表
	vector<reachedInfo>	reached_list;	// 达成项目列表
	vector<playerMultiInfo> multi_list;	// 多倍奖励列表(多倍奖励类)
	vector<playerLimitShop>	shop_list;	// 限时购买列表(限时购买类)
	vector<playerExchangeInfo> change_list; // 物品兑换列表(物品兑换类)
	PlayerWeeklyReward	playerWeeklyReward;	// 特权周卡
	vector<dcs_goods>		dcs_shop;	// 折扣商店数据
	Player777	player777;				// 龙神777
	player_f_sign	player_sign;		// 节日签到
	vector<player_mystery>	player_mystery;	// 神秘商店
	PlayerFireworks playerFireworks;    // 新版烟花盛典
	uint16      first_reset;             // 首充重置次数
	vector<holiday_pay>     holiday_pay_list;  // 节日工资
	key_value        lucky_cat_times; // 招财猫
	glory_badge_player  player_glory_badge;   // 荣耀龙徽
	vector<int32>     change_package;  // 换包奖励
	player_treasure		player_treasure;	// 龙神秘宝
	vector<key_value>   player_open_gift; //  开服礼包{id,times}
	uint16 player_wheel_luck_one;		// 幸运转盘已抽奖次数
	key_value player_wheel_luck_two;   //  {已抽奖次数，累计幸运值}
	vector<limit_direct_player>     limit_direct_buy;  // 限时直购
};
//----------------------------野外BOSS----------------------------------
//进入野外BOSS副本
struct U2GS_EnterWildBOSS__2448->
{
	uint				mapDataID;//地图ID
	uint8				lineNum;//几线，如果是0则表示不是切换到指定线
};
//获取野外地图每条线的信息
struct U2GS_GetDungeonLineInfo__2450->
{
	uint				mapDataID;//地图ID
};
//----------------------------野外BOSS END----------------------------------

// 装备继承
struct U2GS_EquipInheritPreview__2458 ->
{
    uint64  restoreEquipmentID;     // 重生装备ID
    uint64  equipmentID;		    // 继承装备ID
};
struct GS2U_EquipInheritPreview__2459 <-
{
    uint64  restoreEquipmentID;     // 重生装备ID
    uint64  equipmentID;		    // 继承装备ID
    uint32  errorCode;              // 0-成功，非0-错误原因
    uint32  decGold;                // 成功后有意义，消耗元宝
    uint32  newLevel;				// 成功后有意义，继承的强化等级
    uint32  newNumb;				// 成功后有意义，继承的洗练次数
    uint32  newQuality;				// 成功后有意义，继承的精练等级
    uint32  addMoney;				// 成功后有意义，返还的铜币
    uint32  addEquipExp;            // 成功后有意义，返还的装备经验
    vector<AddItem>  addItemList;   // 成功后有意义，返还的道具列表
};
struct U2GS_EquipInherit__2460 ->
{
    uint64  restoreEquipmentID;     // 重生装备ID
    uint64  equipmentID;		    // 继承装备ID
};
struct GS2U_EquipInherit__2461 <-
{
    uint64  restoreEquipmentID;     // 重生装备ID
    uint64  equipmentID;		    // 继承装备ID
    uint32  errorCode;              // 0-成功，非0-错误原因
    uint32  addMoney;				// 成功后有意义，返还的铜币
    uint32  addEquipExp;            // 成功后有意义，返还的装备经验
    vector<AddItem>  addItemList;   // 成功后有意义，返还的道具列表
};

//----------------------------野外BOSS1----------------------------------
//复活
struct U2GS_PlayerReborn__2465 ->
{
	uint8				reviveID;//复活ID
};
struct GS2U_PlayerRebornResult__2466 <-
{
	uint32				result;//0表示成功，其他为失败原因
	uint64				playerID;//玩家ID
	float				x;//新坐标
	float				y;//新坐标
	uint8				reviveID;//复活ID
};
//----------------------------野外BOSS1 END----------------------------------
// 绑定手机
struct U2GS_bindAccount__2467 ->
{
	string	token;
	string	tell;
	string	content;
	string	verifyid;
};

// 绑定手机反馈
struct GS2U_BindAccountResult__2468 <-
{
	uint32	result;
	vector<CoinInfo> coinList;
	vector<itemInfo> itemList;
};


// 玩家获得新称号
struct GS2U_getNewtitle__2518 <-
{
	uint32	titleID;				//称号ID
};

//瞬移
struct U2GS_FlyMoveTo__2519 ->
{
	uint64 id;                     	//移动的目标ID
	float posX;						//移动的目标点X
	float posY;						//移动的目标点Y	
};

struct GS2U_FlyMoveTo__2520 <-
{
	uint64 id;                    //移动的目标ID
	float	posX;				//移动的目标点X
	float	posY;				//移动的目标点Y
};

// 客户端请求领奖
struct U2GS_getNextDayAward__2521 ->
{
	uint32		id;		// 奖励配置ID
};

// 领奖反馈
struct GS2U_getNextDayAwardResult__2522 <-
{
	uint32		id;		// 奖励配置ID
	uint32  	errorCode;      // 0-成功，非0-错误原因
};

// 请求当前执行奖励数据
struct U2GS_getCurNextDayAwardPro__2523 ->
{
	
};

// 发送当前奖励数据
struct GS2U_sendCurNexDayAwardPro__2524 <-
{
	uint32		id;		// 奖励配置ID
	uint32		countDownTime;	// 倒计时
	uint8		isGet;		// 是否领奖（0：未领奖 1：一领奖）
};

//--------------------------------------player.h END----------------------------------------------2999
//--------------------------------------battle.h----------------------------------------------
//----------------------------副本----------------------------------

// 踢出副本保护
struct GS2U_kick_out_player <-
{
	uint16	mapAi;
};

//单独获取关卡信息
struct U2GS_ReqDungeonInfo__3000 ->
{
	uint				dungeonID;//关卡ID
}
//与DungeonInfo一致
struct GS2U_DungeonInfo__3001 <-
{
	uint				dungeonID;//关卡ID
	int8				fightCount;//组已挑战次数
	uint32				bestTime;//最佳时间记录
	uint8				resetCount;//该关卡已重置次数(组ID)
	uint16				groupFightID;//组ID
	uint8				selfFightCount;//该关卡今日已挑战（通关）次数
	uint8				resetSelfFightCount;//今日重置 该关卡今日已挑战（通关）次数 的次数
	uint16				buyFightCount;//购买的挑战次数
	uint8				buyFightCountDay;//今日购买的额次数
	vector<uint8>		starsIndexList;//该关卡 历史最高评价序号列表
};

struct PlayerRankInfo
{
	uint8				rank;//排名
	uint64				playerID;//玩家ID
	string				name;// 玩家名字
	uint32				recordTime;//最佳时间
	uint32				career;//职业
	uint32				fateLevel;//命格
	uint32				headID;             // 16、头像ID
};
//主动请求关卡征服
struct DungeonConqInfo
{
	uint				dungeonID;//关卡ID
	uint8				conqCount;//已手动通关次数(征服次数)
	vector<uint8>				conqAwardList;//征服奖励已领取的奖励序号
};
struct U2GS_GetDungeonConqInfo__3004 ->
{
	vector<uint>		dungeonIDList;
};
struct GS2U_DungeonConqInfo__3005 <-
{
	vector<DungeonConqInfo>	info_list;
};
//领取征服奖励
struct U2GS_GainConqAward__3006 ->
{
	uint				dungeonID;//关卡ID
	uint8				conqIndex;//奖励序号
};
struct DungeonInfo
{
	uint				dungeonID;//关卡ID
	int8				fightCount;//组已挑战次数
	uint32				bestTime;//最佳时间记录
	uint8				resetCount;//该关卡已重置次数(组ID)
	uint16				groupFightID;//组ID
	uint8				selfFightCount;//该关卡今日已挑战（通关）次数
	uint8				resetSelfFightCount;//今日重置 该关卡今日已挑战（通关）次数 的次数
	uint16				buyFightCount;//购买的挑战次数
	uint8				buyFightCountDay;//今日购买的额次数
	vector<uint8>		starsIndexList;//该关卡 历史最高评价序号列表
	uint8               freeCount; // 免费次数
};

//重置公共挑战次数
struct U2GS_ResetGroupFightCount__3009 ->
{
	uint				dungeonID;//关卡ID
};
struct GS2U_ResetGroupFightCountResult__3010 <-
{
	uint32				result;
};

//购买副本次数
struct U2GS_BuyDungeonCount__3011 ->
{
	uint				dungeonID;
	uint32              count;			      // 购买次数
};
struct GS2U_BuyDungeonCountResult__3012 <-
{
	uint32  result; 		// 0表示成功，或者其他错误码
	int8  curFightCount;	//已经挑战次数
	uint8  maxFightCount;	//总次数
};

//-------------主线副本
//获得所有已通关的最后几章主线副本信息
struct U2GS_GetMainCopyMapInfo__3013 ->
{
};

struct ChapterInfo//用于下面的结构体
{
	uint16				chapterID;//章节ID
	uint8				starNum;//该章节已获得的星数
	vector<uint8>		boxIndexList;//已领取的该章节宝箱
	vector<DungeonInfo> dungeonInfoList;
	vector<DungeonConqInfo>	dungeonConqList;
};

struct GS2U_MainDungeonInfo__3014 <-//用于闯过一个关卡后，后台给前台推最新关卡信息
{
	uint				dungeonID;//关卡ID
	uint8				fightCount;//该关卡今日已挑战（通关）次数   公共次数
	uint32				bestTime;//最佳时间记录
};

struct GS2U_GetMainCopyMapInfo__3015 <-
{
	vector<ChapterInfo>	chapterInfoList;
};
//主动请求主线副本信息
struct U2GS_GetSpecMainCopyMapInfo__3016 ->
{
	vector<uint16>		chapterIDList;
};
//进入副本(走进入地图那一套)
struct U2GS_EnterCopyMap__3017 ->
{
	uint dungeonID;//关卡ID
	string  reasonContent;         //传送原因
};
//领取章节宝箱奖励
struct U2GS_OpenChapterBox__3018 ->
{
	uint8				chapterID;//章节ID
	uint8				index;//第几个宝箱
};
//扫荡关卡
struct U2GS_MopUpCopyMap__3019->
{
	uint				dungeonID;//关卡ID
};

struct killerInfo
{
	uint64		killerID;		// 击杀者ID
	string		killerName;		// 击杀者名字
	uint32		fateLevel;		// 命格等级
	uint32		bossID;			// Boss ID 
	uint32		time;			// 击杀时间
	uint32		itemID;			// 获得物品ID	
	uint64		itemDBID;		// 物品实例ID
	uint8		character;		// 品质
	uint8		is_top;			// 是否置顶 1：置顶 0：不置顶
	string      serverName;     //服务器名字
};

//-------------主线副本 END

//进入副本(走进入地图那一套)
struct U2GS_EnterArtiCopyMap__3022 ->
{
	uint dungeonID;//关卡ID
};
//组队副本
//获取可邀请好友列表
struct U2GS_GetTeamCopyMapFriends__3039->
{
};
//----------------------------大闹天宫----------------------------------

//获取星数排行榜
struct U2GS_GetDNTGRankInfo__3052->
{
};
struct GS2U_GetDNTGRankInfoResult__3053<-
{
	uint16				maxStars;//自己的历史最高星数
	vector<topPlayer> rankList;
};

//----------------------------大闹天宫 END----------------------------------
//----------------------------竞技场----------------------------------
//获取竞技场信息
struct U2GS_GetArenaPlayerInfo__3059->
{
};

//获取排行榜信息
struct U2GS_GetArenaRankInfo__3060->
{
};

//挑战
struct U2GS_EnterArena__3061->
{
	uint16				rankNumber;//挑战对象 这里发送位置Rank
};

//挑战BOSS
struct U2GS_FightArenaBoss__3062->
{
};

//----------------------------竞技场 END----------------------------------
//----------------------------副本信息----------------------------------
//副本总怪物波数
struct GS2U_MonsterTotalWave__3063<-
{
	uint8				wave;
};
//当前死亡怪物波数
struct GS2U_MonsterDeadWave__3064<-
{
	uint8				wave;
};
//当前杀死地精数
struct GS2U_DeathGoblinNum <- 
{
	uint16			num;  	
};
//----------------------------副本信息 END----------------------------------
//----------------------------副本 END----------------------------------

//技能带的位置
struct ShiftSkillPos
{
	float	x;
	//目标Y坐标
	float	y;
};

struct C2S_PlayerUseShiftSkill__3066 ->
{
	//技能释放者Code
	uint64            code;
	//使用的技能ID
	uint			skillId;
	//消息序列号
	uint 			serial;
	//目标Code列表
	vector<uint64>	targetCodeList;
	//技能施放的坐标
	vector<ShiftSkillPos> posList;
	float angleX;					//坐标点X方向
	float angleY;					//坐标点Y方向
};

//增援技能
struct C2GS_PlayerUseShiftSkillExt__3069 ->
{
	//释放者ID
	uint64            code;
	//技能类型ID
	uint			skillId;
	//技能实例ID
	uint 			serial;
	//目标列表
	vector<uint64>	targetCodeList;
	//冲刺坐标
	float	x;
	//目标Y坐标
	float	y;
	float angleX;					//坐标点X方向
	float angleY;					//坐标点Y方向
};
struct GS2C_PlayerUseShiftSkillExt__3070 <-
{
	//释放者ID
	uint64            code;
	//技能类型ID
	uint			skillId;
	//技能实例ID
	uint 			serial;
	//目标列表
	vector<uint64>	targetCodeList;
	//冲刺坐标
	float	x;
	//目标Y坐标
	float	y;
	float angleX;					//坐标点X方向
	float angleY;					//坐标点Y方向
};

//	对象死亡消息
struct GS2U_Dead__3073 <-
{
	//被攻击者
	uint64	deadActorCode;
	//被攻击角色
	uint64	deadRoleID;
	//攻击者
	uint64	killerCode;
	//攻击者角色
	uint64	killerRoleID;
    //攻击者名字
	string  killerName;
    //攻击者使用技能ID
	uint    skillID;
	//是否复活，0：死亡消失，1：死亡不消失
	int8 recover;
};

// 中断使用技能
struct GS2U_BreakSkill__3076 <-
{
	//使用者
	uint64 userCode;
	//技能ID
	uint skillId;
	//消息序列号
	uint serial;
	//错误类型	102003:系统异常,102004:技能不存在,102005：攻击者没学过此技能,102006:目标为空,102007：
	//技能自身CD不足,102008：消耗的能量不足,102009：攻击者死亡
	int error;
};
// 客户端请求战斗英雄队伍切换
struct U2GS_ChangeBattleHeroTeam__3079 ->
{
    uint64 id;              // 玩家ID、镜像玩家ID
};
struct GS2U_ChangeBattleHeroTeam__3080 <-
{
    uint64 id;              // 玩家ID、镜像玩家ID
  uint32 errorCode;         // 0-成功，非0-错误原因
  uint8 teamID;            // 成功后有意义，英雄队伍ID（1表示队伍一，2表示队伍二）
};

//对象生命值
struct ObjectHPSt
{
	uint64     			code;       //对象ID
    uint64  role_id;                        // 角色Id
	uint64				value;		//HP
};

struct GS2U_ObjectHP__3090 <-
{
	vector<ObjectHPSt> info_list; // 角色生命值列表
};

struct GS2U_SINGLE_ObjectHP <-
{
	uint64     			code;       //对象ID
    uint64  role_id;                        // 角色Id
	uint64				value;		//HP
};

// 对象护盾值
struct GS2U_ObjectShield <-
{
	uint64     		code;       //对象ID
	uint64				value;		//HP
};

// 对象圣甲值
struct GS2U_ObjectArmor <-
{
	uint64     		code;       //对象ID
	uint64			value;		//圣甲值
};

//对象魔力值
struct GS2U_ObjectMP__3091 <-
{
	uint64     			code;       //对象ID
	uint				value;		//MP
};

//对象霸体值
struct GS2U_ObjectSuperArmor__3092 <-
{
	uint64     			code;       //对象ID
	uint				value;		//SuperArmor
	uint8  				stat;       // 0：正常状态，1: 瞬间恢复，2：无敌，不减, 3:虚弱状态
};

//推送副本剩余时间
struct GS2U_CopyMapLeftTime__3097<-
{
	uint32				leftTime;
};

//B玩家 回复邀请
struct U2GS_AnswerFightRingInvite__3105->
{
	uint8				isAgree;//0不同意 1同意
	uint64     			playerID;//邀请玩家ID，即A玩家ID
};
//-----------------------副本进度---------------------------------
struct CopyMapProgressInfo
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint				dungeonID;//当前最大关卡ID(开启的关卡，不是打过的最大关卡，比如打过了第一关，开启了第二关，则发送第二关)
	uint				winDungeonID;//当前最大通关关卡ID(开启的关卡，不是打过的最大关卡，比如打过了第一关，开启了第二关，则发送第一关)
};
struct GS2U_CopyMapProgress__3108<-
{
	vector<CopyMapProgressInfo> infoList;
};
struct ActiveExtendFightCount
{
	uint8  type;				// 秘境类型
	uint8  maxFightCount;		// 最大挑战次数
	uint8  fightCount;			// 已使用挑战次数
	uint8  buyFightCountDay;//今日购买的额次数
}
struct GS2U_CopyMapFightCount__3109<-
{
	vector<ActiveExtendFightCount>	artiFightCountList;//神器副本剩余的进入次数
	uint8				enterCount;//组队副本剩余的进入次数
	uint8				assistantCount;//组队副本剩余协助次数
	uint8				activeCount;//活动副本剩余的次数
	uint8				coupleCount;//仙侣副本剩余的次数
	vector<ActiveExtendFightCount>  activeExtendFightCountList;		// 秘境试炼次数信息
};
//-----------------------副本进度 END---------------------------------
//神器副本
//获得已通关的神器关卡信息
struct U2GS_GetArtiDungeonInfo__3020->
{
};
struct GS2U_GetArtiDungeonInfoResult__3021<-
{
	vector<ActiveExtendFightCount>	enterCountList;//剩余的进入次数
	vector<DungeonInfo> dungeonInfoList;//神器副本关卡信息
	vector<killerInfo>	killerInfoList;			// 掉落历史记录列表
	uint8               quick_award_times;      // 快速收益次数
};
//-----------------------红点---------------------------------
struct ChapterRedPoint
{
	uint16				chapterID;//章节ID
	uint8				isRed;//章节是否红点 0:否 1:是
	uint8				isConqRed;//是否征服任务红点 0:否 1:是
	uint8				conqNum;//已完成的征服个数
};
//上线和打完主线副本，扫荡副本，领取奖励推送
struct GS2U_MainCopyMapTip__3110<-
{
	vector<ChapterRedPoint> info_list;
};
//-----------------------红点 END---------------------------------
//主线副本对引导特殊处理
//推送第一章章节宝箱和奖励宝箱的领取情况
struct GS2U_ChapterAndConqBox__3111<-
{
	uint8				isChapterBox;//章节宝箱 0:已领取（不可领取） 1:未领取（可领取）
	uint8				isConqBox;//奖励宝箱（征服奖励） 0:已领取（不可领取） 1:未领取（可领取）
};
//刷新竞技场对手列表
struct U2GS_ArenaRefreshTarget__3112 ->
{
};
//-----------------------主线副本 部分更改---------------------------------
//获取章节下所有的征服任务
struct U2GS_GetChapterConqInfo__3113 ->
{
	uint16				chapterID;//章节ID
};
struct GS2U_GetChapterConqInfoResult__3114 <-
{
	vector<DungeonConqInfo>	info_list;
};
//获取章节下所有关卡的排名
struct U2GS_GetChapterRankInfo__3115 ->
{
	uint16				chapterID;//章节ID
};
struct ChapterRankInfo
{
	uint				dungeonID;//关卡ID
	vector<PlayerRankInfo>	playerRankInfoList;
};
struct GS2U_GetChapterRankInfoResult__3116 <-
{
	vector<ChapterRankInfo>	info_list;
};
struct U2GS_BuyMainMopUpValue__3117 ->
{
    uint32 count;			      // 购买次数
};
//重置主线副本今日挑战次数
struct U2GS_ResetMainFightCount__3118 ->
{
	uint				dungeonID;//关卡ID
};
struct GS2U_ResetMainFightCountResult__3119 <-
{
	uint32				errorCode;// 0-成功，非0-错误原因
};
//-----------------------主线副本 部分更改 END---------------------------------
//---------------------------------竞技场 部分修改-------------------------------------
struct U2GS_MopUpArena__3120 ->
{
	uint16				rankNumber;//挑战对象 这里发送位置Rank
};
//---------------------------------竞技场 部分修改 END-------------------------------------
//---------------------------------副本挑战中，评星条件值同步显示-------------------------------------
struct GS2U_CopyMapStarCondition__3121 <-
{
	uint8				conditionIndex;//评星序号
	uint8				newValue;//最新值
};
//---------------------------------副本挑战中，评星条件值同步显示 END-------------------------------------

struct GS2U_BuyMainMopUpValueResult__3124<-
{
    uint32				result;       //0表示操作成功，其他表示错误原因
};


//组队副本获取镜像
struct U2GS_TeamCopyMapMirror__3127->
{
	uint32				teamDungeonID;//组队副本ID
};
//购买比武令（比武争斗值）
struct U2GS_BuyFightValue__3131 ->
{
    uint8 count;			      // 购买次数
};
struct GS2U_BuyFightValueResult__3132<-
{
    uint32				result;       //0表示操作成功，其他表示错误原因
};
//可邀请人员结构体
struct InvitePlayerInfo
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32	career;		//职业
	uint32 	fateLevel;  //命格等级
	uint32 	headID;             //头像ID
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//仙盟ID
	string	guildName;	//仙盟名称
	uint32	guildRank;	//仙盟职位
	uint8	state;//可邀请状态 1：可邀请。2：不在线。3：副本未开启
}
//主线关卡征服任务情况，引导用
struct GS2U_MainCopyMapForGuide__3137<-
{
	uint32				dungeonID;//副本ID
	uint8				conqState;//0:未达到领取条件 1:可以领取 2:已经领取
};
//---------------------精英副本----------------------
//获得已通关的精英关卡信息
struct U2GS_GetExcellenceDungeonInfo__3138->
{
};

struct GS2U_GetExcellenceDungeonInfoResult__3139<-
{
	vector<DungeonInfo> dungeonInfoList;//精英副本关卡信息
	vector<DungeonConqInfo>	dungeonConqList;
};
//进入副本(走进入地图那一套)
struct U2GS_EnterExceCopyMap__3140 ->
{
	uint dungeonID;//关卡ID
};
struct GS2U_ExceRedPoint__3141<-
{
	uint8				isRed;//是否红点 0:否 1:是
};
//---------------------精英副本 END----------------------
//---------------------单人副本----------------------
struct AdditionStar
{
	uint8				addType;
	uint				addValue;
};
/*
验证数据类型checkType枚举
1:挑战花费的时间
2:造成的总伤害
3:击杀的怪物数量
*/
struct CheckData
{
	uint8				checkType;
	uint64				checkValue;
};

struct CheckData2
{
	uint64              role_id;
	uint64				maxDamage;	//单次最大伤害
	vector<BattleProp>	battlePropList;//新加属性验证
};
//请求结算
struct U2GS_RequestSettleAccounts__3142 ->
{
	uint8				settleType;//结算类型
	vector<AdditionStar>	info_list;//额外星数
	uint8				bagOrRewards;//0:显示结算界面，1:直接放入奖励中心
	uint8				isRewardCenter;//奖励中心是否同时通知 0:不通知，1:通知
	vector<CheckData>	check_list;//验证数据列表
	int					dungeon_id;//必须要发送
	uint64 				id; //进入副本时地图实例ID,避免玩家修改包
};
struct U2GS_RequestSettleAccounts2 ->
{
	vector<CheckData2>	check_list;//新加属性验证
};
//---------------------单人副本 END----------------------
//推送比武擂台进入对手匹配池
struct GS2U_FightRingEnterFightMatching__3143<-
{
};

//对象怒气值
struct ObjectRage
{
	uint64     			code;       //对象ID
	uint64              role_id;	//角色ID
	uint				value;		//怒气值
};
struct GS2U_ObjectRage__3144 <-
{
	vector<ObjectRage> info_list; // 角色怒气值列表
};

struct GS2U_Single_ObjectRage <-
{
	uint64     			code;       //对象ID
	uint64              role_id;	//角色ID
	uint				value;		//怒气值
};

struct role_skill_hit
{
    uint64  object_id;                      // 对象Id
    uint64  role_id;                        // 角色Id，非玩家对象：role_id=object_id
};

//技能加BUFF
struct  C2S_PlayerSkillBuff__3147 ->
{
	uint64           fromCode;
    uint64  from_role_id;
	uint			skillId;
	uint 			buffId;
	uint8			forceFlag; //1蓄力技，其他非蓄力技   
	vector<role_skill_hit>	targetCodeList;  //目标列表
};
//技能加BUFF
struct GS2U_PlayerSkillBuffRet <-
{
  uint 			buffId;
  uint32  err_code;
};
//技能触发技术
/*struct C2S_PlayerSkill_ActivateSkill__3150 ->
{
	//释放者ID
	uint64           fromCode;
	//技能实例ID
	uint			skillId;
};*/
// 镜像总波数
struct GS2U_MirrorTotalWave__3151<-
{
	uint8				wave
};
// 当前镜像死亡波数
struct GS2U_MirrorDeadWave__3152<-
{
	uint8				wave
};

//----------------------------领地占领1----------------------------------
struct ManorRift
{
	uint32 riftDataID;				//裂缝配置ID
	float posX;						//裂缝点X
	float posY;						//裂缝点Y
	uint8 state;					//状态：0:未激活 1:激活
};
//裂缝位置信息列表，进入地图推送
struct GS2U_ManorRiftList__3154<-
{
	vector<ManorRift>	riftList;
};

//----------------------------领地占领1 END----------------------------------
//--------------------------------------battle.h END----------------------------------------------
//--------------------------------------buff.h----------------------------------------------
//新加的BUFF
struct	GS2U_AddBuff__4000<-
{
	uint64	id;//唯一id
	uint64	actor_id;//被附加BUFF的对象ID
    uint64  actor_role_id;
	uint64	caster_id;//释放BUFF的对象ID
    uint64  caster_role_id;                        // 角色Id，非玩家对象：role_id=objectId
	int		buff_data_id;
	uint32	allValidTime;
	int8	remainTriggerCount;//BUFF剩余触发次数
	uint16	layoutNum;			//buff层数
	uint8   is_pause;          // 是否暂停
};

//BUFF次数变化时
struct	GS2U_UpdateBuff__4001<-
{
	uint64	id;
	uint64	actor_id;//被附加BUFF的对象ID
    uint64  actor_role_id;
	uint64	caster_id;//释放BUFF的对象ID
    uint64  caster_role_id;                        // 角色Id，非玩家对象：role_id=objectId
	int		buff_data_id;
	uint32	allValidTime;
	int8	remainTriggerCount;//BUFF剩余触发次数
	uint16	layoutNum;			//buff层数
	uint8   is_pause;          // 是否暂停
};

struct  ObjectBuff
{
	uint64	id;
	uint64	caster_id;//释放BUFF的对象ID
    uint64  caster_role_id;                        // 角色Id，非玩家对象：role_id=objectId
	int		buff_data_id;//BUFF的配置表ID
	uint32	allValidTime;//BUFF总时长
	int8	remainTriggerCount;//BUFF剩余触发次数
	uint16	layoutNum;			//buff层数
	uint8   is_pause;          // 是否暂停
};

struct  ObjectBuffInfo
{
	uint64	objectId; //对象id
    uint64  role_id;
	vector<ObjectBuff> buffs; //对象的buff列表
};

//上线推送
struct GS2U_BuffList__4002<-
{
	vector<ObjectBuffInfo>	buffList;
};

//BUFF移除
struct	GS2U_DelBuff__4003<-
{
	uint64	id;
	uint64	actor_id;
    uint64  actor_role_id;
	uint64	caster_id;//释放BUFF的对象ID
	int		buff_data_id;
};
//--------------------------------------buff.h END----------------------------------------------
//--------------------------------------friend.h----------------------------------------------
// 玩家信息
struct friendsInfo
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32	career;		//职业
	uint8	sex;		// 性别，0-男，1-女
	uint32 	fateLevel;  // 14、命格等级
	uint32 	headID;             // 16、头像ID
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//帮派ID
	string	guildName;	//帮派名称
	uint32	offlineTime;	//离线时间（0：即为在线，>0：离线）
	uint8	isOpenHome;	//是否开启家园（1：开启 0：未开启）
	uint8	isCatch;	//是否捉虫（1：已捉虫 0：未捉虫）
	uint8	isGive;		// 是否赠送耐力（0：未赠送 1：已赠送）
	uint16	intimacyLevel;	// 亲密度等级
	uint32	intimacy;	// 亲密度
	uint8	isSingle;	// 是否单身（1：是，0 不是）
	uint32	flowerIntimacy;	// 送花亲密度
	uint32	frame;  	// 头像框
	uint32  nationality_id; // 区域id
};
// 好友信息
struct GS2U_FriendsInfo__5000 <-
{
	vector<friendsInfo> info_list;
};
//黑名单信息
struct blackListInfo
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32	career;		//职业
	uint8	sex;		// 性别，0-男，1-女
	uint32 	fateLevel;  // 14、命格等级
	uint32 	headID;             // 16、头像ID
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//帮派ID
	string	guildName;	//帮派名称
	uint32	offlineTime;	//下线时间（0：即为在线，>0：离线）
};
//黑名单列表
struct GS2U_blackListInfo__5001 <-
{
	vector<blackListInfo> info_list;
};
//好友申请信息
struct inviteListInfo
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32	career;		//职业
	uint8	sex;		// 性别
	uint32 	fateLevel;  // 14、命格等级
	uint32 	headID;             // 16、头像ID
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//帮派ID
	string	guildName;	//帮派名称
	uint32	offlineTime;	//下线时间（0：即为在线，>0：离线）
	uint32	inviteTime;	//邀请的时间
	uint32  nationality_id; // 区域id
};
// 邀请好友
struct GS2U_InviteFriend__5002 <-
{
	vector<inviteListInfo> info_list;
};
struct U2GS_getInviteFriend__5003 ->
{
};
// 回复好友邀请 发送给玩家自己的线程
struct U2GS_ReplyInvite__5004 ->
{
	uint64	playerID;	// 邀请玩家ID
	uint8	isAgree;	// 是否同意
};
//通过玩家ID请求添加好友申请
struct U2GS_AddFriendByID__5005 ->
{
	uint64	playerID;	//玩家ID
};
//通过玩家名请求添加好友申请
struct U2GS_AddFriendByName__5006 ->
{
	string	playerName;	//玩家名
};
//添加玩家到黑名单
struct U2GS_AddToBlack__5007 ->
{
	uint64	playerID;	//玩家ID
};
//删除黑名单
struct U2GS_DeleteBlack__5008 ->
{
	uint64 playerID;	//玩家ID
};
//删除好友
struct U2GS_DeleteFriend__5009 ->
{
	uint64 playerID;	// 玩家ID
};


//客户端发送的请求推荐玩家消息
struct U2GS_getRecomFrineds__5012 ->
{
};
// 推荐好友信息
struct recomInfo
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint8	sex;		// 性别，0-男，1-女
	uint32	career;		//职业
	uint32 	fateLevel;  // 14、命格等级
	uint32 	headID;             // 16、头像ID
	uint16	level;		//等级
	string  guild_name;	// 所在战盟
};
// 发送推荐好友信息
struct GS2U_RecomInfo__5013 <-
{
	vector<recomInfo> info_list;
};

//一键拒绝申请添加好友
struct U2GS_onekeyRefuse__5016 ->
{
};
//好友面板基础属性
struct GS2U_sendBaseInfo__5017 <-
{
	uint32	friendsCount;	//好友数量
	uint32	friendsMaxCount;//好友上限
	uint32	staminaCount;	//每日获得精力值数量
	uint32	staminaMaxCount;//每日获得精力值上限
};
//好友申请结果
struct GS2U_inviteMsg__5018 <-
{
	string	playerName;	//玩家名
	uint8	isSucc;		//是否成功(1:拒绝 0:同意)
};

// 玩家请求自己的好友信息
struct U2GS_requestFriendInfo__5019 ->
{

};

// 回复好友邀请反馈
struct GS2U_ReplyInviteResult__5020 <-
{
	uint64	playerID;	// 申请玩家ID
	string	playerName;	// 申请玩家名
	uint32	result;		// 返回
};

// 赠送耐力
struct U2GS_giveStamina__5021 ->
{
	uint64		targetID;		// 好友ID
	uint8		type;			// 类型（1：普通赠送 2：元宝赠送）
};

// 赠送耐力反馈
struct GS2U_giveStaminaResult__5022 <-
{
	uint64		targetID;		// 好友ID
	uint8		type;			// 类型（1：普通赠送 2：元宝赠送）
	uint32		result;			// 反馈
};

// 领取耐力
struct U2GS_getStamina__5023 ->
{
	uint64		targetID;		// 好友ID
	uint8		type;			// 类型（1：普通赠送 2：元宝赠送）
};

// 领取耐力反馈
struct GS2U_getStaminaResult__5024 <-
{
	uint64		targetID;		// 好友ID
	uint32		stamina;		// 领取的耐力值
	uint32		result;			// 反馈
};

// 一键领取
struct U2GS_oneKeyGetStamina__5025 ->
{

};

// 一键领取反馈
struct GS2U_oneKeyGetStamina__5026 <-
{
	uint32		stamina;		// 领取的耐力值
	uint32		result;			// 反馈
};

// 获取收到的礼物
struct U2GS_getGiftsReceived__5027 ->
{

};

struct giftsReceived
{
	uint64	playerID;	//好友ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint8	sex;		// 性别
	uint32	career;		//职业
	uint32 	fateLevel;  // 命格等级
	uint32 	headID;             // 16、头像ID
	uint16	level;		//等级
	uint64	fightPower;	//战斗力
	uint64	guildID;	//帮派ID
	string	guildName;	//帮派名称
	uint32	offlineTime;	//离线时间（0：即为在线，>0：离线）
	int		energy;	// 普通赠送耐力
	int		goldEnergy;	// 高级赠送耐力
	uint16	intimacyLevel;	// 亲密度等级
	uint32	intimacy;	// 亲密度
	uint32	giveEnergyTime;	// 赠送体力的时间
};

struct GS2U_sendGiftsReceived__5028 <-
{
	vector<giftsReceived> gift_list;
};
//--------------------------------------friend.h END----------------------------------------------

// 任务NPC
struct TaskNpc
{
    uint32  npcID;          // ID
    uint8    showState;     // 0隐藏 1显示 2归位
};

// 服务端发送所有任务NPC
struct GS2U_TaskNpcList__5569 <-
{
    vector<TaskNpc>  taskNpcList;   // 任务NPC列表
};

// 服务端发送单个任务NPC更新
struct GS2U_TaskNpcUpdate__5570 <-
{
    TaskNpc  taskNpc;               // 任务NPC
};

// 信息提示
struct MessageInfo
{
    uint16  type;       // 1-竞技场，2-宝物，3-妖魔来袭，4-比武擂台，5-矿脉, 6-领地战, 7-转盘活动 8-精彩活动，9-聊天免费次数
    string  message;
    uint32  time;		// 时间
};

// 信息提示
struct GS2U_MessageNotify__5572 <-
{
    vector<MessageInfo>  messageInfoList;       // 信息提示列表
};

// 客户端发送语音翻译消息
struct U2GS_VoiceTextInfo__5579 ->
{
    uint8   channelID;		    // 频道：2-仙盟、4-队伍、6-私聊
    uint64  receiverID;	        // 接收者ID，私聊时使用
    uint32  voiceTextID;        // 语音翻译ID
    string  voiceText;			// 语音翻译
};

// 服务端发送语音聊天消息
struct GS2U_VoiceTextInfo__5580 <-
{
    uint8   channelID;		// 频道：2-仙盟、4-队伍、6-私聊
    uint64  senderID;		// 发送者ID
    uint64  voiceKey;       // 语音标识符
    string  voiceText;      // 语音翻译
};

// 分屏公告
struct GS2U_channelNotice__5581 <-
{
	string	noticeIndex;	// 索引
	string	notice;			// 信息
	uint64	guildID;		// 仙盟ID
	uint32	bossLevel;		// boss等级
	vector<string>  textIDParam;    // 客户端文字ID参数
};

// 带前往坐标的公告
struct GS2U_channelPosNotice <-
{
	string	noticeIndex;	// 索引
	string	notice;			// 信息
	uint64	guildID;		// 仙盟ID
	vector<uint32>  posList; // {mapid,x,y,serverid}
};

// 特殊公告
struct GS2U_channelNoticeSpecial <-
{
	string	noticeIndex;	// 索引
	string	notice;			// 信息
	uint64	guildID;		// 仙盟ID
	vector<uint64>	special_args;		// 特殊参数 根据具体需求决定
};

// 发布心愿
struct U2GS_releaseWish__5582 ->
{
	vector<uint32> card_id_list; // 许愿的卡片列表 
};

// 发布心愿反馈
struct GS2U_releaseWishResult__5583 <-
{
	vector<uint32> card_id_list; // 许愿的卡片列表 
	uint32	result;			// 反馈 
};

// 通知所有人有新的许愿信息
struct GS2U_releaseNewWish__5584 <-
{
	vector<guildWishData> wish_list;
};

// 赠送碎片
struct U2GS_givePiece__5585 ->
{
	uint64	targetID;		// 赠送目标玩家ID
	uint32	card_id;		// 赠送卡片ID
	uint16	giveNum;		// 赠送数量
};

// 赠送反馈
struct GS2U_givePieceResult__5586 <-
{
	uint64	targetID;		// 赠送目标玩家ID
	uint32	card_id;		// 赠送卡片ID
	uint16	giveNum;		// 赠送数量
	uint32	result;			// 反馈ID
};

// 通知被赠送玩家赠送记录
struct GS2U_giveNewPiece__5587 <-
{
	vector<givePieceInfo> give_list;
};

// 发送请求赠送消息
struct U2GS_sendPieceMsg__5588 ->
{
};

// 发送请求赠送消息反馈
struct GS2U_sendPieceMsgResult__5589 <-
{
	uint32	result;			// 反馈ID
	uint32	sendTime;		// 再次发布消息时间
};

// 请求我被赠送的记录
struct U2GS_givePieceRecord ->
{
};
struct GS2U_givePieceRecordRet <-
{
	vector<givePieceInfo> give_list;
};
//------------------------世界BOSS------------------------------

//击杀奖励，弹窗推送
struct GS2U_KillWorldBossAward__5593 <-
{
	uint32				dataID;//被击杀的世界BOSS配置ID
	vector<CoinInfo>	coinList;//货币奖励列表
	vector<itemInfo>	item_info;	//奖励的道具
}
//------------------------世界BOSS END------------------------------

// 采集物
struct LookInfoCollection
{
    uint64  id;             // 实例ID
	  uint32  dataID;         // 配置ID
	  float   x;              // 坐标
	  float   y;
    float   rotw;           // 旋转坐标W
    uint8   state;			    // 状态：0-空闲、1-采集
    uint32  startTime;      // 开始采集时间，采集状态有效
    uint64  playerID;       // 采集玩家ID，采集状态有效
    string  playerName;     // 采集玩家名称，采集状态有效
    uint64  creatorID;      // 创造者ID，0表示没有
	uint64  owner_id;   // 可见玩家 深海角斗使用
};

// 多人采集物
struct LookInfoMultiCollection
{
      uint64                id;                     // 实例ID
      uint32                dataID;                 // 配置ID
      float                 x;                      // 坐标
      float                 y;        
      float                 rotw;                   // 旋转坐标W
      
      uint32                canCollectTimes;        // 可采集次数(剩余)
      vector<uint64>        pidList;                // 完成采集玩家的ID,用于客户端判断自己的采集次数
};
struct GS2U_CollectionList__5594 <-
{
    vector<LookInfoCollection>       collectionList;      // 视野范围内采集物列表
};

// 开始采集
struct U2GS_CollectStart__5595 ->
{
    uint64  collectionID;       // 采集物实例ID
};
struct GS2U_CollectStart__5596 <-
{
    uint64	playerID;
    uint64	roleID;
    uint64  collectionID;       // 采集物实例ID
    uint32  errorCode;          // 0-成功，非0-错误原因
};

// 停止采集
struct U2GS_CollectStop__5597 ->
{
    uint64  collectionID;       // 采集物实例ID
    bool    isSucceed;          // 是否采集成功
};
struct GS2U_CollectStop__5598 <-
{
    uint64	playerID;
    uint64  collectionID;       // 采集物实例ID
    uint32  errorCode;          // 0-成功，非0-错误原因
	bool    isSucceed;          // 是否采集成功
};

//------------------------组队房间------------------------------
//房间的大类型
// 1 世界房间
// 2 私密房间
// 3 仙盟房间

//房间的子类型(世界类型时用)
// 0 无限制
// 1 推荐战斗力
// 2 2倍推荐战斗力
// 3 我的战斗力

//房友自身状态
// 1 未准备状态
// 2 准备状态
// 3 忙碌状态

//获取指定副本ID的房间列表，不够则其他房间填充
struct U2GS_GetAllRoomList__5600 ->
{
	uint				dungeonID;//副本ID
	uint8				roomType;//房间的大类型 这里主要用仙盟房间类型，如果是仙盟房间类型，则不指定副本ID 
}
struct GS2U_CreateRoomResult__5603 <-
{
	uint32				result;
	uint8				mapAI;
}
struct RoomPlayerInfo
{
	uint64				playerID;//玩家ID
	LookInfoPlayer4UI   ui_info;//显示相关信息
	uint				headID;//头像ID
	uint				framID;//头像框
	uint				croFightRingQuitTime;//跨服比武逃跑惩罚时间戳
	uint64		battle_value; //战力	
	string		name;				// 名字	
	
}
//房间内简要信息
struct GS2U_RoomShortInfo__5606 <-
{
	uint64				roomID;//房间ID
	uint64				masterID;//房主ID
	uint32				dungeonID;//副本配置ID
	uint8				roomType;//房间的大类型
	uint8				roomSubType;//房间的子类型(世界类型时用)
	uint8				maxNum;//最大人数 表示房主可能已经关闭有房间位置
	vector<RoomPlayerInfo>	playerList;
	uint8				mapAI;
}
//更改准备状态
struct U2GS_ChangeReadyState__5609 ->
{
	uint8				state;// 1取消准备状态 2 进入准备状态
}
//房友状态结构
struct RoomPlayerState
{
	uint64				playerID;
	uint8				state;
}
struct GS2U_RoomPlayerStateList__5610 <-
{
	vector<RoomPlayerState>	info_list;
	uint8				mapAI;
}
//踢人
struct U2GS_KickRoomPlayer__5611 ->
{
	uint64				playerID;
}
struct GS2U_KickRoomPlayerResult__5612 <-
{
	uint32				result;//0表示成功，其他表示错误原因
	uint64				playerID;//被踢玩家ID
	uint8				mapAI;
}
//退出房间
struct U2GS_QuitRoom__5615 ->
{
}
//解散房间
struct GS2U_DisbandRoom__5616 <-
{
	uint8				mapAI;
}

//加入指定房间
struct U2GS_JoinRoom__5619 ->
{
	uint64				roomID;//房间ID
	uint8				isAward;//是否使用收益次数，0：不使用 1：使用
}
struct GS2U_JoinRoomResult__5620 <-
{
	uint32				result;//0表示成功，其他表示错误原因
	uint8				mapAI;
}
//------------------------组队房间 END------------------------------

// 进入三界战场
struct U2GS_BattlefieldEnter__5622 ->
{
    uint32  mapDataID;       // 地图配置ID
    uint8   type;            // 0-免费进入，1-元宝进入
};

//------------------------组队房间------------------------------
struct GS2U_AddRoomPlayer__5624 <-
{
	RoomPlayerInfo		info;
	uint8				mapAI;
}
//广播房友退出房间
struct GS2U_PlayerQuitRoom__5625 <-
{
	uint64				playerID;
	uint8				mapAI;
}

//------------------------组队房间 END------------------------------

struct BattlefieldRank
{
    uint16  rank;                   // 排名
    uint32  rankValue;              // 排名值
    uint64  playerID;               // 玩家ID
	uint8	playerSex;				// 玩家性别
    string  playerName;             // 玩家名字
	string  serverName;             //服务器名字
    uint64  guildID;                // 仙盟ID
    string  guildName;              // 仙盟名字
    uint64  chairmanID;             // 盟主ID
	uint8	chairmanSex;			// 盟主性别
    string  chairmanName;           // 盟主名字
    uint64  playerBattleValue;      // 玩家战斗力
    uint64  guildBattleValue;       // 仙盟战斗力
    uint32  nationality_id;        // 区域id
};

// 三界战场排行榜
struct U2GS_BattlefieldRankList__5626 ->
{
    // type：1-个人击杀Boss，2-个人被杀，3-个人杀人，4-仙盟击杀Boss，5-仙盟杀人，6-仙盟开宝箱
    uint32                   type;
};
struct GS2U_BattlefieldRankList__5627 <-
{
    uint32                   type;
    uint32                   errorCode;     // 0-成功，非0-错误原因
    vector<BattlefieldRank>  rankList;      // 成功后有意义，排名列表
    uint16                   myRank;        // 成功后有意义，自己的排名，0表示没有上榜
    uint32                   myRankValue;   // 成功后有意义，自己的排名值
};

struct sample_rank
{
    uint8   rank;           // 排名
    string  name;          // 玩家名字
	string  serverName;    //服务器名字
    uint64  value;         //
    uint32  nationality_id;        // 区域id
};

// 界面上的前三名
struct GS2U_BFScoreRankSample <-
{
    vector<sample_rank>  ranks;    
    uint16   my_rank;       
    uint32   my_score;   // 
};
// 玩家积分排行榜
struct U2GS_GetBFScoreRank ->
{
};
struct bf_score_rank
{
    uint8   rank;            // 排名
    string  name;            // 玩家名字
    string  guild_name;      // 战盟名字
    uint32  box_num;         // 宝箱数
    uint32  kill_num;        // 杀敌
    uint32  score;           //  积分
};
struct GS2U_GetBFScoreRankRet <-
{
    vector<bf_score_rank>  ranks;     
    uint16   my_rank;       
    uint32   box_num;         // 宝箱数
    uint32   kill_num;        // 杀敌
    uint32   my_score;        // 
};



// 服务端发送三界战场任务信息，玩家上线或每日重置发送
struct GS2U_BattlefieldPlayerTaskInfo__5629 <-
{
    vector<TaskProgress>  progressList;             // 任务进度列表，进度为0的不会发送
    vector<uint32>        finishList;		        // 已领奖的任务ID
};
struct GS2U_BattlefieldGuildTaskInfo__5630 <-
{
    vector<TaskProgress>  progressList;             // 任务进度列表，进度为0的不会发送
};

// 三界战场任务更新通知
struct GS2U_BattlefieldTaskUpdate__5631 <-
{
    TaskProgress  taskProgress;
    bool          isGuildTask;          // 是否仙盟任务
};

// 三界战场任务领奖
struct U2GS_BattlefieldTaskFinish__5632 ->
{
    uint32  taskID;
    bool    isGuildTask;    // 是否仙盟任务
};
struct GS2U_BattlefieldTaskFinish__5633 <-
{
    uint32  taskID;
    uint32  errorCode;		// 0-成功，非0-错误原因
};

//请求房间信息
struct U2GS_RequestRoomInfo__5634 ->
{
}
struct GS2U_RequestRoomInfoResult__5635 <-
{
	uint32				result;//0表示成功，其他表示错误原因
}

//客户端请求地图对象坐标数据，小地图用
struct U2GS_AllMapObjectsInfo__5636 ->
{
}
struct MapObject
{
	uint64	objectID;
	uint8	relation;//对象与自己的关系 1：盟友;2：敌人;3：BOSS;4：仙盟组队队友;5,临时队友
	PosInfo	posInfo;//坐标位置
}
//其他特殊地图对象信息
struct OtherMapObject
{
	uint64	objectID;
	uint32	monsterDataID;//怪物配置ID
	uint64	guildID;//所属仙盟ID
	string	guildName;//所属仙盟名字
	string	server_name;//所属服务器名字
	uint8	isAlive;//是否存活 1活着 0死亡
	PosInfo	posInfo;//坐标位置
}
struct GS2U_AllMapObjectsInfoResult__5637 <-
{
	vector<MapObject>	infoList;
	vector<OtherMapObject>	otherInfoList;
}

// 三界战场状态（玩家登录或改变时推送）
struct GS2U_BattlefieldState__5638 <-
{
    uint8   state;          // 状态：0-未开启、1-已开启未刷怪、2-已开启已刷怪
    uint32  openTime;       // 开启时间
    uint32  monsterTime;    // 刷怪时间
    uint32  closeTime;      // 关闭时间
    uint32  discount;       // 收益万分比
};

struct BattlefieldBossInfo
{
    uint32  monsterDataID;          // 怪物配置ID    
    uint64  playerID;               // 玩家ID
    string  playerName;             // 玩家名字
	string  serverName;
};

struct BattlefieldMapInfo
{
    uint32  mapDataID;          // 地图配置ID
    uint32  num;                // 本仙盟总人数
    uint32  numGuild;           // 本仙盟参与总人数
    uint32  numGuildOnline;     // 未使用
    vector<BattlefieldBossInfo>  bossInfoList;          // Boss击杀列表
};

// 三界战场面板信息
struct U2GS_BattlefieldPanelInfo__5639 ->
{
};
struct GS2U_BattlefieldPanelInfo__5640 <-
{
    uint32                      arenaRanking;         // 竞技场排名，0表示未上榜
    uint32                      enterMapDataID;       // 选择的地图配置ID，0表示未选择
    vector<BattlefieldMapInfo>  mapInfoList;          // 地图信息列表
    uint32                      rebornTime;           // 复活时间
	uint16                      worldLevel;           // 连服时主服的世界等级
	int8						server_type;		// 1本服 2联服
	uint8						server_num;			// 联服数
};

// 三界战场地图对象数据
struct GS2U_BattlefieldMapObject__5641 <-
{
    uint8   state;                  // 状态：0-未开启、1-已开启未刷怪、2-已开启已刷怪
    uint32  openTime;               // 开启时间
    uint32  collectionTime;         // 刷新宝箱时间，为0表示不显示倒计时
    uint32  monsterTime;            // 刷怪时间
    uint32  closeTime;              // 关闭时间
    uint32  monsterNum;             // 剩余Boss数量
    uint32  collectionNum;          // 剩余宝箱数量 
};

//世界BOSS 请求排行榜数据
struct U2GS_GetWorldBossRank__5642 ->
{
	uint16				number;//需要请求多少数据下来
}
struct WorldBossRankInfo
{
	uint16				rank;//排名
	uint64				playerID;
	string				playerName;
	string				guildName;
	uint64				battleValue;//战斗力
	uint64				damage;
}
struct GS2U_WorldBossRankList__5643 <-
{
	uint16				myRank;//自己的排名，0表示没有上榜
	uint64				myDamage;
	vector<WorldBossRankInfo> rankList;//排行榜
	vector<WorldBossRankInfo> luckyList;//幸运奖
}
};

// 野外BOSS 召集仙盟成员
struct U2GS_conveneGuildMember__5646 ->
{
	uint32		mapDataID;		// 地图ID
	uint8		type;		// 召集类型(1:召集仙盟成员 2:天宫试炼召集队友 3:召集仙盟队伍成员)
	float 		posX;		// X坐标
	float		posY;		// Y坐标
};

// 野外Boss召集成员
struct	GS2U_SendConveneMsg__5647 <-
{
	uint64		sendID;		// 发布召集玩家ID
	string		sendName;	// 发布召集玩家名字
	uint8		type;		// 召集类型(1:召集仙盟成员 2:天宫试炼召集队友 3:召集仙盟队伍成员)
	uint32		nRank; 		// 职位	
	uint32		mapDataID;		// 地图ID
	float 		posX;		// X坐标
	float		posY;		// Y坐标
};

// 请求红包数量
struct U2GS_getPacketCount__5648 ->
{
	
};

struct GS2U_sendPacketCount__5649 <-
{
	uint16		killNum;	 // 击杀者数量
	uint16		killGuildNum;	// 击杀者所在仙盟数量
	uint16		damageNum;		// 伤害排行榜数量
	uint16		growthNum;		// boss成长等级数量
	uint16		packetCount; // 红包数量
	uint16		integral;	// 获得积分
};

// 开野外BOSS红包
struct U2GS_operatePacket__5650 ->
{
	
};

// 开野外BOSS红包反馈
struct GS2U_operatePacketResult__5651 <-
{
	vector<CoinInfo> coin_list;	// 货币列表
	vector<itemInfo> item_list;	// 物品列表
	uint32				result;	//错误原因
};

// 野外BOSS 召集仙盟成员反馈
struct GS2U_conveneGuildMemberResult__5652 <-
{
	uint32		mapDataID;		// 地图ID
	float 		posX;		// X坐标
	float		posY;		// Y坐标
	uint32		result;		// 反馈
};

// 三界战场战报
struct GS2U_BattlefieldMessage__5655 <-
{
    string  message;
};

// 野外地图附加战力
struct U2GS_MapBattleValue__5656 ->
{
};
struct GS2U_MapBattleValue__5657 <-
{
    uint64  battleValue;         // 附加战斗力
};

struct GS2U_addFriendsByIDResult__5658 <-
{
	uint64		playerID;		// 玩家ID 
	uint32		result;			// 反馈
};

struct U2GS_getPlayerConveneTime ->
{
	uint8		type;		// 召集类型 1-通用   2-战盟争霸 3-龙城争霸
};

struct GS2U_sendPlayerConveneTime <-
{
	uint32		conveneTime;	// 召集时间
	uint32		times;	      // 累计不在正常时间内连续召集的次数
};

struct U2GS_AppearUpdate__5661 ->
{
	vector<uint64>		addList;	//增加ID列表
	vector<uint64>		delList;	//删除ID列表
};

// 三界战场连斩数据
struct GS2U_BattlefieldKeepKill__5663 <-
{
    uint32  num;             // 数量
};


struct BattlefieldBossResult
{
    uint32  monsterDataID;          // 怪物配置ID
    uint64  playerID;               // 击杀玩家ID（为0表示Boss未被击杀，后面字段无意义）
	uint8	playerSex;				// 击杀玩家性别
    string  playerName;             // 击杀玩家名字
	string  serverName;
    uint64  guildID;                // 击杀仙盟ID
    string  guildName;              // 击杀仙盟名字
    vector<CoinInfo>  coinList;     // 货币奖励
	vector<itemInfo>  itemList;     // 道具奖励
	uint32  nationality_id;        // 区域id
};

struct bf_settle_rank
{
    uint8   rank;           // 排名
	uint8	sex;			// 性别
    string  name;          // 玩家名字
    string  guild_name;    
	string  serverName;
    uint32  value;         //
    uint32  nationality_id;        // 区域id
};

// 积分信息
struct BattlefieldScoreResult
{
    vector<bf_settle_rank>  ranks;     // 货币奖励
    // 我的奖励
    vector<CoinInfo>        coin_list;  // 货币奖励
    vector<itemInfo>        item_list;  // 道具奖励
    vector<EqInfo>	        eq_list;		// 奖励装备列表
};

// 三界战场地图结算数据
struct GS2U_BattlefieldMapResult__5666 <-
{    
    BattlefieldScoreResult        score_result;
    vector<BattlefieldBossResult>  bossResultList;          // Boss结算列表
    uint32  killNum;                     // 我的杀人数
    uint32  collectionNum;               // 我的开宝箱数
    uint32  bossNum;                     // 我的杀Boss数
    uint32  guildRewardNum;              // 我的仙盟收益数
    uint32  guildKillNum;                // 仙盟的杀人数
    uint32  guildCollectionNum;          // 仙盟的开宝箱数
    uint32  guildBossNum;                // 仙盟的杀Boss数
};

// 客户端修改主角性别
struct U2GS_ChangePlayerSex__5667 ->
{
    uint8  sex;         // 性别
};
struct GS2U_ChangePlayerSex__5668 <-
{
    uint8  sex;         // 性别
    uint32  errorCode;      // 0-成功，非0-错误原因
};

// 客户端使用血瓶
struct U2GS_UseHpItem__5669 ->
{
    uint32  itemDataID;              // 道具配置ID
};

// 增加申请仙盟直接进入限制条件
struct U2GS_addGuildCondition__5671 ->
{
	uint8		type;	// 类型（1：战斗力）
	uint32		value;	// 限制值（value值为0表示删除限制）
};

// 增加申请仙盟直接进入限制条件
struct GS2U_addGuildConditionResult__5672 <-
{
	uint8		type;	// 类型（1：战斗力）
	uint32		value;	// 限制值
	uint32		result;	// 反馈ID
};

// 设置是否自动进入仙盟
struct U2GS_setAutoJoinGuild__5673 ->
{
	uint8		autoJoin;	// 是否自动加入(1:自动加入 2:手动加入)
};

// 设置是否自动进入仙盟反馈
struct GS2U_setAutoJoinGuildResult__5674 <-
{
	uint8		autoJoin;	// 是否自动加入(1:自动加入 2:手动加入)
	uint32		result;		// 反馈ID
};


// 下发诛仙个人数据
struct GS2U_requestQuitWildBossResult__5677 <-
{
	string		killBossName;		// 击杀Boss玩家名
	uint32		integral;			// 当前积分
	uint32		killPlayerCount;	// 击杀玩家数量
	uint8		lifeBossLine;		// 仍有Boss的分线(0为没有Boss可打)
};

//推送当前地图总玩家数
struct GS2U_MapPlayerCount__5678 <-
{
	uint8				playerCount;//当前地图总玩家数
};

// 客户端请求三界战场是否结算
struct U2GS_BattlefieldResult__5679 ->
{
    uint32  mapDataID;       // 地图配置ID
};
struct GS2U_BattlefieldResult__5680 <-
{
    uint32  mapDataID;       // 地图配置ID
    bool    isFinish;        // 是否已经结算
};

//------------------------资源找回------------------------------
struct GS2U_ResourseFindBackRedPoint__5682 <- 
{
};

struct U2GS_ResourseFindBackData__5683 ->
{
};

struct ResourseFindBack
{
	uint8 		resID;
	uint16 		count_nor;		// 普通次数
	uint16		count_ex;		// 额外次数
	uint16 		count_nor_get;	// 已找回普通次数
	uint16		count_ex_get;	// 已找回额外次数
	vector<uint32>	params;
};

struct GS2U_ResourseFindBackData__5684 <-
{
	vector<ResourseFindBack> resList;
};

struct U2GS_ResourseFindBack__5685 ->
{
	uint8		resID;
	uint8		findType;//0金币找回 1钻石找回
	uint16		count;	// 找回次数
	uint8		dlgType;	// 弹窗类型(参考GS2U_GetSthDialog)
};

struct GS2U_ResourseFindBackResult__5686 <-
{
	uint8		resID;
	uint8		findType;
	uint16		count;	// 找回次数
	uint32		result;//0代表成功
	uint64		exp;				// 经验
	vector<CoinInfo>  coinList;		// 奖励货币列表
	vector<itemInfo>  itemList;		// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
};
//------------------------资源找回 END------------------------------

//请求 每日充值奖励表
struct U2GS_RechargeInfo__5687 ->
{
};

//返回每日充值奖励表
struct GS2U_RechargeInfo__5688 <-
{
	uint32		serverDay;		// 开服天数
	uint32		gold1;			// 1档：充值元宝数量
	vector<itemInfo> 		itemID1;	//1档： 道具和数量
	vector<CoinInfo>		coin1;		//1档： 货币类型
	uint32		gold2;			// 2档：充值元宝数量
	vector<itemInfo> 		itemID2;	//2档： 道具和数量
	vector<CoinInfo>		coin2;		//2档： 货币类型
	uint32		gold3;			// 3档：充值元宝数量
	vector<itemInfo> 		itemID3;	//3档： 道具和数量
	vector<CoinInfo>		coin3;		//3档： 货币类型
	
	vector<itemInfo> 		itemIDReward;	//诚意奖： 道具和数量
	vector<CoinInfo>		coinReward;		//诚意奖： 货币类型
	
	// 周期累充
	uint16					finishServerDay;		// 结束的开服天数（废弃）
	uint16					dayGold;	// 每日需要充值元宝数量
	uint16					days5;		// 1档：需要天数
	vector<itemInfo> 		itemID5;	// 1档： 道具和数量
	vector<CoinInfo>		coin5;		// 1档： 货币类型
	uint16					days6;		// 2档：需要天数
	vector<itemInfo> 		itemID6;	// 2档： 道具和数量
	vector<CoinInfo>		coin6;		// 2档： 货币类型
	uint16					days7;		// 3档：需要天数
	vector<itemInfo> 		itemID7;	// 3档： 道具和数量
	vector<CoinInfo>		coin7;		// 3档： 货币类型
};

// 累计充值推送
struct GS2U_recharge_total <-
{
	uint32  daily_recharge; 	// 每日累充
	uint8   daily_finish1; 		// 每日累充第一档领取标记（0、1）
	uint8   daily_finish2; 		// 每日累充第二档领取标记（0、1）
	uint8   daily_finish3; 		// 每日累充第三档领取标记（0、1）
	uint8   daily_finish4; 		// 每日累充免费档领取标记（0、1）
	uint32  period_time; 		// 周期累充结束时间，0表示未开启
	uint32  period_days; 		// 周期累充达标天数
	uint8   period_finish1; 	// 周期累充第一档领取标记（0、1）
	uint8   period_finish2; 	// 周期累充第二档领取标记（0、1）
	uint8   period_finish3; 	// 周期累充第三档领取标记（0、1）
};

// 
struct U2GS_RequestSettleAccounts_info__5693 ->
{
   uint8	keyindex;
   binary	info; // U2GS_RequestSettleAccounts 的二进制加密信息
};

// 日常活动信息
struct ActiveInfo
{
    uint32  activeID;           // 日常任务子类型
    uint32  usedCount;          // 已用次数
    uint32  totalCount;         // 总共次数
    uint32  remainBuyCount;     // 剩余购买次数
    uint32  recommendVIP;       // 推荐VIP等级，0表示没有推荐
};

// 日常活动信息列表
struct GS2U_ActiveInfoList__5694 <-
{
    vector<ActiveInfo>  activeInfoList;       // 日常活动信息列表
};
// 日常活动信息更新，变化推送
struct GS2U_ActiveInfoUpdate__5695 <-
{
    ActiveInfo  activeInfo;       // 新的日常活动信息
};

struct U2GS_conveneGuildMemberResult__5698 ->
{
	uint64	conveneID; // 发布召集的玩家ID
	uint8	type;		// 召集类型(1:召集仙盟成员 2:天宫试炼召集队友)
	uint8	agree;	// 是否同意（1：同意 0：拒绝）
};

// 客户端请求三界战场历史战报
struct U2GS_BattlefieldGetResult__5699 ->
{
    uint32  mapDataID;       // 地图配置ID
};

//请求进入仙盟驻地
struct U2GS_Guild_enter_Camp__5726 ->
{
	uint32			mapId;
};

struct GS2U_Guild_enter_CampRet__5727 <-
{
	uint32			errorCode;			
};


struct GS2U_Guild_quit_CampRet__5729 <-
{
	uint32			errorCode;			
};
struct Camp_Player
{
	uint64			playerId;
	string			name;
	uint8			sex;
	uint8			headID;
	uint8			fateLevel;
	uint8			vip;	
};
//追加更新
struct GS2U_Guild_Camp_PlayerNotify__5742 <-
{
	vector<Camp_Player>	playerInfo; //数据追加更新
};

//离开驻地玩家通告
struct GS2U_Guild_Camp_PlayerLeave__5743 <-
{
	uint64	playerId;
};
struct Camp_Buff
{
	uint32			index;
	uint32			buff_id;
	uint32			etime;//buff 结束时间
	string 			provider_name;
};
//追加更新
struct GS2U_Guild_Camp_BuffNotify__5745 <-
{
	vector<Camp_Buff>	buffInfo; //数据追加更新
};

struct GS2U_MountProperty__5748 <-
{
	uint64			mountID;			// 坐骑ID
	uint32			errorCode;			// 0-成功，非0-错误原因
	ObjectProperty	objectProperty;     // 成功后有意义，战斗属性
};
struct GS2U_MountPropertyChanged__5749 <-
{
	uint64					mountID;				// 坐骑ID
	ObjectPropertyChanged	objectPropertyChanged;	// 战斗属性变化
};

//升级变化后会推送
struct GS2U_Guild_Camp_CampfireRet__5753 <-
{
	uint8	level;
	uint32	base_exp;
};

// 同步有效嘉年华列表
struct GS2U_CarnivalValidList <-
{
	vector<uint32>	id_list;	// 活动id列表
};

// 请求指定嘉年华的排行数据
struct U2GS_getCarnivalInfo__5754 ->
{
	uint32			id;		// ID
};

struct carnivalInfo
{
	uint64			id;		// 对象ID
	string			name;	// 对象名
	uint32  		fateLevel;	// 大圣之路
	uint64			param;		// 仙盟类型，此字段为仙盟等级,竞技场类型，此字段为战斗力
	uint64			value;	// 排行榜值
	uint16			rank;	// 排名
	uint32			time;	// 达成时间(仙盟排行榜的达成时间为0)
};

// 发送指定嘉年华排行榜数据
struct GS2U_sendCarnivalInfo__5755 <-
{
	uint32					id;	// 嘉年华配置ID
	uint64			value;	// 自己排行榜值
	uint16			rank;	// 自己排名
	uint32  		fateLevel;	// 大圣之路
	uint64			param;		// 仙盟类型，此字段为仙盟等级,竞技场类型，此字段为战斗力
	uint32			time;	// 自己的达成时间(仙盟排行榜的达成时间为0)
	vector<carnivalInfo>	carnival_list;
};


// 奖励条件
struct carnivalcon
{
	pb_uint32      reward_order;     // 奖励序号
	pb_uint32      param1;           // 参数1
	pb_uint32      param2;           // 参数2
	uint32      param3;           // 参数3
};

// 基础奖励条件
struct carnivalconbase
{
	pb_uint32      order;    // 编号
	pb_uint32      type;     // 任务类型
	uint32      param;   // 参数
};

// 嘉年华直购
struct carnival_buy_stc
{
	uint16 goods_id;						// 商品id
	key_value lv_range;					    // 玩家等级区间
	string name;							// 礼包名
	vector<indexTypeItem> item_list;		// 物品奖励
	vector<uint32> show;					// 展示额外的位置
	uint8  buy_type;                        // 购买方式
	key_value curr_type;					// 货币价格
	string direct_purchase_code;			// 直购价格
	uint32 discount;						// 原价
	key_2value limit;						// 限购条件
	key_value condition_type;				// 可购买条件
	key_value show_type;					// 可显示条件
	uint8 character;						// 品质
	uint8 red_dot;							// 商品是否有登录红点
	uint8 must_buy_label;                   // 必买标签
};

// 配置信息
struct carnivalcfginfo
{
	pb_uint32           id;                      // 活动id
	string         	 name;                    // 活动名
	string        	 pic;                     // 顶部图片
	string        	 pic_text;                // 顶部图片文字
	string        	 pic_text2;               // 顶部图片小备注文字
	pb_uint32        	 pic_text_pos;            // 顶部图片文字位置
	pb_uint32           opendate;                // 开启时间
	pb_uint32           duration_day;            // 持续天数
	vector<pb_uint32>   recommend;               // 推荐的图标
	pb_uint32           rank_record;             // 后端最大记录数
	pb_uint32           rank_show;               // 推送前端的记录数
	pb_uint32           type;                    // 活动类型
	vector<carnivalcon> reward_cond;          // 奖励条件
	vector<carnivalconbase> reward_cond_base; // 基础奖励条件
	int32           rank_value_view;         // 排名多少以内不显示
	vector<pb_uint64>   reward_show;             // 奖励预览
	uint32           titlel_con;              // 标题图片
	pb_uint16           ui_show_num;             // 显示值
	pb_uint16           reward_group;            // 活动组 1 开服嘉年华  2 龙神试炼
	vector<string>	 recommend_text;		  // 跳转对应功能的文字说明
	string        	 qipao_text;              // 顶部图片
	vector<string>	 recommend_Name;		  // 跳转功能的名字
	vector<string>	 recommend_Icon;		  // 跳转功能的icon图
	vector<carnival_buy_stc>	 direct_buy_list;		  // 直购列表
	uint16			pay_open_date;			// 直购开始时间 开服第几天
};

// 嘉年华配置数据
struct GS2U_CarnivalCfgRank <-
{
	vector<carnivalcfginfo>     cfg_rank_info;   // 配置信息
};

// 嘉年华已直购列表
struct GS2U_CarnivalDirectBuyInfo <-
{
	vector<key_3value>     buy_list;   // key 嘉年华id value1 直购id  value2 今日购买次数 value3 总购买次数
};


// 嘉年华商品购买
struct U2GS_carnival_goods_buy ->
{
	uint32 id;
	uint32 goods_id;
};
// 嘉年华商品购买返回
struct GS2U_carnival_goods_buy_ret <-
{
	uint32 id;
	uint32 goods_id;
	uint32 err_code;
};

// 奖励装备结构
struct carnivalequip
{
	pb_uint32      career; //职业
	pb_uint32      equip_id; //装备ID
	pb_uint32      equip_quality;   // 装备品质
	pb_uint32      equip_star;   // 装备星级
	uint8       is_bind;    // 是否绑定
};

// 奖励道具结构
struct carnivalitem
{
	pb_uint32      career; //职业
	pb_uint16      type;   //类型
	pb_uint32      item_id; //物品ID
	uint8       is_bind;    // 是否绑定
	pb_uint32      number;     // 数量
};

// 活动配置信息
struct carnivalactiveinfo
{
	pb_uint16                 type;          // 活动类型
	uint32                 id;            // 活动ID
	pb_uint32                 gift_order;    // 奖励序号
	vector<carnivalitem>   award_item;    // 奖励道具/货币
	vector<carnivalequip>  award_equip;   // 奖励装备
};

// 活动奖励
struct GS2U_CarnivalCfgRankGift <-
{
	vector<carnivalactiveinfo>   cfg_active_info;   // 活动奖励配置信息
};

// 战盟战力配置信息
struct carnivalspecial
{
	pb_uint16                 gift_id;          // 奖励序号
	uint32                 id;               // 活动ID
	uint8                 position;    // 战盟职位
	vector<carnivalitem>   award_item;    // 奖励道具/货币
	vector<carnivalequip>  award_equip;   // 奖励装备
	pb_uint64                 item_show;     // 界面上显示道具icon的物品ID
};

// 战盟战力
struct GS2U_CarnivalCfgSpecial <-
{
	vector<carnivalspecial>   special_info; 
};

// 客户端请求改变坐骑状态，不管成功或失败，服务器都会返回GS2U_MountChangeStatus，以服务器为准
struct U2GS_MountChangeStatus__5756 ->
{
	uint8	mountStatus;		// 坐骑状态：0-未骑乘，1-骑乘
};
// 服务器同步坐骑状态
struct GS2U_MountChangeStatus__5757 <-
{
	uint64	playerID;           // 玩家ID
	uint8	mountStatus;		// 坐骑状态：0-未骑乘，1-骑乘
	uint32	move_speed;			// 玩家速度
};


// 发送口令红包
struct U2GS_Red_Envelope__5760 ->
{
	uint8	type;//红包类型(1.仙盟驻地请客后发送红包，2，充值红包，3仙侣系统主人发送红包，
				//4仙侣系统客人向新郎或者新娘发送红包，5仙侣宾客向地图发送红包)
	uint8	param;//扩展字段，type为3,4时，指定发送红包索引id
	uint64	targetID;//当type=4时，指定新娘或者新娘的角色id
	string	command;//口令
};
struct GS2U_Red_EnvelopeRet__5761 <-
{
	uint32	errorCode;
};

struct Red_EnvelopeRet
{
	uint64	id;//红包id
	uint8	type; //1 口令红包,2随机红包
	string	title;
	string  sender_name;
	uint32	money;
	uint8	number;//红包数量
	uint32	time;
};
//红包推送
struct GS2U_Red_EnvelopeNotify__5762 <-
{
	vector<Red_EnvelopeRet> red_Envelope;
};
// 领取红包
struct U2GS_Red_Envelope_Take__5763 ->
{
	uint64	id;//红包类型
	string	command;//如果是口令红包则填口令
};
struct GS2U_Red_Envelope_TakeRet__5764 <-
{
	uint8	type;
	uint32	errorCode;
	string	sender_name;
	uint32	gold;//获得的元宝
	uint32	coin;//获得的金币
};

// 捐献仙盟基金
struct U2GS_donateGuildMoney__5770 ->
{
	uint16			times;		// 捐献次数
};
// 捐献仙盟基金反馈
struct GS2U_donateGuildMoneyResult__5771 <-
{
	uint16			times;		// 捐献次数
	uint32			result;		// 捐献反馈
};
// 请求仙盟捐献数据
struct U2GS_getGuildMoneyLogList__5772 ->
{
	
};
struct guildMoneyLog
{
	uint64		playerID;		// 玩家ID
	string		playerName;		// 玩家名
	uint16		donateTimes;	// 捐献次数
	uint64		addMoney;		// 增加的仙盟基金
	uint32		donateTime;		// 捐献时间
};
// 发送仙盟捐献数据
struct GS2U_sendGuildMoneyLogList__5773 <-
{
	vector<guildMoneyLog>  log_list;
};

// 仙盟驻地打坐状态同步
struct Camp_Act_State
{
	uint64 	playerId;
	uint64 targetId; 
	uint8	point;
	uint8	type;
	uint8	sit;
};
struct U2GS_Guild_Camp_State__5775 ->
{
	vector<Camp_Act_State> act;
};
struct GS2U_Guild_Camp_StateNotify__5776 <-
{
	vector<Camp_Act_State> act;			
};

//仙盟驻地打坐结算信息
struct U2GS_Guild_Camp_Gains__5778 ->
{
};
struct GS2U_Guild_Camp_GainsRet__5779 <-
{
	uint32	exp;
	uint32	gold;
};

//红包领取记录
struct U2GS_Red_Envelope_Record__5780 ->
{
};

struct Red_Envelope_Record
{
	string 	playerName; //如果为空字符串 "" 则为发送红包记录，无领取人
	string	onwerName;
	uint32	take_money;
	uint32	time;
	uint8	type;//1仙盟驻地红包，2充值随机红包
	uint8   best_of_luck;//为1是最佳手气者
};
struct GS2U_Red_Envelope_RecordRet__5781 <-
{
	uint32	todayNumber;
	uint32	todayCount;
	uint32	historyNumber;
	uint64	historyCount;
	vector<Red_Envelope_Record> record;		
};

// 客户端改变战斗状态
struct U2GS_BattleStatus ->
{
	uint8  battleStatus;		// 战斗状态：0-否，1-是
};
// 服务器转发战斗状态
struct GS2U_BattleStatus <-
{
	uint64 playerID;            // 玩家ID
	uint8  battleStatus;		// 战斗状态：0-否，1-是
};

// 请求仙盟基金
struct U2GS_getGuildMoney__5789 ->
{	
};
// 发送仙盟基金
struct GS2U_sendGuildMoney__5790 <-
{
	uint64		guildMoney;		// 仙盟基金
};

//获取礼包奖励明细
struct U2GS_GetAwardShow__5798 ->
{
	vector<uint>				awardIDList;//礼包ID列表
};
struct AwardShow
{
	uint				awardID;//礼包ID
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;//物品列表
};
struct GS2U_GetAwardShowRet__5799 <-
{
	vector<AwardShow>	awardShowList;
};

// 运营活动兑换物品
struct U2GS_exchangeItem__5806 ->
{
	uint32		id;			// 活动ID
	uint32		changeID;	// 兑换ID
	uint16		changeTimes;// 兑换次数
};

// 运营活动兑换物品
struct GS2U_exchangeItemResult__5807 <-
{
	uint32		id;			// 活动ID
	uint32		changeID;	// 兑换ID
	uint16		changeTimes;// 兑换次数
	uint32		result;		// 兑换反馈
};

// 获取转盘活动基础数据
struct  U2GS_getRouletteInfo__5808 ->
{
	uint32		id;					// 活动ID
};

/*
{方案,方式,参数1,参数2}
方案：
	同方案必须同时消耗才可启用
	不同方案满足1个方案即可启用
	多方案都满足优先扣除方案ID小的
方式：
	1为消耗道具;
		参数1：消耗道具ID;
		参数2：消耗道具数量
	2为消耗货币;
		参数1：消耗货币ID;
		参数2：消耗货币数量
*/
struct consWay
{
	uint16		program;			// 方案
	uint8		way;				// 方式
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
};

/*
特殊奖励 {特殊编号,奖励类型,参数1,参数2}
奖励类型：
	1.为奖励道具;
		参数1：道具ID，
		参数2：道具数量
	2.为奖励货币;
		参数1：货币ID，
		参数2：货币数量
	3.为兑换积分：
		参数1：货币ID，
		参数2：兑换万分比

普通奖励 {普通编号,奖励类型,参数1,参数2}
奖励类型：
	1.为奖励道具;
		参数1：道具ID，
		参数2：道具数量
	2.为奖励货币;
		参数1：货币ID，
		参数2：货币数量
*/
struct rewardItem
{
	uint32		index;				// 特殊编号  
 // 0为装备,填写道具ID；
 // 1为道具,填写道具ID；
 // 2为货币,填写货币枚举；
 // 3为积分,填货币枚举，“数量参数”为兑换万分比
  uint8    tp;    
  uint32   career; 
  uint8    bind;     
  uint32   p1;
  uint32   p2;
  
  uint8   chara;
  uint8   star;
  uint8   show_vfx;  // 是否转圈特效 0-无  1-有
  
};

/*
兑换奖励列表 {奖励序号,奖励类型,参数1,参数2,所需兑换积分}
奖励类型：
	1.为奖励道具;
		参数1：道具ID，
		参数2：道具数量
	2.为奖励货币;
		参数1：货币ID，
		参数2：货币数量
*/
// %% 兑换奖励限制列表
// %% {奖励序号,限购次数,折扣(万分比,显示用)}
// %% 若没有配置，则为无限兑换，且折扣不显示
struct rouletteChangeInfo
{
	uint32		index;				// 奖励序号
	uint8		isServer;			// 是否全服兑换(1:是,0:不是)
	rewardItem item;  //不要使用里面的index
	uint32		integral;			// 所需积分	
	uint16		changeTimes;		// 可兑换次数
	uint16		discount;			// 折扣
};

// 兑换次数
struct roulette_change
{
	uint32		index;				// 奖励序号
	uint8		isServer;			// 是否全服兑换(1:是,0:不是)
	uint16		times;				// 兑换次数
};
struct roulette_top
{
	uint32		index;				// 奖励索引
	uint16		startR;				// 排名上限
	uint16		endR;				// 排名下线
	vector<rewardItem> list; 
};

// 排行榜数据
struct top_rank
{
	uint64		playerID;			// 玩家ID
	string		name;				// 玩家名
	uint32  	fateLevel;			// 命格等级
	uint32		value;				// 排行榜值
	uint32		time;				// 记录时间
	uint32      nationality_id; // 区域id
};

struct rouletteInfo
{
	uint32		id;					// 活动ID
	uint16		type;				// 转盘类型
	uint32		startTime;			// 开始时间
	uint32		endTime;			// 结束时间
	uint32		showEndTime;		// 显示时间
	uint32		convPoint;			// 单次获得兑换积分
	uint32		luckyPointUnit;		// 幸运值单元
	uint32		luckyPointMax;		// 最大幸运值
	vector<int16> times; 			// 转动次数
	vector<consWay> pro_list;		// 转盘消耗
	vector<rewardItem> itemSp_list;	// 特殊物品奖励
	vector<rewardItem> itemCom_list;// 普通物品奖励
	vector<uint32>	sit_list;		// 转盘道具顺序
	vector<rouletteChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	vector<roulette_top> top_award_list;	// 排行榜奖励配置
	vector<uint32>	show_rank;				// 排行榜奖励预览
};

// 给客户端发送转盘活动基础数据
struct GS2U_sendRouletteInfo__5809 <-
{
	
	vector<rouletteInfo> roulette_list;	// 活动数据列表
};

// 抽奖
struct U2GS_rouletteDraw__5810 ->
{
	uint32		id;					// 活动ID
	uint16		times;				// 抽奖次数
};
/*
{奖励类型,参数1,参数2}
奖励类型：
	1.为奖励道具;
		参数1：道具ID，
		参数2：道具数量
	2.为奖励货币;
		参数1：货币ID，
		参数2：货币数量
*/
// 转盘奖励信息
struct rouletteItem
{
	uint32		index;				// 特殊编号
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	
	uint8   bind;
	uint8   chara;
	uint8   star;
	
	uint16		times;				// 中的次数
};

struct roulettePercent
{
	uint32		percent;			// 抽中比例
	uint32		drawSalary;			// 抽中的数量
};

// 抽奖反馈
struct GS2U_rouletteDrawResult__5811 <-
{
	uint32		id;					// 活动ID
	uint16		times;				// 抽奖次数
	uint32		salIntegral;		// 聚宝盆数量
	uint32		changeIntegral;		// 兑换积分
	uint32		luckyIntegral;		// 幸运积分
	uint32		itemCount;			// 物品库存数量	
	vector<roulettePercent> per_list;	// 聚宝盆抽中比例
	vector<rouletteItem> itemSp_list;	// 特殊物品奖励
	vector<rouletteItem> itemCom_list;	// 普通物品奖励
	uint32		result;				// 反馈ID
};

// 请求活动玩家临时仓库数据
struct U2GS_getPlayerTempBag__5812 ->
{
	uint32		id;					// 活动ID
};

// 发送活动玩家临时仓库数据
struct GS2U_sendPlayerTempBag__5813 <-
{
	vector<rouletteItem> bag_list;	// 临时仓库列表
};

// 兑换物品
struct U2GS_changeRouletteItem__5814 ->
{
	uint32		id;					// 活动ID
	uint32		index;				// 奖励序号
	uint16		times;				// 兑换次数
};

// 兑换反馈
struct GS2U_changeRouletteItemResult__5815 <-
{
	uint32		id;					// 活动ID
	uint32		index;				// 奖励序号
	uint32		changeIntegral;		// 兑换积分
	uint32		result;				// 兑换反馈
};

// 临时仓库提取
struct U2GS_getSingleTempItem__5818 ->
{
	uint32		id;					// 活动ID
	uint8		isAll;				// 是否全部提取(1:是 0：不是)
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	
	uint8  bind;
	uint8  chara;
	uint8  star;
};
struct GS2U_getSingleTempItemResult__5819 <-
{
	uint32		id;					// 活动ID
	uint8		isAll;				// 是否全部提取 (1:是 0：不是)
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	uint8  bind;
	uint8  chara;
	uint8  star;
	uint16		itemCount;			// 物品库存数量
	uint32		result;				// 提取反馈
};

// 抽奖记录
struct roulette_record
{
	string		player_text;		// 玩家名
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	uint8		chara;				// 品质
	uint16		times;				// 抽中次数
};
struct GS2U_rouletteItemMsg__5823 <-
{
	uint32					id;				// 活动ID
	uint8					isServer;		// 是否是全服信息（1：是，0：不是）
	vector<roulette_record>	sp_list;		// 特殊奖励信息列表
	vector<roulette_record>	com_list;		// 普通奖励信息列表
	vector<roulette_record>	mix_list;		// 混合奖励信息列表
	vector<uint32>			limit_list;		// 记录条数限制
};

// 角色登陆时请求一次
struct U2GS_GuildCamp_ActivityTime__5826 ->
{
};

//有动态新开活动，服务器会推送该消息
struct GS2U_GuildCamp_ActivityTimeRet__5827 <-
{
	uint32	start_time; //开始时间，unixtime
	uint32	end_time;  //结束时间，unixtime
};

//------------------------领地战------------------------------

//------------------------领地战 END------------------------------

// 通知客户端有几个转盘活动
struct lookRoulette
{
	uint32		id;					// 活动ID
	uint16		type;				// 转盘类型
	uint8		teamType;			// 活动分组
	string		title;				// 转盘标题
	uint8		isRed;				// 是否显示红点（1：显示，0：不显示）
	uint32		startTime;			// 活动开始时间
	uint32		endTime;			// 活动结束时间
	vector<uint32> 	pic_list;		// 图片配置 （活动入口图片|背景图片|转盘|按钮）
	string		banner_upleft;	// 左上banner
	string		banner_lowleft;	// 左下banner
	string		banner_upright;	// 右上banner
	string		banner_lowright;// 右下banner
};
struct GS2U_sendLookRoulette__5830 <-
{
	uint8		teamType;	// 活动分组
	vector<lookRoulette> roulette_list;
};

// 口令红包预判断
struct U2GS_RedEnvelop_Rest_Number__5832 ->
{
	uint64	id; 		//红包索引
};
//有动态新开活动，服务器会推送该消息
struct GS2U_RedEnvelop_Rest_NumberRet__5833 <-
{
	uint32	rest_number; //剩余个数
};

struct GS2U_ItemDecompose__5839 <-
{
	uint64 itemDBID;		// 道具ID
	uint16 itemCount;		// 道具数量
	uint32 errorCode;   	// 0-成功，非0-错误原因
	uint32 itemDataID;		// 成功后有意义，道具配置ID
};

// 请求转盘显示数据
struct U2GS_getLookRoulette__5840 ->
{
	uint8	teamType;		// 活动分组
};


// 觉醒大师提升通知
struct GS2U_SuitAddChara__5843 <-
{
  uint16 oldChara;				  // 觉醒大师等级
  uint16 newChara;				  // 觉醒大师等级
};


//技能状态
struct U2GS_SkillStat__5844 ->
{
	uint64			code;		//技能释放者Code
	uint			skillId;	//使用的技能ID
	bool 			isUse;		//是否释放
	float angleX;					//坐标点X方向
	float angleY;					//坐标点Y方向
};

//技能状态
struct GS2U_SkillStat__5845 <-
{
	uint64			code;		//技能释放者Code
	uint			skillId;	//使用的技能ID
	bool 			isUse;		//是否释放
	float angleX;					//坐标点X方向
	float angleY;					//坐标点Y方向
};

// 怪物传送开始
struct GS2U_MonsterTransferBegin__5859 <-
{
	uint64  id;				// 怪物实例ID
	uint8	type;			// 0-传送、1-逃跑、2-隐身
};
// 怪物传送结束
struct GS2U_MonsterTransferEnd__5860 <-
{
    uint64  id;				// 怪物实例ID
	uint8	type;			// 0-传送、1-逃跑、2-隐身
};

//--------------------------------------------------------------------------------
// 充值额外奖励货币
struct RebateAwardCurrency
{
	uint8   currencyType;    // 货币类型
	uint32  currency;        // 货币数量
};

// 充值额外奖励道具
struct RebateAwardItem
{
	uint32  cfgId;          // 配置ID
	uint32  amount;         // 数量
	uint8   bind;			// 绑定
};
struct RebateAwardEquipment
{
	uint32  cfgId;          // 配置ID
	uint16  amount;         // 数量
	uint8   bind;			// 绑定
	uint16  quality;        // 品质
	uint16  star;         	// 星级
};

// 充值额外奖励
struct RebateAward
{
	string                       name;			 	// 奖励名称
	vector<RebateAwardCurrency>  currencyList;		// 奖励货币列表
	vector<RebateAwardItem>      itemList;        	// 奖励道具列表
	vector<RebateAwardEquipment> equipmentList;     // 奖励装备列表
};

// 充值商品配置
struct RebateItemCfg
{
	uint8        index;				// 商品编号（1,2,3）
	uint32       price;				// 充值金额
	uint32       gold;				// 充值元宝
	RebateAward  rebateAward;		// 额外奖励
};


// 充值商品配置列表
struct U2GS_RebateItemCfgList__5863 ->
{
};
struct GS2U_RebateItemCfgList__5864 <-
{
	RebateAward        rebateAward;		// 免费奖励配置
	vector<RebateItemCfg>  cfgList;        	// 配置列表
};

// 一元秒杀推送
struct GS2U_recharge_buy <-
{
	uint8   daily_finish1; 		// 一元秒杀第一档领取标记（0、1）
	uint8   daily_finish2; 		// 一元秒杀第二档领取标记（0、1）
	uint8   daily_finish3; 		// 一元秒杀第三档领取标记（0、1）
	uint8   daily_finish4; 		// 一元秒杀免费档领取标记（0、1）
};

// -------------------------直购礼包-------------------------
struct GiftPackageBuy
{
	uint16 index;               // 编号
	uint16 id;                  // 直购礼包ID
	string name;                // 礼包名字
	uint16 buy_times;		    // 当前购买次数
	uint16 total_times;         // 限购次数
	string icon;                // 图标
	vector<IndexAwardEquip> ammount11_Equip;     //获得装备
	vector<IndexAwardItem>  ammount11_Item;      //获得物品
};
struct GS2U_gift_package_buy <-
{
	vector<GiftPackageBuy> infoList; // 礼包信息列表
};
// -------------------------直购礼包 end-------------------------
// 请求转盘活动兑换列表
struct U2GS_getRouletteExchange__5865 ->
{
	uint32		id;					// 活动ID
};
struct GS2U_sendRouletteExchangeList__5866 <-
{
	uint32		id;					// 活动ID
	vector<roulette_change> change_list;	// 玩家已兑换次数列表
};

// 请求转盘活动排行榜列表
struct U2GS_getRouletteTopList__5867 ->
{
	uint32		id;					// 活动ID
};
struct GS2U_sendRouletteTopList__5868 <-
{
	uint32		id;					// 活动ID
	uint16		rankNum;			// 玩家自己的排名
	vector<top_rank> top_list;		// 玩家排行榜列表
};
// 聚宝盆记录
struct salary_record
{
	uint32		time;		// 时间戳
	string		name;		// 玩家名字
	uint16		rate;		// 奖金占比(万分比)
	uint32		num;		// 抽中数量
};
struct GS2U_sendSarlaryRecord__5869 <-
{
	uint32		id;					// 活动ID
	vector<salary_record> record_list;
};

struct rouletteSaveInfo
{
	uint32		id;					// 活动ID
	uint32		wealthTime;			// 财神时间
	uint32		salIntegral;		// 聚宝盆数量
	uint32		drawTimes;			// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		luckyIntegral;		// 幸运积分
	uint32		itemCount;			// 物品库存数量
	uint32		rankBase;			// %% 进入排行基础次数 0代表没有排行榜
	uint16		rankNum;			// 玩家自己的排名
	vector<roulette_change> change_list;	// 玩家已兑换次数列表
	vector<top_rank> top_list;				// 玩家排行榜列表
};
struct GS2U_sendRouletteSaveInfo__5870 <-
{
	vector<rouletteSaveInfo> info_list;
};
// 请求精彩活动排行榜数据
struct U2GS_getTop_activityInfo__5873 ->
{
	
};
struct activity_topInfo
{
	uint64			id;		// 玩家ID
	string			name;	// 玩家名
	uint32  		fateLevel;	// 大圣之路等级
	uint32			value;	// 排行榜值
	int				customInt;	// 自定义字段
	uint16			rank;	// 排名
	uint32			time;	// 达成时间
	uint32          nationality_id; // 区域id

};
//	%% {奖励序号,奖励类型,参数1,参数2}
//	%% 奖励类型：
//	%% 1为奖励道具;参数1：道具ID，
//	%% 参数2：道具数量
//	%% 2为奖励货币;参数1：货币ID，
//	%% 参数2：货币数量
struct activity_topAward
{
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
};
// {奖励序号,排名上限,排名下限,参数1}
struct activity_topCfg
{
	uint32		index;				// 奖励索引
	uint16		startR;				// 排名上限
	uint16		endR;				// 排名下线
	uint32		param;				// 参数
	vector<activity_topAward> award_list; 
};
struct top_activityInfo
{
	uint32		id;				// 活动ID
	uint32      group_id        // 组id(组内第一个活动的id)
	uint16      group_index;    // 分组顺序
	string      group_name; 	// 所属组名
	string 		name;			// 活动名称
	string		pic;			// 背景图
	uint8		teamType;		// 活动分组
	string		teamName;		// 活动分组名
	uint8		type;			// 排行榜类型(1、充值 2、消费)
	uint32		startTime;		// 开始时间
	uint32		endTime;		// 结束时间
	uint32		value;			// 自己排行榜值
	uint32		rank;			// 自己排名
	vector<activity_topCfg> cfg_list;
	vector<activity_topInfo> info_list;	// 排行榜列表
};
struct GS2U_sendTop_activityInfo__5874 <-
{
	vector<top_activityInfo> info_list;
};


//组队需要占用协议号5875 ———————— 5900 
//##########################################################################################
// 天天乐免费奖励领取
struct U2GS_RebateFreeAward__5901 ->
{
};
struct GS2U_RebateFreeAward__5902 <-
{
	uint32  errorCode;		     // 0-成功，非0-错误原因
};

struct RechargeAward
{
	vector<itemInfo>  itemList;        	// 奖励道具列表
	vector<CoinInfo>  currencyList;		// 奖励货币列表
	vector<EqInfo>    equipmentList;     // 奖励装备列表
};

//充值订单请求确认结果
struct GS2U_NewRechargeResult2__5903 <-
{
	string orderID;				//订单
	uint32	code;				//返回结果码
	int		amount;				//元宝数量
	string	itemid;			//商品辨识符,平台的itemID来辨识
	string	createtime;		//充值时间
	int firstRecharg;			//是否首冲,非月卡有效 0:首充，其它为非首充	
	int addgold;				//额外赠送元宝,永久月卡的晚够补偿，或者元宝充值的首冲双倍总送，或者充值返利
	int freeVipValue;			//获得vip值        
	vector<RechargeAward>  rebateAwardList;        	// 额外奖励列表
	string  comments;	   // 透传参数
	string  price;         // 金额
	string orig_price;     // 原始价格
	string orig_currency;  // 原始货币
};

// 请求仇人数据
struct U2GS_getEnemyInfo__5904 ->
{
	
};
struct enemyInfo
{
	uint64	killID;	//好友ID
	uint	server_id;	// 服务器ID
	uint8	vip;		//VIP等级
	string	playerName;	//好友名
	uint32 	headID;     // 16、头像ID
	uint16	level;		//等级
	uint16	killTimes;	// 击杀次数
	uint32	time;		// 最近击杀时间
	uint32	offlineTime;// 下线时间（0：即为在线）
};
struct GS2U_sendEnemyInfo__5905 <-
{
	vector<enemyInfo> info_list;
};

//删除仇人
struct U2GS_DeleteEnemy ->
{
	uint64	playerID;	//玩家ID
};

struct U2GS_getRouletteSalary__5906 ->
{
	uint32		id;				// 活动ID
};
struct GS2U_sendRouletteSalary__5907 <-
{
	uint32		id;				// 活动ID
	uint32		salIntegral;	// 聚宝盆数量
};
//------------------------野外挂机------------------------------

struct GS2U_WildAutoBoss__5910 <-
{
	uint64				bossID;//BOSS实例ID
	uint				bossDataID;
	uint				bossTime;//1:触发时是刷BOSS的时间戳;2:已刷时是BOSS逃走的时间戳
	uint				mapDataID;
	uint8				state;//0:死亡 1:触发;2:已刷
};
struct GS2U_AddExp <-
{
	uint64			exp;
	uint16			add_multi;  // 显示的经验加成百分比
	uint8			reason; // 显示加成百分比 1- 300属性+301属性  2- 300属性 
};
//------------------------野外挂机 END------------------------------


//技能可用次数请求
struct U2GS_SkillUseCount__5914 ->
{
	uint64  objectID;		//玩家ID
	uint32	skillID;		//技能ID	
};

//技能可用次数回复
struct GS2U_SkillUseCount__5915 <-
{
	uint64  objectID;		//玩家ID
	uint32	skillID;		//技能ID
	uint32	useCount;		//可用次数
	uint32  updateLastTime;		//上次更新时间
};
struct U2GS_GetObjectPos__5916 ->
{
	uint64				objectID;
};
struct GS2U_ObjectPos__5917 <-
{
	uint64				objectID;
	PosInfo	posInfo;//坐标位置
};


struct U2GS_MopupDungeonActive__5919 ->
{
	uint				dungeonID;
	uint8				enterType;//1:使用挑战次数和体力 2:使用令牌
};
struct GS2U_MopupDungeonActive__5920 <-
{
	uint				dungeonID;
	vector<CoinInfo>	coinList;//基础货币列表
	vector<itemInfo>	itemList;//基础物品列表
	vector<CoinInfo>	damageCoinList;//伤害货币列表
	vector<itemInfo>	damageItemList;//伤害物品列表
	uint8				isOpenNext;//是否开启了下一关0未开启;1开启了下一关
	uint				result;//0-成功，非0-错误原因
};
// 进入麒麟洞大乱斗
struct U2GS_MeleeEnter__5929 ->
{
};
struct GS2U_GetItemDropShowRet__5931 <-
{
	vector<itemInfo>	itemList;//物品列表
};
// ------------------------运镖-----------------------
// 请求镖车基础数据
struct U2GS_getConvoyInfo__5932 ->
{
};
struct GS2U_sendConvoyInfo__5933 <-
{
	uint32				award_id;	// 奖励ID
	uint8				insured;	// 是否投保（1:是 0:未投保）
	uint16				refreshTimes;	// 品质刷新次数
	uint32				start_time;		// 接镖时间(0：还没接镖)
	uint8               isBorder;      // 是否边境运镖 1 边境 0 本地 2 还没接
};
//  投保
struct U2GS_InsureConvoy__5934 ->
{
};
struct GS2U_InsureConvoyResult__5935 <-
{
	uint32				result;
};
// 刷新镖车品质
struct U2GS_refreshQuality__5936 ->
{
	uint8				isMax;	// 是否一键橙色(0:不是,1:是)
};
struct GS2U_refreshQualityResult__5937 <-
{
	uint32				result;
};
// ------------------------运镖end--------------------

// Buff球
struct LookInfoBuffObject
{
    uint64  id;             // 实例ID
	uint32  dataID;         // 配置ID
	float   x;              // 坐标
	float   y;
};
struct GS2U_BuffObjectList__5938 <-
{
    vector<LookInfoBuffObject>  buffObjectList;      // 视野范围内Buff球列表
};

// Buff球拾取
struct U2GS_UseBuffObject__5939 ->
{
    uint64  id;       			// Buff球实例ID
};
struct GS2U_UseBuffObject__5940 <-
{
    uint64	playerID;			// 拾取玩家
    uint64  id;       			// Buff球实例ID
	uint32  dataID;         	// Buff球配置ID
    uint32  errorCode;          // 0-成功，非0-错误原因
};

// 发送有请求救援消息
struct GS2U_sendRescueMsg__5941 <-
{
};
// 请求被救援列表
struct U2GS_getRescueList__5942 ->
{
	
};
struct rescueInfo
{
	uint64		playerID;	// 玩家ID
	string		name;		// 玩家名
	uint32		quality;	// 镖车品质
	uint32		mapdataID;	// 地图配置ID
	float		x;			// 镖车X坐标
	float		y;			// 镖车Y坐标
	uint32		time;		// 救援发布时间
};
// 发送救援列表
struct GS2U_sendRescueList__5943 <-
{
	vector<rescueInfo> rescue_list;
};

struct LookInfoVehicle
{
	uint64 	id;				// 实例ID
	uint32 	dataID;			// 定义ID
	float 	x;				// 坐标
	float 	y;
	uint64	owern_id;		// 所有者ID
	string	name;			// 所有者名字
	uint64	hp;				// 生命值
	uint64	maxHp;			// 最大生命值
	uint8	group;			// 阵营
	uint8	move_state;		// 移动状态（0：移动，1：停止）
	uint64	guildID;		// 仙盟ID
	uint32	move_speed;
	int		charState;		//状态
	uint    serverID;       // 服务器ID
};

struct GS2U_VehicleList__5944 <-
{
	vector<LookInfoVehicle> info_list;	// 视野范围内怪物列表
};

// 接镖，开始运镖
struct U2GS_StartConvoy__5945 ->
{
	uint64		npcID;		// 接镖NPC实例ID
	uint8       isBorder;      // 是否边境运镖 1 边境 0 本地 2 还没接
};
// 接镖反馈
struct GS2U_StartConvoyResult__5946 <-
{
	uint64		npcID;		// 接镖NPC实例ID
	uint32		startTime;	// 接镖开始时间
	uint32		result;		// 反馈ID
};
// 交镖
struct U2GS_CompleteConvoy__5947 ->
{
	uint64		npcID;		// 交镖NPC实例ID
};
// 交镖反馈
struct GS2U_CompleteConvoyResult__5948 <-
{
	uint64		npcID;		// 交镖NPC实例ID
	uint64		exp;		// 经验
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	uint32		result;		// 反馈ID
};

// 镖车上下车
struct U2GS_requestVehicleState__5949 ->
{
	uint8		state;		// 上下车状态（0：上车，1：下车）
};
struct GS2U_PlayerVehicleChangeState__5950 <-
{
	uint64		playerID;	// 玩家ID
	uint32		mapDataID;	// 地图ID
	uint8		state;		// 上下车状态（0：上车，1：下车）
	uint32		result;		// 反馈ID
};

// 传送到镖车身边（不同地图）
struct U2GS_requestRescueVehicle__5951 ->
{
	uint64		targetID;		// 被救援玩家ID
};
struct GS2U_requestRescueVehicleResult__5952 <-
{
	uint64		targetID;		// 被救援玩家ID
	uint32		result;			// 反馈ID
};

//  传送（玩家和镖车一起传送<地图间传送>）
struct U2GS_readyTransferVehicle__5953 ->
{
};
struct GS2U_readyTransferVehicleResult__5954 <-
{
	uint32		result;			// 反馈ID
};
struct U2GS_transferVehicle__5955 ->
{
	uint32		mapdataID;		// 地图ID
};
//------------------------限时折扣------------------------------
// 请求礼包列表
struct U2GS_GetAllTimeLimitGift ->
{	
};
// 礼包结构
struct TimeLimitGift
{
	uint				giftID;		//礼包ID
	string				giftName;	//礼包名
	uint				triTime;	//触发出礼包时的时间戳
	uint				endTime;	//礼包结束的时间戳
	uint				priceType;	//货币类型
	uint				oldPrice;	//原价
	uint				newPrice;	//折扣价
	uint				rebate;		//返利
	uint				totalPrice;	//总价
	uint				salePrice;	//售价
	uint				buyLimit;	//限购次数 0为不限购
	uint8				vip;		//vip
	uint				itemCode;	//礼包编码
	vector<EqBaseInfo>	eqList;		//装备信息
	vector<itemInfo>	itemList;	//物品信息
	vector<CoinInfo>	coinList;	//货币信息
	uint				buyTimes;	//已买次数
};
// 所有礼包列表
struct GS2U_AllTimeLimitGiftRet <-
{
	vector<TimeLimitGift>	infoList;
};
// 礼包列表更新
struct GS2U_TimeLimitGiftUpdate <-
{
	vector<TimeLimitGift>	infoList;
};
// 请求购买礼包
struct U2GS_BuyTimeLimitGift ->
{
	uint				giftID;
};
// 购买礼包结果
struct GS2U_BuyTimeLimitGiftRet <-
{
	uint				giftID;
	uint				result;		//0为成功 其他为失败原因
};
//------------------------限时折扣 END------------------------------

struct MeleeRank
{
    uint16  rank;                   // 排名
    uint32  rankValue;              // 排名值
    uint64  playerID;               // 玩家ID
    string  playerName;             // 玩家名字
    uint64  guildID;                // 仙盟ID
    string  guildName;              // 仙盟名字
    uint64  battleValue;      		// 玩家战斗力
	uint32  totalKillNum;           // 累积击杀
	string  serverName;             //服务器名
	uint32  nationality_id;        // 区域id
};

// 麒麟洞排行榜
struct U2GS_MeleeRankList__5961 ->
{
};
struct GS2U_MeleeRankList__5962 <-
{
    uint32             errorCode;     // 0-成功，非0-错误原因
    vector<MeleeRank>  rankList;      // 成功后有意义，排名列表
    uint16             myRank;        // 成功后有意义，自己的排名，0表示没有上榜
    uint32             myRankValue;   // 成功后有意义，自己的排名值
};

// 麒麟洞排行榜前三名
struct GS2U_MeleeRankTopList__5963 <-
{
	vector<MeleeRank>  rankList;      // 排名列表
	uint16             myRank;        // 自己的排名，0表示没有上榜
    uint32             myRankValue;   // 自己的排名值
	uint8	           myQuality;     // 自己的麒麟洞积分品质：0-无，1-羊，2-狼，3-熊，4-虎，5-麒麟
};

// 镖车交接镖数据
struct GS2U_convoyTransData__5964 <-
{
	uint64		playerID;			// 玩家ID
	uint32		recMapDataID;		// 接镖地图ID
	uint32		recNpcDataID;		// 接镖NPCID
	uint32		recVehicleNpcID;	// 接镖镖车NPCID
	uint32		comMapDataID;		// 交镖地图ID
	uint32		comNpcDataID;		// 交镖NPCID
	uint32		comVehicleNpcID;	// 交镖镖车NPCID
	vector<uint32> map_list;		// 途径地图配置ID列表
};

// 麒麟洞活动状态
struct U2GS_MeleeState__5965 ->
{
};
struct GS2U_MeleeState__5966 <-
{
    uint8   state;          // 状态：0-未开启、1-准备阶段、2-战斗阶段
    uint32  readyTime;      // 准备阶段开始时间点
    uint32  battleTime;     // 战斗阶段开始时间点
    uint32  closeTime;      // 关闭时间点
	uint16  playerCount;    // 活动真实人数
    playerModelUI  firstPlayer;	 // 第一名
};

// 麒麟洞地图倒计时（推送）
struct GS2U_MeleeMapTime__5967 <-
{
	uint8   state;          // 状态：0-未开启、1-准备阶段、2-战斗阶段
	uint32  battleTime;     // 战斗阶段开始时间点
	uint32  closeTime;      // 关闭时间点
	uint32  buffTime;       // 下次Buff刷新时间点，为0表示不刷新了
	uint32  collectionTime; // 下次宝箱刷新时间点，为0表示不刷新了
	uint32  teleporterTime; // 下次传送刷新时间点，为0表示不刷新了
	uint32  bossTime;       // 下次Boss刷新时间点，为0表示不刷新了
	uint32  switchTime;     // 下次阵营整合时间点，为0表示不整合了
    bool    isBossDead;     // BOSS是否已被击杀
};


// 传送门
struct LookInfoTeleporter
{
	uint64  id;             // 实例ID
	uint32  dataID;         // 配置ID
	float   x;              // 坐标
	float   y;
	float   rotw;           // 旋转坐标W
};
struct GS2U_TeleporterList__5971 <-
{
    vector<LookInfoTeleporter>  teleporterList;      // 视野范围内传送门列表
};

// 传送门使用
struct U2GS_UseTeleporter__5972 ->
{
    uint64  id;       			// 传送门实例ID
};
struct GS2U_UseTeleporter__5973 <-
{
    uint64	playerID;			// 使用玩家ID
    uint64  id;       			// 传送门实例ID
	uint32  dataID;         	// 配置ID
    uint32  errorCode;          // 0-成功，非0-错误原因
	uint8	type;				// 传送门类型
};
//------------------------七夕副本（运营活动副本）------------------------------
struct U2GS_GetDungeonLoveInfo__5974->
{
	uint				activeID;//运营活动ID
};
struct GS2U_DungeonLoveRet__5975<-
{
	uint8				fightCount;//已挑战次数
	uint8				enterCount;//剩余次数
	vector<uint8>		indexList;//已领取的奖励序号列表
	uint				dungeonID;//活动对应的副本ID
	uint16				maxTimes;		// 运营活动副本每日最大次数
	vector<entryCond> 	entry_list;	// 进入条件
	vector<uint32> 		dropItem;	// 掉落显示
	vector<conqItem> 	item_list;	// 副本进度奖励
	vector<monsterDrop> drop_list;	// 副本掉落相关参数
	uint32				result;//0表示成功，其他表示错误原因
};
//获取可邀请好友列表
struct U2GS_GetDungeonLoveInviteList__5976->
{
	uint				activeID;//运营活动ID
};
struct GS2U_GetDungeonLoveInviteListRet__5977<-
{
	uint32				result;//0表示成功，其他表示错误原因
	vector<InvitePlayerInfo> friendList;//可邀请好友人员列表
	vector<InvitePlayerInfo> guildList;//可邀请仙盟人员列表
};
//进入房间
struct U2GS_EnterDungeonLoveRoom__5980->
{
	uint				activeID;//运营活动ID
	uint8				isAward;//是否使用收益次数，0：不使用 1：使用
};
//------------------------七夕副本（运营活动副本） END------------------------------
// 获取地图接镖NPC信息
struct U2GS_getConvoyNpcInfo__5981 ->
{	
};
struct GS2U_sendConvoyNpcInfo__5982 <-
{
	uint32			npcDataID;		// 接镖npc配置ID
	float   		x;          // 坐标
	float   		y;
	uint32			npcDataID1;		// 交镖npc配置ID
	float   		x1;          // 坐标
	float   		y1;
};
//------------------------七夕副本（运营活动副本）------------------------------
//进入房间反馈
struct GS2U_EnterDungeonLoveRoomRet__5983 <-
{
	uint8				isAward;//是否使用收益次数，0：不使用 1：使用
	uint32				result;//0表示操作成功，其他表示错误原因
};
//------------------------七夕副本（运营活动副本） END------------------------------
// 请求验证镖车消失
struct U2GS_checkConvoyOutTime__5986 ->
{
	
};

// 麒麟洞Boss结算数据（推送）
struct GS2U_MeleeBossResult__5987 <-
{
	uint32            dataID;       // 怪物配置ID
	vector<CoinInfo>  coinList;     // 货币奖励
	vector<itemInfo>  itemList;     // 道具奖励
};
struct ResultRank
{
	uint16            rank;       // 排名
	string  		  playerName;   // 玩家名字
	uint64			  power;	//战斗力
	uint32            killNum;  // 杀人数
	uint32            score;  // 积分
	uint32			  headID; // 头像id
	uint32			  frame;  // 头像框
	uint32			  career; // 职业
	string            serverName;//服务器名
	uint32            nationality_id;        // 区域id
};
// 麒麟洞地图结算数据（推送）
struct GS2U_MeleeMapResult__5988 <-
{
	uint16            myRank;       // 自己的排名，0表示没有上榜
    uint32            myRankValue;  // 自己的排名值
	vector<CoinInfo>  coinList;     // 货币奖励
	vector<itemInfo>  itemList;     // 道具奖励
    uint64  		  firstPlayerID;     // 第一名玩家ID
    string  		  firstPlayerName;   // 第一名玩家名字
	string            firstServerName;   //第一名服务器名
	uint16            firstTitleID;		// 第一名称号ID
	vector<ResultRank>  resultRankList;     // 结算排名
	ResultRank  		myResultRank;     // 结算排名
};

// 连斩数（推送）
struct GS2U_MapKillNum__5989 <-
{
	uint16  killNum;           // 连斩数
};

// 坐骑总属性
struct GS2U_MountTotalProperty__5991 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};

// 镖车消失
struct GS2U_VehicleDisappear__5992 <-
{
	
};
// 获得物品达到上限
struct GS2U_syncMaxGetItem__5993 <-
{
};
// 玩家完成分享
struct U2GS_completeShare__5994 ->
{
	
};


// 进入修罗战场
struct U2GS_AshuraEnter__5997 ->
{
    uint8   type;          // 类型：1-资格赛、2-决赛
};

// 修罗战场活动状态
struct U2GS_AshuraState__6002 ->
{
};
struct GS2U_AshuraState__6003 <-
{
    uint8   state;          // 状态：0-未开启、1-准备阶段、2-战斗阶段
    uint32  readyTime;      // 准备阶段开始时间点
    uint32  battleTime;     // 战斗阶段开始时间点
    uint32  closeTime;      // 关闭时间点
	playerModelUI ashuraWinner;	// 获胜者
	uint16  worldLevel;      //连服状态时主服的世界等级
};

// 修罗战场地图倒计时（推送）
struct GS2U_AshuraMapTime__6004 <-
{
	uint8   state;          // 状态：0-未开启、1-准备阶段、2-战斗阶段
	uint32  battleTime;     // 战斗阶段开始时间点
	uint32  closeTime;      // 关闭时间点
    uint16  final_num;      // 晋升人数
};

// 修罗战场地图（推送）
struct GS2U_AshuraMapScore__6005 <-
{
    uint32  myScore;   		// 我的积分
	uint16  myKillNum;      // 我的击杀
};

struct AshuraRank
{
    uint16  rank;                   // 排名
    uint32  rankValue;              // 排名值	
    uint64  playerID;               // 玩家ID
    string  playerName;             // 玩家名字
    uint64  guildID;                // 仙盟ID
    string  guildName;              // 仙盟名字
    uint64  battleValue;      		// 玩家战斗力	
	uint32  totalKillNum;           // 累积击杀
	uint32  totalLiveTime;          // 累积存活
	string  serverName;       //服务器名
	uint32  nationality_id;        // 区域id
	uint32  head_id;				// 头像id
	uint32  frame_id;				// 头像框id
};
// 前3名
struct GS2U_AshuraSampleRankList <-
{
    vector<sample_rank>  rank_list;  // 排名列表
};

// 主战场剩余人数
struct GS2U_AshuraMainAliveNum <-
{
    uint16  num;
};

// 1淘汰2
struct GS2U_AshuraKillInfo <-
{
    string  name1;          // 玩家名字
	string  serverName1;       //服务器名
    string  name2;          // 玩家名字
	string  serverName2;       //服务器名
};
// 修罗战场排行榜
struct U2GS_AshuraRankList__6016 ->
{
};
struct GS2U_AshuraRankList__6017 <-
{
    vector<AshuraRank>  rankList;      // 排名列表
    uint16             myRank;        // 自己的排名，0表示没有上榜
    uint32             myRankValue;   // 自己的排名值
	uint32             myTotalLiveTime;   // 自己的累积存活
};

// 修罗战场地图结算数据（推送）
struct GS2U_AshuraMapResult__6018 <-
{
    uint32            totalScore;  	// 自己的积分值
	vector<CoinInfo>  coinList;    // 积分货币奖励 + 参与货币奖励
	vector<itemInfo>  itemList;    // 积分道具奖励 + 参与道具奖励
    uint64  		  winnerPlayerID;     // 获胜者玩家ID
    string  		  winnerPlayerName;   // 获胜者玩家名字
	uint16            winnerTitleID;		// 获胜者称号ID
	vector<ResultRank>  resultRankList;     // 结算排名
	ResultRank  		myResultRank;     // 结算排名
	string  serverName;       //获胜者服务器名
};
// 资格赛结算数据
struct GS2U_AshuraGroupResult <-
{
    uint32            totalScore;  	// 自己的积分值
	vector<CoinInfo>  coinList;    // 积分货币奖励 + 参与货币奖励
	vector<itemInfo>  itemList;    // 积分道具奖励 + 参与道具奖励
    uint64  		  winnerPlayerID;     // 获胜者玩家ID
    string  		  winnerPlayerName;   // 获胜者玩家名字
	uint16            winnerTitleID;		// 获胜者称号ID
	vector<ResultRank>  resultRankList;     // 结算排名
	ResultRank  		myResultRank;     // 结算排名
	string  serverName;       //获胜者服务器名
    uint16  final_num;      // 晋升人数
};
// 决赛失败数据
struct GS2U_AshuraFailResult <-
{
    uint32            totalScore;  	// 自己的积分值
	vector<CoinInfo>  coinList;    // 积分货币奖励 + 参与货币奖励
	vector<itemInfo>  itemList;    // 积分道具奖励 + 参与道具奖励
};

// 请求成为观战者
struct U2GS_AshuraView ->
{
};
struct GS2U_AshuraView <-
{
    uint32  errorCode;		// 0-成功，非0-错误原因
};

// 修罗战场剩余死亡次数（推送）
struct GS2U_AshuraDeathNum__6019 <-
{
	uint16  deathNum;		// 剩余死亡次数
};

struct AshuraAchieve
{
	uint32  winNum;		    // 获胜次数
    uint32  totalKillNum;   // 最大单场累杀
	uint32  totalNum1;		// 资格赛——参与次数
	uint32  totalScore1;  	// 资格赛——累积积分
	uint32  totalKillNum1;  // 资格赛——最大单场累杀
	uint32  killNum1;  		// 资格赛——最大连斩
	uint32  totalNum2;		// 决赛——参与次数
	uint32  totalScore2;  	// 决赛——累积积分
	uint32  totalKillNum2;  // 决赛——最大单场累杀
	uint32  killNum2;  		// 决赛——最大连斩
};

// 服务端发送修罗战场成就信息，玩家上线发送
struct GS2U_AshuraAchieveInfo <-
{
	AshuraAchieve  achieve;
    vector<uint8>  finishList;		// 已领奖的成就序号
};

// 修罗战场成就更新通知
struct GS2U_AshuraAchieveUpdate <-
{
	AshuraAchieve  achieve;
};

// 修罗战场成就领奖
struct U2GS_AshuraAchieveFinish__6022 ->
{
    uint8  index;
};
struct GS2U_AshuraAchieveFinish__6023 <-
{
    uint8  index;
    uint32  errorCode;		// 0-成功，非0-错误原因
};

// 拉到下一张地图
struct U2GS_AshuraEnterNextMap->
{
};
struct GS2U_AshuraEnterNextMapRet <-
{
    uint32  errorCode;		// 0-成功，非0-错误原因
};
//------------------------跨服比武------------------------------
struct U2GS_GetCroFightRingInfo__6024 ->
{
	uint8				isInvite;//是否是邀请而打开界面的（0：主动打开;1：收到邀请而打开）
};
struct GS2U_GetCroFightRingRet__6025 <-
{
	uint8				season;//第几赛季
	uint				seasonStartTime;//赛季开始的时间戳
	uint				seasonEndTime;//赛季结束的时间戳
	uint8				officeType;//排行类型
	uint8				office;//官职 （和上面排行类型组成段位）
	uint				score;//积分
	uint8				fightCount;//挑战次数
	uint32				retrieveCount;//找回次数
	uint32				retrieveHistory;//找回次数
	uint8				buyHistory;//今日已购买次数
	uint32				rank;//排行
};
//获取可邀请好友列表
struct U2GS_GetCroFightRingInviteList__6026 ->
{
};
struct GS2U_GetCroFightRingInviteListRet__6027 <-
{
	uint32				result;//0表示成功，其他表示错误原因
	vector<InvitePlayerInfo> friendList;//可邀请好友人员列表
	vector<InvitePlayerInfo> guildList;//可邀请仙盟人员列表
};
//邀请操作
struct U2GS_CroFightRingInvite__6028->
{
	uint8				opType;//0 邀请指定人 1 邀请随机好友 2 邀请随机世界玩家 3：进入匹配池 4:被占用 5:仙盟频道邀请
	vector<uint64>		playerIDList;//指定人时，这里是玩家ID列表 只有上面类型为0时用到
};
//B玩家 收到邀请内容
struct GS2U_CroFightRingInviteInfo__6029<-
{
	uint64				roomID;//房间ID
	uint64     			playerID;//邀请玩家ID，即A玩家ID
	string				invitePlayerName;//邀请人的名字
	uint32				career;//邀请人的职业
	uint32				fateLevel;//邀请人的命格
	uint8				enterCount;//剩余的进入次数
	uint32				headID;//邀请人的头像ID
	uint16				level;//邀请人的等级
	uint64				battleValue;//邀请人的战斗力
	uint32				vip;//邀请人的VIP
};
//B玩家的邀请回复，直接进入房间消息
//房主可以开始、取消匹配
struct U2GS_ChangeCroFightRingMatchState__6030->
{
	uint8				state;//0取消匹配 1进入匹配
};
struct GS2U_ChangeCroFightRingMatchStateRet__6031<-
{
	uint				result;//0表示成功，其他表示错误原因
	uint8				state;//0取消匹配 1进入匹配
};
//推送地图活动状态
struct GS2U_CroFightRingMapState__6032<-
{
	uint8				state;//2准备阶段 3战斗阶段
	uint32				time;//2准备阶段表示战斗开始时间戳;3战斗阶段表示战斗结束时间戳
};
//------------------------跨服比武 END------------------------------

//------------------------跨服比武------------------------------
struct CroFightRingScore
{
	uint8				groupID;//阵营ID
	uint				score;//积分
	uint				killNum;//总杀人数
};
struct GS2U_CroFightRingScore__6039<-
{
	vector<CroFightRingScore> infoList;
};
struct CroFightRingArea
{
	uint8				dataID;//区域（光环）序号
	uint8				groupID;//真实所属方
	uint8				progressGroupID;//涨进度方
	uint				progress;//进度值
};
struct GS2U_CroFightRingArea__6040<-
{
	vector<CroFightRingArea> infoList;
};
//------------------------跨服比武 END------------------------------

// 抽卡领奖
struct U2GS_HeroDrawAddAward__6041 ->
{
	uint8  data_id; 		// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	uint8  index;     		// 序号
	uint8  choice;			// 奖励选择：1-奖励1、2-奖励2、3-奖励3
};
struct GS2U_HeroDrawAddAward__6042 <-
{
	uint8  data_id; 		// 寻宝Id：1装备寻宝、2龙印寻宝、3高级骑宠翼寻宝、4传说骑宠翼寻宝
	vector<HeroDrawFinishAward>  draw_list;    // {序号 奖励选择}
	uint32 errorCode;		// 0-成功，非0-错误原因
};

//------------------------跨服比武------------------------------
struct U2GS_BattleTopRank__6043 ->
{
	uint8	type;			// 1本服排行榜，2跨服排行榜
};
//获取战报
struct U2GS_GetCroFightRingReport__6045->
{
	uint32	time; //如果没有就填0
};
struct CroFightRingReportPlayer
{
	uint64				playerID;
	string				name;
	uint				vip;
	uint16				career;
	uint16				level;
	uint				headID;
	uint				serverID;
	uint				battleValue;
	vector<topBattleHero>	heroList;
	uint16				killNum;
	uint16				deadNum;
	uint				fateLevel;
	uint8				officeType;
	uint8				office;
	uint8				sex;
};
struct CroFightRingGroup
{
	uint8				groupID;
	uint				score;
	vector<CroFightRingReportPlayer> playerList;
};
struct GS2U_GetCroFightRingReportRet__6046<-
{
	uint8				winGroupID;//获胜方阵营ID，1代表双方都失败
	uint64				mvpPlayerID;
	vector<CroFightRingGroup>	groupList;
};
struct GS2U_CroFightRingSettle__6047<-
{
	uint8				winGroupID;//获胜方阵营ID，1代表双方都失败
	uint64				mvpPlayerID;
	vector<CroFightRingGroup>	groupList;
	uint16				score;//获得的积分奖励
};
struct U2GS_GetCroFightRingAttainment__6048->
{
	
};
struct CroFightRingAttainment
{
	uint				attainmentDataID;//成就配置ID
	uint				value;//当前值（比如进入次数，5代表进入了5次）
	uint8				isAward;//是否已经领取了奖励 0未领取;1已领取
	uint				value2;//当前值2
};
struct GS2U_CroFightRingAttainmentRet__6049<-
{
	vector<CroFightRingAttainment>	infoList;
};
//成就有红点时，主动推送
struct GS2U_CroFightRingAttainmentRed__6050<-
{
	
};
struct U2GS_GainCroFightRingAttainment__6051->
{
	uint				attainmentDataID;//成就配置ID
};
struct GS2U_GainCroFightRingAttainmentRet__6052<-
{
	uint				result;
	uint				attainmentDataID;//成就配置ID
};
//------------------------跨服比武 END------------------------------

// 神翼总属性
struct GS2U_WingTotalProperty__6053 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};

// 元神总属性
struct GS2U_SpiritTotalProperty__6054 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};
//------------------------跨服比武 END------------------------------
struct GS2U_CroFightRingOfficeChange__6055<-
{
	uint8		oldOfficeType;//原官职类型
	uint8		oldOffice;//原官职
	uint8		officeType;//官职类型
	uint8		office;//官职
};


struct U2GS_CroFightRingRecord__6056->
{

};

struct CroFightRingInfo
{
	uint32	time; //时间作为索引 秒
	uint8	isWin; //1 win ,2平 ，3输 4主动放弃
};
struct GS2U_CroFightRingRecordRet__6057<-
{
	vector<CroFightRingInfo>  recordList;
};
//通知客户端还有未结束的地图活动
struct GS2U_UnfinishBattle__6058<-
{
	uint8	mapAi;
};
struct U2GS_DealUnfinishBattle__6059->
{
	uint8				dealType;//1:放弃战斗（战斗场景、主城发送）;2：进入战斗
	uint8				mapAi;
};
//进出积分区域
struct U2GS_CroFightRingInOutArea__6060->
{
	uint8				dataID;//区域（光环）序号
	uint8				type;//1进入;2退出
};

//------------------------跨服比武 END------------------------------

//竞技场压制性获胜(压制性扫荡)
struct U2GS_ArenaDirectWin__6127 ->
{
	uint16				rankNumber;//挑战对象 这里发送位置Rank
};
struct GS2U_ArenaDirectWinRet__6128 <-
{
	uint				result;//0为成功 其他表示对应的错误码
	uint16				rankNumber;//挑战对象 这里发送位置Rank
};


// 邀请函
struct GS2U_newInvitation__6129 <-
{
	vector<dartsInvitation> invite_list;
};

// 投掷飞镖
struct U2GS_peltDarts__6130 ->
{
	uint32				id;
	uint8				type;		// 场次类型(1:精英场，2:会员场，3:大师场，4:赞助场)
};
// 投掷反馈
struct GS2U_peltDartsResult__6131 <-
{
	uint32				id;
	uint8				type;		// 场次类型(1:精英场，2:会员场，3:大师场，4:赞助场)
	uint16				ring;		// 环数
	uint32				result;		
};

// 领取飞镖积分
struct U2GS_getDartsPoint__6132 ->
{
	uint32				id;
};
// 领取反馈
struct GS2U_getDartsPointResult__6133 <-
{
	uint32				id;
	uint32				result;		
};

// 兑换物品
struct U2GS_exchangeDartsItem__6134 ->
{
	uint32		id;					// 活动ID
	uint32		index;				// 奖励序号
	uint16		times;				// 兑换次数
};
// 兑换反馈
struct GS2U_exchagneDartsItemResult__6135 <-
{
	uint32		id;					// 活动ID
	uint32		index;				// 奖励序号
	uint32		changeIntegral;		// 兑换积分
	uint32		result;				// 兑换反馈
};

// 领取答谢积分
struct U2GS_getDayPoints__6136 ->
{
	uint32		id;					// 活动ID
};
// 领取答谢积分反馈
struct GS2U_getDayPointsResult__6137 <-
{
	uint32		id;					// 活动ID
	uint32				point;		// 领取的积分
	uint32				result;
};

// 法宝总属性
struct GS2U_SutraTotalProperty__6138 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};

//激活场次
struct U2GS_activeDarts__6139 ->
{
	uint32				id;
	uint8				type;
	uint16				level;
};
// 激活反馈
struct GS2U_activeDartsResult__6140 <-
{
	uint32				id;
	uint8				type;
	uint16				level;
	uint32				result;
};

// 怪物说话
struct GS2U_MonsterTalk__6143 <-
{
	uint64         id;        	// 对象ID
	vector<uint32> talkIDList;	// 说话的ID列表
};

// 怪物读条开始
struct GS2U_MonsterProgress__6144 <-
{
	uint64  id;				// 对象ID
	uint32	type;			// 类型
	uint64  param1;			// 参数1
	uint32  param2;			// 参数2
};
// 怪物读条成功
struct GS2U_MonsterProgressSuccess__6145 <-
{
	uint64  id;				// 对象ID
	uint32	type;			// 类型
	uint64  param1;			// 参数1
	uint32  param2;			// 参数2
};
// 怪物读条失败
struct GS2U_MonsterProgressFailure__6146 <-
{
	uint64  id;				// 对象ID
	uint32	type;			// 类型
	uint64  param1;			// 参数1
	uint32  param2;			// 参数2
};

// 怪物玩法提示添加
struct GS2U_MonsterPlayAdd__6147 <-
{
	uint32  playID;			// 玩法配置ID
	uint32  param1;			// 参数1
	uint32  param2;			// 参数2
};
// 怪物玩法提示移除
struct GS2U_MonsterPlayRemove__6148 <-
{
	uint32  playID;			// 玩法配置ID
};
// 怪物玩法提示更新
struct GS2U_MonsterPlayUpdate__6149 <-
{
	uint32  playID;			// 玩法配置ID
	uint32  param1;			// 参数1
	uint32  param2;			// 参数2
};

// 显示或隐藏标记
// 1-隐藏HUD头衔      0-不隐藏  1-隐藏
// 2-隐藏聊天VIP等级  0-不隐藏  1-隐藏
// 3-隐藏跑马灯公告   0-不隐藏  1-隐藏
struct U2GS_ShowInfoMark ->
{
  uint32 mask;
};
struct GS2U_ShowInfoMark <-
{
};
// 更新玩家地图中当前法宝
struct U2GS_updateMapSutra__6152 -> 
{
	uint64			playerID;
	uint32			cur_data_id;	// 当前选中的法宝ID
};
struct playerMapSutra
{
	uint64			playerID;		// 玩家ID
	uint32			cur_data_id;	// 当前选中的法宝ID
};
// 同步玩家地图中当前法宝
struct GS2U_syncPlayerMapSutra__6153 <-
{
	vector<playerMapSutra> sutra_list;	
};
// 怪物玩法Tips
struct GS2U_MonsterPlayTips__6156 <-
{
	uint32  tipsID;			// 配置ID
	uint32  param1;			// 参数1
	uint32  param2;			// 参数2
};


// 领地战战报列表
struct U2GS_CrofightRingRetrieve__6157 ->
{
	uint32	retrieveCount;	//找回次数
};
struct GS2U_CrofightRingRetrieveRet__6158 <-
{
   uint32	result; // 0=ok，其他错误码
   uint32	retrieveHistory; //找回总次数
};

// 装备总属性
struct GS2U_EquipTotalProperty__6159 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};

//房主改变房间状态
struct U2GS_RoomStateChange__6160 ->
{
	uint8	state;	//1 房间队伍准备，0取消准备
};
struct GS2U_RoomStateChangeNotify__6161 <-
{
   uint8	state;
   uint8 	mapAi;
};

// 怪物消失
struct GS2U_MonsterDisappear__6162 <-
{
	uint64  id;				// 对象ID
	uint32  param;			// 参数
};

// 地图内自己获得积分等通告
struct GS2U_MapGainNotify__6163 <-
{
	vector<string> notice;
};



// 圣印精炼
struct U2GS_GemRefine__6164 ->
{
    GemID  gemID;       // 孔ID
};
struct GS2U_GemRefineRet__6165 <-
{
    GemID   gemID;          // 孔ID
    uint32  errorCode;      // 0-成功，非0-错误原因
    uint8   param;       // 成功后有意义，新的孔等级
};


//特殊附近数据
struct GenItem
{
	uint8  	key;	//1亲密度
	uint32  value;	//值
};

struct GS2U_GenInviteNotice__6166 <-
{
   uint64	fromid;
   uint32	fateLevel;
   uint32	career;
   uint64	battleValue;
   uint32	headID;
   uint32	frame;					   // 头像框
   uint16	level;
   uint8	vip;
   uint8	type; //1约会，2定亲，3离婚 4情定三生召集
   uint32	time_out;
   string   fromName;
   vector<GenItem> info;
   string	message;
};

struct U2GS_GenInviteNoticeReply__6167 ->
{
	uint64	fromid;
	uint8	type;
	uint8	reply;	//0拒接，1同意
};

struct GS2U_GenInviteNoticeReplyRet__6168 <-
{
	uint32	errorCode;	//0,ok 其他值为错误码
	uint32  type;       // 
};


// 约会相关
struct U2GS_RequestFriendsCanTrystTimes__6169 ->
{
};
struct PlayerTrystTimes 
{
  uint64	playerID;
  string  playerName;
  uint8   times;       // 可约会次数
};
struct GS2U_RequestFriendsCanTrystTimesRet__6170 <-
{
  vector<PlayerTrystTimes>  timesList;
};
struct U2GS_RequestTryst__6171 ->
{
	vector<uint64> roleidList;  // 邀请约会的对象
	uint8          trystType;   // 约会类型(场景类型)
};
// A邀请B 和B同意A 都会发这个消息
struct GS2U_RequestTrystRet__6172 <-
{
  uint32	errorCode;	// 0,ok 其他值为错误码
  uint8   trystType;   // 约会类型(场景类型)
  uint64	fromid;     // 约会成功有意义 表示同意约会邀请玩家的信息
  string  fromName;   
};
// 约会增加亲密度
struct U2GS_IntimacyAddByTryst__6174 ->
{ 
  uint8   addType; // 0-每x秒发送一次，获取约会亲密度收益  1-烟花  2-准备动作(判断cd)  3-收益
  uint32  param;	 // 参数  addType 为0时无意义   为1时表示烟花道具id   为2时表示互动类型id
};
struct GS2U_IntimacyAddByTrystRet__6175 <-
{
  uint32	errorCode;	// 0,ok 其他值为错误码
  uint8   addType; //   1-烟花  2-准备动作(判断cd)  3-收益
  uint32  param;	 // 参数  为1时表示烟花道具id   为2时表示互动类型id
  uint64  sourcePlayerID; // 发起人
	uint32	intimacy; // 当前亲密度	
};

// 提亲相关
struct U2GS_RequestEngage__6176 ->
{
	uint64  roleid;           // 提亲对象
	uint8   broadcastType;    // 广播类型
	string  sweet;            // 蜜语
};
//发送给提请发，返回提亲邀请的结果
struct GS2U_RequestEngageRet__6177 <-
{
  uint32	errorCode;	// 0表示提亲成功，164004对方有未处理的提亲，164010对方离线
  uint64	timestamp;  // 提亲时间 用于失败计算CD 倒计时纠正
  string    sweet;      // 蜜语
};
// 用于断线重连发送给提亲方 
struct GS2U_EngageInfo__6178 <-
{
  string  playerName; // 提亲对象
  uint64  timestamp;  // 提亲时间 倒计时纠正
  string  sweet;      // 蜜语 
};


// 通知进入拜堂地图
struct GS2U_CeremonyNotity__6179 <-
{
  string  playerNameA;  // 新人A
  string  playerNameB;  // 新人B
};
// 请求进入拜堂地图
struct U2GS_RequestEnterCeremonyMap__6180 ->
{
};

struct GS2U_RequestEnterCeremonyMapRet__6181 <-
{
  uint32	errorCode;	// 0,ok 其他值为错误码
  uint8   type;       // 拜堂状态 1- 等待拜堂开始  2 - 拜堂已经开始 3- 其他
  uint64  time;       // 对应类型
};

// 进入约会地图
struct U2GS_TrystEnter__6182 ->
{
  uint8   trystType;   // 约会类型(场景类型)
};

// 索要请帖：发起请求
struct U2GS_WeddingInviteAsk__6183 ->
{
	uint64  playerID;		// 新郎ID、新娘ID
};
struct GS2U_WeddingInviteAsk__6184 <-
{
    uint32  errorCode;      // 0-成功，非0-错误原因
};
// 索要请帖：有请求通知
struct GS2U_WeddingInviteAskNotify__6185 <-
{
};

// 发请帖：请帖列表
struct WeddingInvite
{
	uint64  playerID;                  // 目标角色ID
	string  name;                      // 主角名字
	uint32  career;                    // 主角职业
	uint16  level;                     // 主角等级
	uint32  fateLevel;                 // 主角命格等级
	uint64  battleValue;               // 主角战斗力
	uint32  vip;                       // VIP等级
	string  guildName;                 // 主角仙盟名字
    uint32  guildRank;                 // 主角仙盟职位
	uint32  headID;                    // 头像ID
	uint32	frame;					   // 头像框
    uint64  guildID;                   // 主角仙盟ID
	uint8   sex;                       // 性别
	bool    isOnline;                  // 在线
	uint16	intimacyLevel;			   // 亲密度等级
	uint32	intimacy;				   // 亲密度
	bool    isInvited;                 // 已邀请
};
struct U2GS_WeddingInviteList__6186 ->
{
};
struct GS2U_WeddingInviteList__6187 <-
{
    uint32                 errorCode;                // 0-成功，非0-错误原因
    vector<WeddingInvite>  friendsInviteList;        // 成功后有意义，好友请帖列表
	vector<WeddingInvite>  guildInviteList;          // 成功后有意义，仙盟请帖列表
	vector<WeddingInvite>  askInviteList;            // 成功后有意义，索要请帖列表
	bool                   isRejectAsk;              // 是否拒绝索要
};
// 发请帖：发送请帖
struct U2GS_WeddingInviteSend__6188 ->
{
	vector<uint64>  playerIDList;        			// 玩家ID列表
};
struct GS2U_WeddingInviteSend__6189 <-
{
    uint32          errorCode;      				// 0-成功，非0-错误原因
	vector<uint64>  playerIDList;        			// 成功后有意义，发送成功的玩家ID列表
};
// 发请帖：请帖通知
struct GS2U_WeddingInviteSendNotify__6190 <-
{
	uint32  ceremonyTime;          // 婚礼时间
	uint64  playerID1;             // 玩家ID
	string  name1;                 // 玩家名字
	uint8   sex1;                   // 玩家性别
	uint32  career1;			        // 职业
	uint64  playerID2;
	string  name2;
	uint8   sex2; 
	uint32  career2;
	bool    isMarryNotify;         // 是否拜堂推送
};
// 发请帖：接受请帖
struct U2GS_WeddingInviteReceive__6191 ->
{
	uint64  playerID;		       // 新郎ID、新娘ID
};

struct playerCareer
{
	uint64		playerID;		// 玩家ID
	uint32		career;			// 职业
};
struct U2GS_getWeddingLookInfo__6192 ->
{
	vector<playerCareer> player_list;
}

struct weddingLookInfo
{
	uint64	playerId;	//角色ID
	uint32  career;		// 职业
	uint32 ponchoLevel;            // 15、披风阶数
	vector<uint32> fashionCfgIDList;  // 可见时装配置ID列表
	vector<uint32> equipCfgIDList;    // 可见装备配置ID列表
	vector<uint16> intensityLvList;	// 强化等级列表
	uint16  suitChara;			// 13、觉醒大师等级
	uint16  suitLevel;          // 30、强化大师等级
	uint16  suitQuality;        // 31、精炼大师等级
	uint32  wingCfgID;	     // 128、佩戴神翼ID
};
struct GS2U_sendWeddingLookInfo__6193 <-
{
	vector<weddingLookInfo> info_list;
};

// 推送仙侣基本信息，上线推送，变更推送
struct GS2U_WeddingInfo__6194 <-
{
	uint8   state;				// 仙侣状态：0-未婚、1-订婚、2-已婚
	uint64  otherPlayerID;		// 仙侣对方ID
	string  otherPlayerName;    // 仙侣对方名字
	uint8   otherPlayerSex;      // 仙侣对方性别
	uint8   ceremonyType;		// 婚礼类型，0表示没有婚礼
	uint32  ceremonyBeginTime;	// 婚礼开始时间
	uint32  ceremonyEndTime;	// 婚礼结束时间
};




struct formation
{
	uint64		objectID;		// 实例ID 
	uint32		dataID;			// 配置ID
};

// 迎亲车队信息
struct GS2U_sendCruiseInfo__6195 <-
{
	uint64		bridegroomID;		// 新郎ID
	uint64		brideID;			// 新娘ID
	uint64		bride_object_id;	// 新娘载具实例ID
	uint32		cruise_id;			// 游行配置ID
	float		x;
	float		y;
	int			way_point;			// 当前路点
	uint16		mapIndex;			// 地图索引
	vector<formation> ox_list;	// 牛车列表
	vector<formation> npc_list;	// NPC列表
};

// -------------------------------------------------

// 定情信物洗练属性
struct RingCastPropInfo
{
	uint8	  index;		       // 洗练属性索引
	uint16	propID;			     // 熟悉ID
	uint16  level;           // 等级
};
// 定情信物
struct RingInfo
{
	uint32	ringID;		       // 定情信物ID
	uint16	level;			     // 等级
	uint16  star;              // 星级
	uint16  exp;             // 经验
	uint16	partnerLevel;		 // 仙侣戒指的等级
	uint16  partnerStar;              // 仙侣戒指的星级
	vector<RingCastPropInfo>  prop;
	vector<RingCastPropInfo>  propTemp;  // 等待替换的属性
};
// 服务端发送定情信物列表
struct GS2U_RingList__6196 <-
{
	vector<RingInfo>	ringList;	// 所有定情信物列表
};
// 客户端请求得到定情信物
struct U2GS_RingAdd__6197 ->
{
	uint32	ringID;			// 定情信物ID
};
// 得到定情信物
struct GS2U_RingAdd__6198 <-
{
  uint32	errorCode;			    // 0-成功，非0-错误原因
	vector<RingInfo>	ringList;	// 定情信物列表 errorCode 为0时生效
};
// 洗练
struct U2GS_RingCast__6200 ->
{
	uint64	ringID;			// 
	
};
// 洗练替换属性
struct U2GS_RingCastReplace__6201 ->
{
	uint64	ringID;			// 
	vector<RingCastPropInfo>  propList;
};

// 升级、 洗练 替换 都返回这个消息
struct GS2U_RingRet__6202 <-
{
  uint8   type;      // 1- 升级返回    2- 洗练返回     3- 洗练属性替换返回 4 升星返回
	uint32	errorCode;			// 0-成功，非0-错误原因
	RingInfo ringInfo;      // 成功后返回新信息
	uint32   param;     // 如果type是1  表示升级增加的经验
};

// 信灵升级
struct U2GS_RingSoulAdd__6203 ->
{
  uint16  addLevel;  // 升多少级
};

// 信灵升级 返回
struct GS2U_RingSoulAddRet__6204 <-
{
	uint32	errorCode;			// 0-成功，非0-错误原因
	uint16  addLevel;       // 升多少级 errorCode 为0时生效
};

//订婚结果推送订婚双方
struct GS2U_WeddingEngageNotify__6205 <-
{
	uint32	errorCode;//为0时判断state，不为0表示错误码
	uint8	state;	//1，定亲成功,2对方拒绝,3，邀请超时
					
};



// 约会副本开始计时
struct GS2U_TrystStart__6206 <-
{
	uint64	timestamp;			
};
// 约会副本开始
struct U2GS_TrystStart__6207 ->
{
};

// 记录经过的路点
struct U2GS_syncCruiseWayPoint__6208 ->
{
	int		wayPoint;
	float	length;
};

// 准备切换地图
struct U2GS_readyTransCruise__6209 ->
{
};
struct GS2U_readyTransCruiseResult__6210 <-
{
	uint32		result;		// 错误码
};
//通用错误消息
struct GS2U_GenErrorNotify__6211 <-
{
	uint32	errorCode;
	uint32	msgid; //触发该错误消息的来源消息id
};

// 离婚
struct U2GS_DivorceAgreement__6212 ->
{
	uint8	type;//离婚请求1协议离婚，2对方7天未上线，3，强制离婚，4定亲状态毁婚
};

// 离婚
struct GS2U_DivorceAgreementRet__6213 <-
{
	uint32	errorCode; //0请求成功，其它为错误码
	uint8	state;	//1离婚成功，2已提交离婚手续等待对方回应，3悔婚成功
};



// 废弃----------- 离婚状态结果通知
/*struct GS2U_DivorceStateNotify__6214 <-
{
	uint8	state; //1，离婚成功;2对方拒绝，3离婚请求超时
	uint64	playerid;//对方id
	string	name; //对方名字
};*/

// 拜堂地图信息：进地图推送，变化时推送
struct GS2U_WeddingMarryMapInfo__6215 <-
{
	uint8   state;          	// 状态：0-空闲、1-等待阶段、2-确认阶段、3-仪式阶段、4-开宴阶段、5-离开阶段
	uint32  waitingTime;    	// 等待结束时间点
	uint32  confirmTime;    	// 确认结束时间点
	uint32  marryTime;    		// 仪式结束时间点
	uint32  feastTime;    		// 开宴结束时间点
	uint32  leaveTime;    		// 离开结束时间点
	uint64  playerID1;		    // 新郎ID、新娘ID
	bool    isConfirm1;         // 是否已经确认
	uint64  playerID2;		  
	bool    isConfirm2;       
};
// 拜堂地图仪式确认
struct U2GS_WeddingMarryConfirm__6216 ->
{
};
struct GS2U_WeddingMarryConfirm__6217 <-
{
    uint32  errorCode;			// 0-成功，非0-错误原因
};

// 请求结婚记录
struct U2GS_getMerryRecord__6218 ->
{
	
};
struct merryRecord
{
	uint32			index;				// 索引
	uint64			bridegroomID;		// 新郎ID
	string			bridegroomName;		// 新郎名字
	uint32			bridegroomFateLeve;	// 新郎命格等级
	uint64			brideID;			// 新娘ID
	string			bridegName;			// 新娘名字
	uint32			brideFateLeve;		// 新娘命格等级
	uint8			type;				// 婚礼类型
	uint32			time;				// 举办时间
};
struct GS2U_sendMerryRecord__6219 <-
{
	merryRecord selfRecord;				// 自己的数据
	vector<merryRecord> rercord_list;	// 正序500个
	vector<merryRecord> last_list;	// 倒序50个
};

// 预约记录
struct U2GS_getReservationRecord__6220 ->
{
	
};
struct reservation
{
	uint64			bridegroomID;		// 新郎ID
	uint32			bridegroomFateLeve;	// 新郎命格等级
	string			bridegroomName;		// 新郎名字
	uint64			brideID;			// 新娘ID
	uint32			brideFateLeve;		// 新郎命格等级
	string			bridegName;			// 新娘名字
	uint8			type;				// 婚礼类型
	uint32			resTime;			// 预约时间
	uint32			orTime;				// 举办时间
	uint8			isBless;			// 是否祝福（1：是，0：否）
	uint8			isRequest;			// 是否索要请帖（1：是，0：否）
};
struct GS2U_sendReservationRecord__6221 <-
{
	vector<reservation> res_list;
};

// 我的婚礼记录
struct U2GS_getWeddingRecord__6222 ->
{
	
};
struct weddingGiftRank
{
	uint64			targetID;		// 玩家ID
	string			name;			// 玩家名字
	uint32			fateLevel;		// 命格等级
	uint16			rank;			// 排名
	uint16			giftNum;		// 贺礼数量
	uint32			totalValue;		// 总价值
};
struct weddingRecord
{
	uint32			time;			// 时间
	uint64			targetID;		// 玩家ID
	string			name;			// 玩家名字
	uint32			fateLevel;		// 命格等级
	uint8			type;			// 婚礼类型
	uint16			packetNum;		// 红包数量
	uint32			goldNum;		// 总元宝数量
	uint16			giftNum;		// 收到贺礼数量
	uint32			totalValue;		// 总价值
	vector<weddingGiftRank> rank_list;
};
struct GS2U_sendWeddingRecord__6223 <-
{
	vector<weddingRecord> wedding_list;
};

// 姻缘记录
struct U2GS_getMarriageInfo__6224 ->
{
	
};
struct marriage
{
	uint32			time;			// 时间
	uint8			type;			// 记录类型(1:发出的提亲，2：收到的提亲, 3:成亲 4：预定婚礼 5：举办婚礼 6：离婚)
	uint64			targetID;		// 玩家ID
	string			name;			// 玩家名字
	uint32			fateLevel;		// 命格等级
	vector<uint32>	param_list;		// 参数列表
	string			extra_param;	// 特殊文字记录，如提亲誓言等
};
struct GS2U_sendMarriageInfo__6225 <-
{
	vector<marriage> marriage_list;
};

// 约会副本基础亲密度达到上限
struct GS2U_DatingIntimacyMax__6226 <-
{
};
// 亲密度达到上限后 客户端主动退出
struct U2GS_FinishTryst__6227 ->
{
};
// 约会副本超时
struct GS2U_TrystFinish__6228 <-
{
  uint8 type; // 0-成功 1-失败
};

// 婚礼预约：预约列表
struct WeddingOrder
{
	uint32  beginTime;				// 一天的0点时间
	uint8   number;					// 一天的第几场（从1开始）
	uint64  playerID1;              // 玩家ID
	string  playerName1;            // 玩家名字
	uint64  playerID2;              // 玩家ID
	string  playerName2;            // 玩家名字
	uint32  orderTime;				// 预约时间
};
struct U2GS_WeddingOrderList__6229 ->
{
	uint8   type;					// 1-高级、2-皇家
};
struct GS2U_WeddingOrderList__6230 <-
{
    uint32  errorCode;						// 0-成功，非0-错误原因
	vector<WeddingOrder>  orderList;        // 成功后有意义，预约列表（只发有人预约的）
};
// 婚礼预约：预约场次
struct U2GS_WeddingOrderApply__6231 ->
{
	uint32  beginTime;				// 一天的0点时间
	uint8   number;					// 一天的第几场（从1开始）
};
struct GS2U_WeddingOrderApply__6232 <-
{
	uint32  beginTime;				// 一天的0点时间
	uint8   number;					// 一天的第几场（从1开始）
    uint32  errorCode;				// 0-成功，非0-错误原因
};
// 婚礼预约：修改场次
struct U2GS_WeddingOrderModify__6233 ->
{
	uint32  beginTime;				// 一天的0点时间
	uint8   number;					// 一天的第几场（从1开始）
};
struct GS2U_WeddingOrderModify__6234 <-
{
	uint32  beginTime;				// 一天的0点时间
	uint8   number;					// 一天的第几场（从1开始）
    uint32  errorCode;				// 0-成功，非0-错误原因
};

// 仙侣试炼：房间玩家数据
struct WeddingRoomPlayer
{
	uint64  playerID;				// 玩家ID
	string  name;					// 名字
	uint32  career;					// 当前职业
	uint16  level;					// 等级
	uint32  headID;					// 头像ID
	uint32  fateLevel;				// 命格等级
	uint64  battleValue;			// 战斗力
	uint32  ponchoLevel;			// 披风阶数
	uint32  wingCfgID;				// 佩戴神翼ID
	uint32  titleID;				// 称号ID
	uint16  suitChara;				// 觉醒大师等级
	uint16  suitLevel;				// 强化大师等级
	uint16  suitQuality;			// 精炼大师等级
	vector<uint32>  equipCfgIDList;			// 可见装备配置ID列表
	vector<uint32>  fashionCfgIDList;		// 可见时装配置ID列表
	vector<uint32>  careerList;				// 可选职业列表
	uint32  useCareer;				// 使用职业
	uint32  dungeonID;				// 最高进度
	bool    isDungeonPass;			// 最高进度是否通过
	uint16  count;					// 收益次数
	bool    isUseCount;				// 是否使用收益次数
};
// 仙侣试炼：房间数据
struct WeddingRoom
{
	uint64  masterPlayerID;			// 房主玩家ID
	uint32  dungeonID;				// 当前副本ID
	vector<WeddingRoomPlayer>  playerList;	// 玩家列表
};
// 仙侣试炼：房间更新推送
struct GS2U_WeddingRoomUpdate__6235 <-
{
	WeddingRoom  room;				// 房间数据
};
// 仙侣试炼：房间解散推送
struct GS2U_WeddingRoomDestroy__6236 <-
{
};
// 仙侣试炼：进入房间
struct U2GS_WeddingRoomEnter__6239 ->
{
};
struct GS2U_WeddingRoomUseCount__6246 <-
{
    uint32  errorCode;				// 0-成功，非0-错误原因
};
struct GS2U_WeddingRoomUseCareer__6248 <-
{
    uint32  errorCode;				// 0-成功，非0-错误原因
};
struct GS2U_WeddingRoomUseDungeon__6250 <-
{
    uint32  errorCode;				// 0-成功，非0-错误原因
};
// 发送弹幕信息
struct U2GS_sendDanmaku__6254 ->
{
	uint64			channelID;		// 频道ID
	uint8			colorLevel;		// 颜色
	string			content;		// 内容
};
struct danmakuInfo
{
	uint64			channelID;		// 频道ID
	uint64			playerID;		// 玩家ID
	string			name;			// 发送者名字
	uint32  		career;			// 当前职业	
	uint32 			headID;         // 头像ID
	uint32			frame;			// 头像框
	uint8			type;			// 类型 1.新郎弹幕 2.新娘弹幕 3.贺礼榜前三 4.宾客
	vector<uint32>	title_list;		// 称号列表
	uint8			colorLevel;		// 颜色
	string			content;		// 内容
};
struct GS2U_syncDanmaku__6255 <-
{
	vector<danmakuInfo> danmaku_list;
};

// 请求频道列表
struct U2GS_getDanmakuChannel__6256 ->
{
	
};
struct danmakuChannel
{
	uint64			id;				// 频道ID
	uint16			type;			// 类型
	vector<uint64>	owner;			// 所有者
};
struct GS2U_sendDanmakuChannel__6257 <-
{
	vector<danmakuChannel> channel_list;
};

//请求进入频道
struct U2GS_requestEnterChannel__6258 ->
{
	uint64			id;			// 频道
};
struct GS2U_requestEnterChannelResult__6259 <-
{
	uint64			id;			// 频道
	uint32			result;		// 返回码
};
//请求退出频道
struct U2GS_requestExitChannel__6260 ->
{
	uint64			id;			// 频道
};
struct GS2U_requestExitChannelResult__6261 <-
{
	uint64			id;			// 频道
	uint32			result;		// 返回码
};
struct GS2U_sendDanmakuResult__6262 <-
{
	uint64			channelID;		// 频道ID
	uint8			colorLevel;		// 颜色
	uint32			result;			// 返回码
};


// 仙侣的信物升级事件
struct GS2U_OnPartnerRingLevelUp__6263 <-
{
	uint64			partnerID;	
	uint32			ringID;			
	uint32			ringLevel;			
};

// 仙侣的信物升星事件
struct GS2U_OnPartnerRingStarUp <-
{
	uint64			partnerID;	
	uint32			ringID;			
	uint32			ringStar;			
};


// 赠送礼物
struct U2GS_present__6264 ->
{
	uint64			id;			// 频道ID
	uint32			giftID;		// 礼物ID
	uint16			count;		// 赠送次数
};
struct GS2U_presentResult__6265 <-
{
	uint64			id;			// 频道ID
	uint32			giftID;		// 礼物ID
	uint16			count;		// 赠送次数
	uint32			result;			// 返回码
};
struct GS2U_sendPresentInfo__6266 <-
{
	uint32			giftID;		// 礼物ID
	uint64			id;			// 土豪ID
	string			tycoonName;	// 土豪名字
	uint32  		career;			// 当前职业	
	uint32			headID;		// 土豪头像
	uint32			frame;		// 头像框
	uint32			times;		// 截止上一次送礼次数
	uint32			curTimes;	// 当前送礼次数
	string 			content;	// 送礼信息
};

struct GS2U_broadcastWayPoint__6268 <-
{
	uint64			objectID;	// 新娘婚车实例ID
	int				wayPoint;	// 路点
	float			length;		// 长度
};

// 我的请帖列表
struct WeddingInviteReceive
{
	uint32  ceremonyTime;          // 婚礼时间
	uint64  playerID1;             // 玩家ID
	string  name1;                 // 玩家名字
	uint8   sex1;                   // 玩家性别
	uint32  career1;			    // 当前职业
	uint64  playerID2;
	string  name2;
	uint8   sex2;
	uint32  career2;
};
struct U2GS_WeddingInviteReceiveList__6269 ->
{
};
struct GS2U_WeddingInviteReceiveList__6270 <-
{
    vector<WeddingInviteReceive>  inviteReceiveList;        // 请帖列表
};

struct GS2U_AshuraAliveCount__6271 <-
{
	uint16  playerCount;    // 存活玩家数量
};

struct GS2U_AshuraStateSync <-
{
	uint8  state;    // 活动状态
	uint64	start_time; // 活动开启时间
};

// 上线的时候同步情定三生的进度
struct GS2U_SyncLoveTaskStep__6272 <-
{
	uint8	step; // 当前步骤
};
// 提交情定三生的任务
struct U2GS_SubmitLoveTask__6273 ->
{
  uint8	step; // 步骤ID
};
// 提交情定三生的任务返回
struct GS2U_SubmitLoveTaskRet__6274 ->
{
  uint32  errorCode;	 // 0-成功，非0-错误原因
  uint8   type;        // 0- 等待对方提交   1- 对方已经提交 自己还没提交  2- 成功
  uint8   step;        // 成功后返回当前的进度
};

// 离婚事件通知 
struct GS2U_DivorceNotify__6275 <-
{
	uint8	type; //通知被离婚人员(1被协议离婚,2七天未上线被离婚,3被强制离婚，4悔婚悔婚)，通知离婚提起者（10对方同意了你的离婚请求，11对方拒绝了你的离婚请求，12请求超时）
	uint64	playerid;//对方id
	string	name; //对方名字
};
 
//确认消息
struct U2GS_DivorceNotifyConfirm__6276 ->
{
};

// 获取仙侣的外观
struct U2GS_GetWeddingParnterLookInfo__6277 ->
{
};
struct GS2U_GetWeddingParnterLookInfoRet__6278 <-
{
  	uint64  playerID;				// 玩家ID
	string  name;					// 名字
	uint32  career;					// 当前职业
	uint16  level;					// 等级
	uint32  headID;					// 头像ID
	uint32  fateLevel;				// 命格等级
	uint64  battleValue;			// 战斗力
	uint32  ponchoLevel;			// 披风阶数
	uint32  wingCfgID;				// 佩戴神翼ID
	uint32  titleID;				// 称号ID
	uint16  suitChara;				// 觉醒大师等级
	uint16  suitLevel;				// 强化大师等级
	uint16  suitQuality;			// 精炼大师等级
	vector<uint32>  equipCfgIDList;			// 可见装备配置ID列表
	vector<uint32>  fashionCfgIDList;		// 可见时装配置ID列表
	vector<uint16> intensityLvList;	// 强化等级列表
};

// 祝福
struct U2GS_blessWedding__6279 ->
{
	uint64		bridegroomID;			// 新郎ID
	uint64		brideID;				// 新娘ID
};
struct GS2U_blessWeddingResult__6280 <-
{
	uint64		bridegroomID;			// 新郎ID
	uint64		brideID;				// 新娘ID
	uint8		type;				// 婚礼类型
	uint32		result;				// 反馈
};

// 拜堂NPC事件
struct GS2U_WeddingMarryNpcNotify__6281 <-
{
	uint16  loveIncidentID;          // LoveIncident表的ID
};
// 拜堂完成通知
struct GS2U_WeddingMarryFinishNotify__6282 <-
{
	uint64  playerID1;             // 玩家ID
	string  name1;                 // 玩家名字
	uint8   sex1;                   // 玩家性别
	uint64  playerID2;
	string  name2;
	uint8   sex2;
};

// 婚礼预约：预约场次成功通知
struct GS2U_WeddingOrderApplyNotify__6283 <-
{
	uint8   type;				   // 1-高级、2-皇家
	uint32  ceremonyTime;          // 婚礼时间
	uint64  playerID1;             // 玩家ID
	string  name1;                 // 玩家名字
	uint64  playerID2;
	string  name2;
	uint8   orderType;				   // 0-预约、1-修改
};

// 查看贺礼
struct U2GS_ViewWeddingGifts__6284 ->
{
  uint64 id;  // 弹幕频道ID
};
// 贺礼
struct WeddingGift
{
	string  name;     // 送礼人
	uint32	giftID;		// 贺礼ID
	uint32  times;    // 送贺礼次数
};
// 贺礼汇总
struct WeddingStat
{
  uint8   itemType;  // 1- item  2- coin
	uint32	itemID;		// 物品ID
	uint32  itemNum;
};
// 查看贺礼返回
struct GS2U_ViewWeddingGiftsRet__6285 <-
{
	vector<WeddingGift>  giftList;  // 贺礼历史记录
	vector<WeddingStat>  giftStat;  // 贺礼汇总统计
};

// 婚礼排行榜
struct U2GS_getWeddingRankInfo__6286 ->
{
	uint		type;			// 类型
};

struct topWedding
{
	uint64			bridegroomID;		// 新郎ID
	string			bridegroomName;		// 新郎名字
	uint32			bridegroomVip;		// 新郎VIP
	uint16			bridegroomLevel;	// 等级
	uint32			bridegroomFateLevel;// 命格等级
	uint64			brideID;			// 新娘ID
	string			brideName;			// 新娘名字
	uint32			brideVip;			// 新娘VIP
	uint16			brideLevel;			// 等级
	uint32			brideFateLevel;		// 命格等级
	uint16			rank;
	uint32			value;
	int				customInt;
	uint32			time;
};

// type 1 : 仙侣战力排行榜
// type 2 : 仙侣发红包排行榜
// type 3 : 仙侣收贺礼排行榜
struct GS2U_sendWeddingRankInfo__6287 <-
{
	uint			type;
	uint16			rank;				// 自己的数据
	uint32			value;
	int				customInt;
	vector<topWedding> top_list;
};


// 婚礼准备信息，婚礼准备期间上线推送，变化时推送
struct GS2U_WeddingPrepareInfo__6288 <-
{
	uint8   state;          	// 状态：0-未开始、1-确认阶段、2-选择形象阶段、3-准备完成阶段
	uint32  confirmEndTime;    	// 确认超时时间点
	uint32  careerEndTime;    	// 选择形象结束时间点
	uint32  prepareEndTime;    	// 准备结束时间点
	uint64  masterPlayerID;		// 发起人ID	
	uint64  playerID1;		    // 新郎ID、新娘ID
	string  playerName1;        // 玩家名字
	bool    isConfirm1;         // 是否确认，发起人默认确认
	uint32  useCareer1;			// 选择职业，0表示未选择	
	uint64  playerID2;		
	string  playerName2;
	bool    isConfirm2;       
	uint32  useCareer2;
};
// 获取婚礼准备信息，若是婚礼准备期间，则返回GS2U_WeddingPrepareInfo
struct U2GS_GetWeddingPrepareInfo__6289 ->
{
};
// 婚礼准备：发起人发送开始请求
struct U2GS_WeddingPrepareRequest__6290 ->
{
};
struct GS2U_WeddingPrepareRequest__6291 <-
{
    uint32  errorCode;				// 0-成功，非0-错误原因
};
// 婚礼准备：被发起人发送确认应答
struct U2GS_WeddingPrepareResponse__6292 ->
{
	bool    isAgree;				// 是否同意
};
// 婚礼准备：发起人收到拒绝通知
struct GS2U_WeddingPrepareRejectNotify__6293 <-
{
};
// 婚礼准备：各自发送自己的形象
struct U2GS_WeddingPrepareCareer__6294 ->
{
	uint32  useCareer;			   // 使用职业	
};


// 仙侣成就
struct U2GS_getWeddingTaskInfo__6295 ->
{
	
};
struct wTaskPro
{
	uint16		type;		// 类型
	uint32		num;		// 当前值
};
struct GS2U_sendWeddingTaskInfo__6296 <-
{
	vector<wTaskPro> dayPro_list;		// 当日进度
	vector<wTaskPro> pro_list;			// 终身进度
	vector<uint32> task_list;			// 已领奖的成就
};

// 仙侣成就领奖
struct U2GS_getWeddingTaskReward__6297 ->
{
	uint32			id;				// 成就ID
};
struct GS2U_getWeddingTaskRewardResult__6298 <-
{
	uint32			id;				// 成就ID
	uint32			result;			// 反馈
};
// 取消情定三生的任务
struct U2GS_CancelSubmitLoveTask__6299 ->
{
  uint8	step; // 步骤ID
};

// 请求我的排行榜信息
struct U2GS_RequestMyRankInfo__6300 ->
{
};
struct GS2U_RequestMyRankInfoRet__6301 <-
{
	uint32			giftValue;				// 送礼的总价值
	uint32			giftTimes;			// 送礼的总次数
	uint32			giftValueWeek;				// 送礼的周价值
	uint32			giftTimesWeek;			// 送礼的周次数
	uint32      cTimes;          // 举办皇家婚礼的次数
};

// 多人采集物列表
struct GS2U_MultiCollectionList__6302 <-
{
    vector<LookInfoMultiCollection>  mCollectionList;     // 视野范围内的多人采集物列表

};



// 仙侣请帖：拒绝索要
struct U2GS_WeddingInviteRejectAsk__6303 ->
{
	bool  isRejectAsk;              // 是否拒绝索要
};
struct GS2U_WeddingInviteRejectAsk__6304 <-
{
	uint32  errorCode;                // 0-成功，非0-错误原因
};
// 仙侣请帖：全部拒绝
struct U2GS_WeddingInviteRejectList__6305 ->
{
	vector<uint64>  playerIDList;     // 玩家ID列表
};
struct GS2U_WeddingInviteRejectList__6306 <-
{
	uint32  errorCode;                // 0-成功，非0-错误原因
};

//下一次buff object refresh time
struct GS2U_NextBuffTime__6307 <-
{
    uint32  buffTime;       // 下次Buff刷新时间点，为0表示不刷新了
};

// 当前婚礼信息，上线推送，变化时推送
struct GS2U_WeddingCeremonyInfo__6308 <-
{
	uint8   state;          	// 状态：0-未开始、1-准备阶段、2-迎亲阶段、3-拜堂阶段
	uint8   type;			    // 类型：0-没有、1-普通、2-豪华
	uint64  playerID1;		    // 新郎ID
	string  playerName1;        // 新郎名字
	uint64  playerID2;			// 新娘ID
	string  playerName2;		// 新娘名字
};
// 主动获取当前婚礼信息，返回GS2U_WeddingCeremonyInfo
struct U2GS_WeddingCeremonyInfo__6309 ->
{
};

// 打开情定三生面板
struct U2GS_WeddingLoveTaskPanelOpen__6310 ->
{
	uint8   step;     // 1 2 3
};

// 情定三生面板显示玩家消耗物品已经有的数量
struct CostItemInfo
{
  uint32  itemID; 
  uint32  itemNum;
};

// 情定三生面板显示
struct LoveTaskPanelInfo
{
	uint8		sex;				// 性别
	uint32  career; // 仙侣的职业
	vector<CostItemInfo>  cList; // 需要的消耗品的数量
	uint32  intimacyLevel; // 亲密度等级
	vector<uint32>  equipCfgIDList;			// 可见装备配置ID列表
	vector<uint32>  fashionCfgIDList;		// 可见时装配置ID列表
	vector<uint16> intensityLvList;	// 强化等级列表
};

struct GS2U_WeddingLoveTaskPanelOpenRet__6311 <-
{
  uint32  errCode;     // 
	uint32  state;     // 0- 所有条件都ok  1- 需要显示召集按钮   
	LoveTaskPanelInfo pInfo;    // 只有当state为0才有效
};

// 情定三生召集仙侣
struct U2GS_WeddingLoveTaskGather__6312 ->
{
	uint8   step;     // 1 2 3
};
struct GS2U_WeddingLoveTaskGatherRet__6313 <-
{
	uint32  state;     //  ErrcCode
};

// 开宴
struct U2GS_WeddingLoveBanquetStart__6314 ->
{
	uint8   id;     // 开宴ID
};
struct GS2U_WeddingLoveBanquetStartRet__6315 <-
{
	uint32  errCode;     // 
};

// 获取信物激活条件的当前进度
struct U2GS_WeddingRingGetActiveCondition__6316 ->
{
};

// 朋友好感度统计
struct FriendIntimacyLevelStat
{
  uint32  level;  // 等级
  uint32  num;    // 达到等级的人数
};

// 当前激活进度
struct ActiveCurrentProcess
{
// 1.道具消耗：value- itemID， param- itemNum
// 2.订婚成功: value 0-未成功 1-订婚成功
// 3.结婚成功：value 0-未成功 1-订婚成功  
// 4.仙侣好感等级: value- 好感等级 
// 5.朋友好感等级: friendParamList- 好友好感等级值信息  
// 6.通关仙侣试炼：paramList：通关副本ID 列表
// 7.累计献花次数：value：累计次数
// 8.结婚持续最大天数: value: 结婚的天数
// 9.豪华迎亲仪式次数:  value: 次数
  uint32  key;   
  uint32  value;
  uint32  param; 
  vector<uint32> paramList;
  vector<FriendIntimacyLevelStat> friendParamList;
};
struct GS2U_WeddingRingGetActiveConditionRet__6317 <-
{
	vector<ActiveCurrentProcess>  pList;
};

// 多人采集物采集成功
struct GS2U_CollectMultiCollectionSuccess__6318 <-
{
	uint64 collectionID;
};

// 仙侣戒指总属性
struct GS2U_LoveTokenTotalProperty__6319 <-
{
	InspireTuple  inspireTuple;				// 野外地图附加属性
};


// 通用红点推送消息
struct GS2U_genRedDotPush__6320 <-
{
	uint16	type;				//type=1,友好度满足提亲，2跨服寄售行红点，3:1v1红点，4-交易行商品售出，5-交易行求购成功 6-屠魔令红点
};

// 传送到巡游队伍旁边
struct U2GS_transToWeddingCruise__6321 ->
{
	uint64		brideID;		// 新娘ID
};
struct GS2U_transToWeddingCruiseResult__6322 <-
{
	uint64		brideID;		// 新娘ID
	uint32		result;
};

// 开宴采集物消失倒计时
struct GS2U_BanquetCollectFinishCountDown__6323 <-
{
	uint32		timeSec; // 0- 关闭倒计时面板  大于0  开始倒计时
};

// 弹幕房间送礼次数
struct U2GS_getDanmakuPresentTimes__6324 ->
{
	uint64			id;			// 频道ID
};
struct presentTimes
{
	uint32			giftID;		// 礼物ID
	uint32			count;		// 次数
};
struct GS2U_sendDanmakuPresentTimes__6325 <-
{
	uint64			id;			// 频道ID
	vector<presentTimes> present_list;
};

// 婚礼预约：收到预约通知
struct U2GS_WeddingOrderReceive__6326 ->
{
};

// 开宴
struct GS2U_WeddingLoveBanquetStart__6327 <-
{
	uint8   id;     // 开宴ID
};

// 婚礼结束当前阶段
struct U2GS_WeddingFinish__6328 ->
{
	uint8  type;		// 类型：0-正常结束巡游、1-异常结束巡游、2-异常结束拜堂
};

// 信物可激活红点
struct GS2U_RingRedSpot__6329 <-
{
	uint32   id;     // 开宴ID
};

// 婚礼游行结束通知
struct GS2U_WeddingEscortFinishNotify__6330 <-
{
	uint64  playerID1;		    // 新郎ID
	uint64  playerID2;			// 新娘ID
};

// 赠送鲜花
struct U2GS_flowerGift__6331 ->
{
	uint64		playerID;		// 玩家ID
	uint32		id;				// 送花类型
	uint16		num;			// 次数
};
struct GS2U_flowerGift__6332 <-
{
	uint64		playerID;		// 玩家ID
	uint32		id;				// 送花类型
	uint16		num;			// 次数
	uint32		result;			// 反馈
};


//仙侣闹洞房红包type=4,未领取反馈，以便服务器转发类型5红包
struct U2GS_Red_Envelope_close__6333 ->
{
	uint8	close_reason;	//1，主动拒绝领取。2超时位领取
	uint64	id;
};

//协议保留至6334-6450	
//------------------跨服2v2 start--------------------------------------
struct U2GS_GetCoupleFightInfo__6334 ->
{
	uint8				isInvite;//是否是邀请而打开界面的（0：主动打开;1：收到邀请而打开）
};
struct GS2U_GetCoupleFightRet__6335 <-
{
	uint8				season;//第几赛季
	uint32				seasonStartTime;//赛季开始的时间戳
	uint32				seasonEndTime;//赛季结束的时间戳
	uint32				activityStartTime;
	uint32				activityStopTime;
	uint16				punishTime;//大于0表示剩余惩罚时间秒，为0表示无惩罚状态
	uint8				officeType;//排行类型
	uint8				office;//官职 （和上面排行类型组成段位）
	uint32				score;//积分
	uint8				fightCount;//可用挑战次数
	uint16				retrieveCount;//可找回次数
	uint16				retrieveHistory;//已找回次数
	uint8				buyHistory;//今日已购买次数
};

//B玩家 收到邀请内容
struct GS2U_InvatePartnerInfo__6336<-
{
	uint64				roomID;//房间ID
	uint64     			playerID;//邀请玩家ID，即A玩家ID
	string				invitePlayerName;//邀请人的名字
	uint32				career;//邀请人的职业
	uint32				fateLevel;//邀请人的命格
	uint32				headID;//邀请人的头像ID
	uint16				level;//邀请人的等级
	uint64				battleValue;//邀请人的战斗力
	uint32				vip;//邀请人的VIP
};
//B玩家的邀请回复，直接进入房间消息

//通用生命数
struct CoupleFightLives 
{
	uint64				id;
	uint8				lives;//剩余生命数量
	uint8				group;
	uint8				sex;
};
struct GS2U_CoupleFightLivesNotify__6342<-
{
	vector<CoupleFightLives> lives;
};


//请求战报 
struct U2GS_CoupleFightRecord__6348->
{
	
};

struct CoupleFightBattleResultPlayer 
{
	uint64	playerid;
	string	name;
	uint32	headId;
	uint64	battleValue;
	uint32	restHp;
	uint8	restLives;
	uint8	killNum;
	uint8	dieNum;
	uint8	group;
	uint8	sex;
	uint8	state; //0在线,1掉线，3主动放弃(主动离开)
	uint8	vip;
	uint16	level;
	uint16	fateLevel;
	uint8	officeType;
	uint8	office; 
	vector<topBattleHero>	heroList;
};

struct CoupleFightBattleResult 
{
	uint32	time;
	vector<CoupleFightBattleResultPlayer> players;
	uint8	winGroup;
	uint64	mvpId;
};

//战报列表
struct GS2U_CoupleFightRecordRet__6349<-
{
	vector<CoupleFightBattleResult> records;
};  


 
//结算协议 
struct GS2U_CoupleFightResult__6350<-
{
	CoupleFightBattleResult result;
};  

//同意或者拒绝借命
struct U2GS_CoupleFightGiveLives__6354->
{
	uint8	result;// 1 同意借命
};
struct GS2U_CoupleFightGiveLivesRet__6355<-
{
	uint32	errorCode;//为0表示成功借命给对方
};   


//请求临时战报
struct U2GS_CoupleFightTmpResult__6356->
{
};
//临时战报
struct GS2U_CoupleFightTmpResultRet__6357<-
{
	CoupleFightBattleResult	record;
};  
  

struct U2GS_CoupleFightGradeRank__6358->
{
	uint8	type;//1跨服，2本服
};  

//红点推送
struct GS2U_CoupleFightAchievementRed__6359<-
{

};


//2v2段位变化，新旧相同就不提示
struct GS2U_CoupleFightOfficeChange__6360<-
{
	uint8  oldOfficeType;
	uint8  oldOffice;
	uint8  officeType;
	uint8  office;
};
 
 //3v3 2v2购买次数
struct U2GS_SpecMapBuyNumberOfChallenges__6363 ->
{
	uint8	type;//1,3v3  2,2v2，3,1v1
	uint8	buyNumber;	//购买次数
};
struct GS2U_SpecMapBuyNumberOfChallengesRet__6364 <-
{
   uint32	result; // 0=ok，其他错误码
   uint8	buyNumber; //购买次数
};

struct GS2U_InvatePartnerRet__6365 <-
{
   uint32	result; // 0=ok，其他错误码
};
 
//2v2召唤另一半
struct U2GS_InvatePartner__6366 ->
{
	
};
//协议保留至6368
//------------------跨服2v2 end  --------------------------------------


//------------------跨服寄售行 start  ------------------------------------
//玩家求购物品操作
struct U2GS_RequestInSell__6369 ->
{
	uint32	itemid;//配置物品Id
	uint32	num;
    uint8	currency_type;//货币类型
	uint32	price;//单价
	uint8	star;//星级
	uint8   equipCharacter;//装备品质	
};
struct GS2U_RequestInSellRet__6370 <-
{
	uint32	errorCode;	
};
//开始新的过滤排序
struct U2GS_GetConsignmentInfo__6371 ->
{
	bool    isRequest;//是否是求购列表
	uint8	part1;//ITemTrade.Part1
	uint8	part2;//ITemTrade.Part2
	int32	star;//装备星级 -1为全部
	int32	equipCharacter;//装备品质 -1为全部
	int32	itemType;// -1为全部
	int32	detailedTypeFind;//-1为全部
	int32	detailedType2Find;//-1为全部
	int32	detailedType3Find;//-1为全部
	int32    useTypeFind;//-1为全部
	int32    useParam1Find;//-1为全部
	int32    useParam2Find;//-1为全部
	int32    useParam3Find;//-1为全部
	int32    useParam4Find;//-1为全部
	int32    character;//品质 -1为全部
	int32	oder;//阶数 -1为全部
	uint8	price;//0单价升序,1单价降序,2忽略单价
	uint8	totalPrice;//0总价升序,1总价降序
	uint8    buyType;//购买类型 0不限，1普通，2，密码交易
	uint8	numPerPage;//每页显示数量
	vector<uint32> filters;//过滤筛选物品id列表
};

struct ConsignmentItem 
{
	uint32	index;//排序序号
	uint64	id;//全服唯一索引（注：求购列表代表求购ID）
	uint32	itemid;//配置物品Id
	uint8	star;//星级
	uint8   equipCharacter;//装备品质
	uint32	num;
    uint8	currency_type;//货币类型
	uint32	price;//单价
	uint8   buyType;//购买类型 0不限，1普通，2，密码交易
	string  passward;//购买密码，密码交易有效
	bool    isSelf;//是否是自己上架的物品
	string  playerName;//求购人名字
	uint32	score;//评分
};
//返回条目列表，可能返回多个页
struct GS2U_ConsignmentRet__6372 <-
{
   uint32	len;//寄售行总数量	
   vector<ConsignmentItem> items; 
};

//获取后续页的部分数据
struct U2GS_GetConsignmentNextInfo__6373 ->
{
	uint8	numPerPage;//每页显示数量
	uint32	index;//继续上一次的排序后的index后面的部分列表
};

//玩家上架物品操作
struct U2GS_ConsignmentBankSell__6374 ->
{
	uint64	id;//上架物品id
	uint8   bag_type;//背包类型
	uint32	num;
    uint8	currency_type;//货币类型
	uint32	price;//单价
	bool    isPassword;//是否是密码交易
	string  passWord;//密码 
};
struct GS2U_ConsignmentBankSellRet__6375 <-
{
	uint32	errorCode;
	uint64	id; //上架物品id
};

//玩家下架物品操作
struct U2GS_ConsignmentBankOffShelf__6376 ->
{
	uint64	index;//下架物品索引
	uint8   type; //0,普通下架，1，求购下架
};
struct GS2U_ConsignmentBankOffShelfRet__6377 <-
{
	uint32	errorCode;
	uint64	index; //下架物品索引
};

//获取参考价格
struct U2GS_ConsignmentBankReferencePrice__6378 ->
{
	uint32	id;//该id的参考价格
	uint8	star;//星级
	uint8   equipCharacter;//装备品质
};

struct ReferencePrice
{
	uint32	id; //物品id
	uint32	num;
	uint32	price;//单价
	uint8	star;//星级
	uint8   equipCharacter;//装备品质
	EqInfo			eq1;	// 主角装备
	EqAddition		eq2;	// 骑宠翼装备
	AEquipmentInfo	eq3;	// 神灵装备
	ornament		eq4;	// 海神装备
	constellation_equipment  eq5;   // 星魂装备
	ancient_holy_equipment   eq6;   // 古神圣装
	holy_wing       eq7;     // 圣翼
	dark_flame_eq       eq8;     // 暗炎魔装
	ShengWen          eq9;     // 圣纹
};
struct GS2U_ConsignmentBankReferencePriceRet__6379 <-
{
	uint32	id;//
	vector<ReferencePrice> info;
};

//购买物品
struct U2GS_ConsignmentBankBuy__6380 ->
{
	uint64	index;//唯一物品索引
	uint32   num;//购买数量
	string  pw;//密码，仅密码交易有效
};
 
struct GS2U_ConsignmentBankBuyRet__6381 <-
{
	uint32	errorCode;
	uint64	index; //唯一物品索引
};

//获取自己寄售行物品
struct U2GS_ConsignmentBankSelf__6382 ->
{
};

struct ReferenceASelfItem
{
	uint64	index;
	uint32	id; //物品id
	uint32	num;
	uint8	star;//星级
	uint8   equipCharacter;//装备品质
    uint8	currency_type;//货币类型
	uint32	price;//单价	
	uint32	time;//上架或者下架时间
	uint32	score;//评分
	EqInfo			eq1;	// 主角装备
	EqAddition		eq2;	// 骑宠翼装备
	AEquipmentInfo	eq3;	// 神灵装备
	ornament		eq4;	// 海神装备
	constellation_equipment  eq5;   // 星魂装备
	ancient_holy_equipment   eq6;   // 古神圣装
	holy_wing       eq7;     // 圣翼
	dark_flame_eq       eq8;     // 暗炎魔装
	ShengWen			eq9;     // 圣纹
};
struct GS2U_ConsignmentBankSelfRet__6383 <-
{
	uint32	id;//
	vector<ReferenceASelfItem> info;
};

//获取自己寄售行记录
struct U2GS_ConsignmentBankRecord__6385 ->
{
	uint8  type;//0,全部，1，未提取收益的出售记录
};

struct ConsignmentBankRecord
{
	uint64	uid;
	uint32	id; //物品id
	uint32	num;
	uint8	equipment_star;//装备星级
	uint8   equipment_character;//装备品质
    uint8	currency_type;//货币类型
	uint32	price;//单价
	uint8	state;//0买入，1卖出
	uint32	time;//交易时间
};
struct GS2U_ConsignmentBankRecordRet__6386 <-
{
	uint32	current_num;//当前剩余可提取收益
    uint32	current_bind_num;//当前剩余可提取收益
	vector<ConsignmentBankRecord> info;
};

//提取自己寄售行收益
struct U2GS_ConsignmentBankGain__6387 ->
{
};

struct GS2U_ConsignmentBankGainRet__6388 <-
{
	uint32	errorCode;//
	uint32	currencyUsed;		// 提取收益数量
    uint32	currencyBindUsed;		// 提取收益数量
	uint32	currencyRemaining;	// 剩余收益数量
    uint32	currencyBindRemaining;	// 剩余收益数量
};

//出售他人求购的物品
struct U2GS_SellRequest__6389 ->
{
	uint64 id;//求购ID
	uint32  num;//出售数量
};
struct GS2U_SellRequestRet__6390 <-
{
	uint32	errorCode;//
	uint8   num;//出售数量
};
//协议保留至6390
//------------------跨服寄售行 end  --------------------------------------


//开始领取发送给服务器
struct U2GS_WeddingRedEnvelopeSate__6391 ->
{
	uint64	playerid; //新郎或新娘id
	uint64	id;//红包id
};
//广播给地图所有人
struct GS2U_WeddingRedEnvelopeNotify__6392 <-
{
	uint64	playerid; //新郎或新娘id
	uint8	state; //1 开始领取，2领取完成，3超时(失败)
	string  sender_name;
	string	cmd;//口令
	uint32	money;//花费
};


struct WeddingRedEnvelopeNum
{
	uint64	playerid;
	uint16	num;
}

//广播给地图所有人
struct GS2U_WeddingRedEnvelopeNum__6393 <-
{
	vector<WeddingRedEnvelopeNum>  info;
};

// 飞行状态改变
struct GS2U_FWingChangeStatus__6455 <-
{
	uint64	playerID;       // 玩家ID
	uint8	  fwingStatus;		// 飞行状态：0-未飞行，1-飞行
};

// 请求自己的魅力值和守护值
struct U2GS_RequestCharm__6456 ->
{
};
struct GS2U_RequestCharmRet__6457 <-
{
	uint32	charm;			// 魅力值
	uint32  cherish;    // 守护值
};

// 玩家上线同步魅力榜和守护榜第一名的玩家
struct GS2U_CharmTopFirst__6458 <-
{
	uint64	charmPlayerID;			// 魅力榜第一名
	uint64  cherishPlayerID;    // 守护榜第一名
};

// 秘境新扩展：副本信息
struct ActiveExtendDungeonInfo
{
	uint32  dungeonID;			// 关卡ID
	uint16	freeTimes;			// 免费次数
	uint16  maxProgress;		// 最高进度万分比
	uint8	star;				// 最高通关星数
}
struct ActiveExtendGroupInfo
{
	uint8  type;				// 秘境类型
	uint16  maxFightCount;		// 最大挑战次数
	uint16  fightCount;			// 已使用挑战次数
	uint16  buyFightCountDay;	// 今天已购买的次数
	vector<ActiveExtendDungeonInfo>  dungeonList;		// 已解锁副本列表
}
struct U2GS_ActiveExtendDungeonInfo__6459 ->
{
};
struct GS2U_ActiveExtendDungeonInfo__6460 <-
{
	vector<ActiveExtendGroupInfo>  groupList;		// 秘境信息列表
};
// 秘境新扩展：进入副本
struct U2GS_EnterActiveExtendDungeon__6461 ->
{
	uint32  dungeonID;			// 关卡ID
};
// 秘境新扩展：副本结算
struct GS2U_ActiveExtendDungeonFightResult__6462 <-
{
	uint32  dungeonID;				// 关卡ID
	uint16  progress;				// 当前进度万分比
	uint16  maxProgress;			// 最高进度万分比
	uint8	cur_star;				// 当前通关星数
	uint8	max_star;				// 最大通关星数
	uint8	is_first_star;			// 是否第一次三星
	bool    isOpenNext;				// 是否解锁下一关
	uint64	exp;					// 经验
	uint16  double_times;           // 双倍次数
	vector<CoinInfo>  coinList;		// 奖励货币列表
	vector<itemInfo>  itemList;		// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
	uint8 	  max_enter_count;		// 最大进入次数
	uint8	  enter_count;		    // 已进入次数
	vector<CoinInfo>  firstCoinList;// 首通奖励货币列表
	vector<itemInfo>  firstItemList;// 首通奖励物品列表
	vector<EqInfo>	  first_eq_list;// 首通奖励装备列表
};
// 秘境新扩展：副本扫荡
struct U2GS_MopupDungeonActiveExtend__6463 ->
{
	uint32  dungeonID;			// 关卡ID
};
struct GS2U_MopupDungeonActiveExtend__6464 <-
{
	uint32  dungeonID;				// 关卡ID
	uint16  maxProgress;			// 最高进度万分比
	bool    isOpenNext;				// 是否解锁下一关
	uint64	exp;					// 经验
	vector<CoinInfo>  coinList;		// 奖励货币列表
	vector<itemInfo>  itemList;		// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
	uint8     double_times;         // 双倍次数
	uint8     star;
};

// Boss活动：活动信息
struct U2GS_BossActivityInfo__6479 ->
{
	uint32	activityID;				// 活动ID（activeBaseInfo.id）
	uint32  bossActivityID;			// 四海BOSS活动ID（bossSales.id）
};
struct GS2U_BossActivityInfo__6480 <-
{
	uint32	activityID;				// 活动ID（activeBaseInfo.id）
	uint32  bossActivityID;			// 四海BOSS活动ID（bossSales.id）
	uint32  errorCode;				// 0-成功，非0-错误原因
	uint32  bornMap;				// 地图ID
	vector<uint32>  bossIDList;		// BossID列表，只填1个bossID表示活动期间刷同一个BOSS
	vector<timeInterval>  timeList;	// Boss时间列表
	vector<uint32>  dropItemList;	// 掉落道具列表
	vector<string>  messageList;	// 出名记录列表
	vector<conqItem>  awardList;	// 次数奖励列表
	vector<uint8>  awardReceiveList;// 次数奖励已领取序号列表
	uint32  finishNum;				// 完成次数
};
// Boss活动：推送Boss状态（登录时或变化时推送）
struct GS2U_BossActivityBossNotify__6486 <-
{
	uint32	activityID;				// 活动ID（activeBaseInfo.id）
	uint32  bossActivityID;			// 四海BOSS活动ID（bossSales.id）
	uint8   bossState;				// Boss状态：1-准备、2-存活、3-死亡
};
// Boss活动：可领奖通知
struct GS2U_BossActivityAwardNotify__6487 <-
{
	uint32	activityID;				// 活动ID（activeBaseInfo.id）
	uint32  bossActivityID;			// 四海BOSS活动ID（bossSales.id）
};
struct GS2U_BossActivityAwardReceive__6489 <-
{
	uint32	activityID;				// 活动ID（activeBaseInfo.id）
	uint32  bossActivityID;			// 四海BOSS活动ID（bossSales.id）
	uint8   index;     				// 奖励序号
	uint32  errorCode;				// 0-成功，非0-错误原因
};

// 上线的时候如果在财神时间  会推送此消息
struct GS2U_WealthTime__6490 <-
{
	uint32		wealthTime;			// 财神活动结束时间时间
};
// 一键赠送耐力
struct U2GS_GiveStaminaOneKey__6491 ->
{
};

// 赠送耐力反馈
struct GS2U_GiveStaminaOneKeyRet__6492 <-
{
	vector<uint64>		friendIDList;		// 赠送成功的好友
};

// 进入天魔副本
struct U2GS_EnterDemonMap__6503 ->
{
  uint8     enter_type;  //  4:剑台除魔  6:战神殿
	uint32		mapDataID;	// 地图ID
};

// 天魔数据
struct U2GS_getDemonsMsg__6504 ->
{
	uint8		type;		// 天魔类型 1：天魔入侵 2：天魔远征 3：VIP天魔  4:剑台除魔  6:战神殿
};
struct demonInfo
{
	uint32		bossID;			// 怪物配置ID
	uint32		deadTime;		// 怪物死亡时间（为0即为存活）
	uint8		follow;			// 是否关注（1：关注，0：未关注）
	uint8       is_super;       // 是否为超级boss
	vector<killerInfo> killer_list;
	uint8       index;
};

struct mapDemons
{
	uint32		mapDataID;		// 地图ID
	uint16		monsterNum;	    // 怪物数量
	uint16		collectionNum;	// 采集物数量
	uint32		collectionTime;	// 上一波采集物刷新时间
	vector<demonInfo> demon_list;
};

struct GS2U_sendDemonsMsg__6505 <-
{
	uint8		type;
	uint16		fatigue;		// 疲劳度（天魔入侵）or 虚弱度（天魔远征） or 萎靡度（VIP天魔） 诅咒值-剑台除魔
	uint16      extra_fatigue;  // 额外疲劳
	uint16		awardTimes;		// 参与奖励次数
	uint32		demonsAnger;	// 天魔愤怒值
	uint32		demonsHatred;	// 天魔仇恨值
	uint8       enter_multi;	// 进入倍数设置
	uint8       buy_times;		// 购买次数
	uint8       param;          // 参数
	vector<mapDemons> demon_list;
};
// 掉落记录
struct U2GS_getDemonsDropMsg__6506 ->
{
	uint8		type;		// 天魔类型 1：天魔入侵 2：天魔远征 3：VIP天魔  4:剑台除魔 6:战神殿 9:圣战遗迹 10:星空圣墟
};
struct GS2U_sendDemonsDropMsg__6507 <-
{
	vector<killerInfo> 	drop_list;
};

// 玩家进入天魔Boss区域
struct U2GS_enterDemonArea__6510 ->
{
  uint8     type;  //  4:剑台除魔  6:战神殿 
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
};
struct GS2U_enterDemonAreaResult__6511 <-
{
  uint8     type;  //  4:剑台除魔  6:战神殿 
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
	uint32		result;
};
// 玩家离开天魔Boss区域
struct U2GS_exitDemonArea__6512 ->
{
  uint8     type;  //  4:剑台除魔  6:战神殿 
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
};
struct GS2U_exitDemonAreaResult__6513 <-
{
  uint8     type;  //  4:剑台除魔  6:战神殿 
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
	uint32		result;
};
// 下发天魔Boss伤害排行数据
struct demonRankInfo
{
	uint64		playerID;
	string		name;
	uint8		isAward;		// 是否有归属奖励 （1：是 0：不是）
	uint64		damage;			// 总伤害
	uint16		rank;			// 排名
	string      serverName;
	uint32      nationality_id;        // 区域id
};
struct GS2U_sendDemonRank__6514 <-
{
	uint64		damage;			// 自己（队伍）的伤害
	uint16		rank;			// 自己（队伍）的排名
	vector<demonRankInfo>	rank_list;
};

// 关注天魔Boss
struct U2GS_followDemon__6515 ->
{
	uint8     	type;  			//  4:剑台除魔  6:战神殿  9:圣战遗迹 10:星空圣墟 11:世界boss
	uint8     	type2;			// 1:boss 2:采集物
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
};
struct GS2U_followDemonResult__6516 <-
{
	uint8     	type;  			//  4:剑台除魔  6:战神殿  9:圣战遗迹 10:星空圣墟 11:世界boss
	uint8     	type2;			// 1:boss 2:采集物
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
	uint32		result;	
};
// 取消关注天魔Boss
struct U2GS_unFollowDemon__6517 ->
{
	uint8     	type;  			//  4:剑台除魔  6:战神殿  9:圣战遗迹 10:星空圣墟 11:世界boss
	uint8     	type2;			// 1:boss 2:采集物
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
};
struct GS2U_unFollowDemonResult__6518 <-
{
	uint8     	type;  			//  4:剑台除魔  6:战神殿  9:圣战遗迹 10:星空圣墟 11:世界boss
	uint8     	type2;			// 1:boss 2:采集物
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
	uint32		result;	
};

// 天魔Boss结算
struct GS2U_DemonSettle__6524 <-
{
	string		name;		// 排名第一的玩家名
	uint8		isTeam;		// 是否组队
	vector<string>	name_list;	// 队伍成员
	uint16		rank;		// 自己的排名，0表示没有上榜
	uint16		fatigue;		// 疲劳度
	uint16		awardTimes;		// 参与奖励次数
	vector<CoinInfo> coin_list;	// 货币列表
	vector<demonItem> item_list;
};
// 通知客户端Boss即将刷新
struct GS2U_DemonRefreshNotice__6525 <-
{
	uint8     	type;  			//  4:剑台除魔  6:战神殿  9:圣战遗迹 10:星空圣墟 11:世界boss
	uint8     	type2;			// 1:boss 2:采集物
	uint32		mapDataID;		// 地图ID
	uint32		bossID;			// 怪物配置ID
};

// 请求天魔Boss红点
struct U2GS_getDemonsRedPoint__6527 ->
{
	uint8		type;		// 类型 6：战神殿
};
struct demonsRedPoint
{
	uint8		type;		// 类型
	uint8		isRed;		// 是否有红点（1：有 0：没有）
};
struct GS2U_sendDemonsRedPoint__6528 <-
{
	uint32		demonsAnger;	// 天魔愤怒值
	uint32		demonsHatred;	// 天魔仇恨值
	vector<demonsRedPoint> red_list;
};
// 请求复活次数
struct U2GS_requireReborn__6529 ->
{
	uint8		type;		// 玩法：（1：天魔Boss 待续） 2 剑台除魔
};
struct GS2U_sendRequireBorn__6530 <-
{
	uint8		type;		// 玩法：（1：天魔Boss 待续）  2 剑台除魔
	uint16		times;		// CD内已使用条件复活次数
};
// 购买地图保护时间
struct U2GS_requireDemonKeepTime__6531 ->
{
	uint32		mapDataID;		// 地图ID
};
struct GS2U_requireDemonKeepTimeResult__6532 <-
{
	uint32		mapDataID;		// 地图ID
	uint32		result;		
};
// 请求地图保护时间
struct U2GS_getMapKickExitTime__6533 ->
{
	uint32		mapDataID;
};
struct GS2U_sendMapKickExitTime__6534 <-
{
	uint32		mapDataID;
	uint32		exitTime;

};

struct demon_guild_rank_info
{
	uint64 guild_id;
	string guild_name;
	uint64 guild_damage;
	uint8  rank;
};

struct GS2U_send_demon_guild_rank <-
{
	uint64		damage;			// 自己公会的伤害
	uint16		rank;			// 自己公会的排名
	vector<demon_guild_rank_info>	rank_list;
};

// 超级boss成员奖励
struct GS2U_demon_super_boss_member_award <-
{
	uint32 mapDataID;
	uint32 monsterID;
};

// 领取超级boss成员奖励
struct U2GS_get_super_boss_member_award ->
{
	uint32 mapDataID;
	uint32 monsterID;
};
struct GS2U_get_super_boss_member_award_ret <-
{
	uint32 mapDataID;
	uint32 monsterID;
	uint32 error_code;
};

// 超级BOSS召集
struct U2GS_super_boss_convene ->
{
	uint32 mapDataID;
	uint32 monsterID;
};
struct GS2U_super_boss_convene_ret <-
{
	uint32 mapDataID;
	uint32 monsterID;
	uint32 error_code;
};
// 收到超级BOSS召集信息
struct GS2U_super_boss_convene_info <-
{
	uint32 mapDataID;
	uint32 monsterID;
	uint16 x;
	uint16 y;
};

// 超级BOSS状态同步
struct super_boss_state
{
	uint32 mapDataID;
	uint32 monsterID;
	uint8 index;
	uint32 dead_time;
};

struct GS2U_super_boss_state_sync <-
{
	vector<super_boss_state> list;
};


// 推给全图玩家，天魔Boss死亡
struct GS2U_demonBossDead__6535 <-
{
	uint32		map_data_id;
	uint32		boss_id;
	uint32		dead_time;
};

//  庆典累充领奖
struct U2GS_getRechargeActAward__6538 ->
{
	uint32		id;			// 活动ID
	uint32		act_id;		// 分项ID
};
struct GS2U_getRechargeActAwardResult__6539 ->
{
	uint32		id;			// 活动ID
	uint32		act_id;		// 分项ID
	uint32		result;		
};

// 庆典抽奖
struct U2GS_lotteyReward__6542 ->
{
	uint32		id;
	uint8		world_index;	// 世界等级序号
	uint16		times;			// 抽奖次数
};
struct GS2U_lotteryRewardResult__6543 <-
{
	uint32		id;
	uint8		world_index;	// 世界等级序号
	uint16		times;			// 抽奖次数
	vector<CoinInfo> coin_list;	// 货币列表
	vector<itemInfo> item_list;
	uint32		result;
};

struct actCoin
{
	uint16	index;
	uint8	type;		// 货币类型
	uint32	amount;		// 数量
	uint8	effect;		// 是否显示icon特效
};
struct actItem
{
	uint16	index;		// 奖励索引	
	uint32	itemID;		// 物品ID
	uint32	count;		// 数量
	uint8	bind;		// 是否绑定：0-非绑、1-绑定
	uint8	effect;		// 是否显示icon特效
};
struct rechargeAct
{
	uint32	id;
	uint32	target;	// 充值目标
	uint32	model;	// 模型ID
	vector<actCoin> coin_list;	// 货币列表
	vector<actItem> item_list;	// 物品列表
	vector<uint32>	limit;		// 领奖限制[类型,次数]
};

struct dailyTopItem
{
	uint16		rank;		// 排名
	uint8		type;		// 道具类型 0货币，1普通道具 2- 装备
	uint32		itemID;		// 道具ID
	uint16		num;		// 数量
	uint8		bind;		// 是否绑定
	
	uint8		chara;		// 装备品质
	uint8		star;		// 装备星级
	
	uint8		effect;		// 是否转圈特效
};

struct dailyTopBase
{
	uint32		top_id;	
	uint8		settleType;
	uint8		day;
	uint8		top_type;
	uint16		rank_num;
	uint32		min_value;
	vector<dailyTopItem> rewars;
	uint8      floor_type;      //保底奖励条件
	uint32     floor_value;    // 保底奖励数量
	vector<dailyTopItem>   floor_rewars;  // 保底奖励
};
struct itemPoint
{
	uint32		itemID;		// 道具ID
	uint32		point;		// 资源点
};
struct currencyPoint
{
	uint32		type;		// 货币类型
	uint32		unit;		// 单位
	uint32		point;		// 资源点
};
struct newPoint
{
	uint32		type;		// 类型
	uint32		param1;		// 参数1
	uint32		param2;		// 参数2
	uint32		point;		// 资源点
};

// 1.披风进阶（Poncho）
// 2.坐骑升级（MountBase，teams_base）
// 3.坐骑升星(MountStar)
// 4.坐骑觉醒（MountAwaken）
// 5.神翼等级（WingLevel）
// 6.神翼升星（WingStar）
// 7.神翼精炼（WingAmbit）
// 8.飞翼等级（WingAmbitLv）
// 9.神器强化（ArtifactAmbit）
// 10.神器追加（ArtifactAdd）
// 11.法宝等级（TalismanLevel）
// 12.法宝精炼（TalismanAmbit）
// 13.法宝升星（TalismanStar）
struct resPoint
{
	uint32					id;
	vector<uint32>			cons_list;		// 调用对应系统的消耗
	vector<uint32>			jump;			// 跳转
	vector<itemPoint>		item_list;		// 物品资源消耗
	vector<currencyPoint>	currency_list;	// 货币资源消耗
	vector<newPoint>		new_list;		// 获得资源点新方式
	vector<uint32>			cid_list;		// 达成类id
	string 					des;			// 描述
};
struct fundsCondition
{
	uint8		index;				// 档次索引
	uint32		recharge;			// 累充多少RMB
};
struct fundsSpend
{
	uint8		index;				// 档次索引
	uint32		spent;				// 购买花费（非绑）
	uint16		ret_num;			// 返利次数
};
struct fundsReward
{
	uint8		index;				// 档次索引
	uint16		start_ret;			// 第几次
	uint16		end_ret;			// 第几次
	uint32		gold_num;			// 返还绑元数量
};
struct SalesFunds
{
	vector<fundsCondition> cond_list;	// 可购买天使基金条件
	vector<fundsSpend> spent_list;		// 购买花费
	vector<fundsReward> reward_list;	// 返利
};
struct weeklyCardItem
{
	uint8	day;		// 第几天
	uint8	type;		// 道具类型：2货币，1普通道具（不包含神器）
	uint32	itemID;		// 道具ID 
	uint16	num;		// 数量
	uint8	bind;		// 是否绑定
	uint8	effect;		// 是否显示转圈特效：1:显示 0:不显示
}
struct WeeklyCard
{
	uint32		id;
	uint32		conditions;		// 特权周卡累充元宝数量
	vector<weeklyCardItem> item_list;	// 返利
};

struct ConsumeEx
{
	uint32		group;		// 组
	uint8		type;		// 类型
	uint32		param1;		// 参数1
	uint32		param2;		// 参数2
};
struct ResetP
{
	uint8		type;		// 类型
	uint32		param1;		// 参数1
	uint32		param2;		// 参数2
	uint32		param3;		// 参数3
};
struct Card777
{
	vector<ConsumeEx>	consume;		// 消耗
	vector<uint32>		consume_change;	// 消耗增长
	ResetP		reset;	// 重置消耗
	vector<IndexAwardItem>	spec_item;	// 大奖物品
	vector<IndexAwardEquip>	spec_eq;	// 大奖装备
	vector<IndexAwardItem>	normal_item;	// 普通奖励物品
	vector<IndexAwardEquip>	normal_eq;		// 普通奖励装备
};
struct key_value
{
  uint32  key;
  uint32  value;
};

// 活动玩法信息  此结构体在运营活动协议中发送
struct ac_play_award_show
{
    uint32  career;   
    uint32  item_id;  
    uint8   chara;     
    uint8   star;     
    uint8   bind;     
};
struct ac_play_buy_cost
{
    uint8   sn;         // 方案编号
    uint8   tp;         // 1-消耗道具  2-消耗货币
    uint32  p1;         // 
    uint32  p2;         // 
};
struct ac_play
{
    uint32                      q_id;         // Q表Id
    uint8                       free_num;     // 每日免费次数  
    vector<ac_play_buy_cost>	  buy_cost;	    // 购买次数消耗  只有自己的次数为0的时候才可以购买
    vector<key_value>	          award_item_show;	// 道具奖励预览  key-ItemId  value-Bind
    vector<ac_play_award_show>	award_eq_show;	  // 装备奖励预览
};

// 节日签到
struct f_sign_condition
{
	uint16	day;			// 第几天
	uint8	cond_type;		// 签到条件类型
	uint32	cond_param;		// 签到条件参数
	uint8	rep_cost_type;	// 补签消耗类型 1道具，2货币
	uint32	rep_cost_id;	// 补签消耗id
	uint32	rep_cost_num;	// 补签消耗数量
};
struct f_sign_award
{
	uint16	day;			// 第几天
	uint8	type;			// 奖励类型
	uint32	id;				// 奖励id
	uint8	chara;			// 品质
	uint8	star;			// 星级
	uint32	num;			// 数量
	uint8	bind;			// 是否绑定
	uint8	vfx;			// 是否显示转圈特效
	uint8	rep;			// 是否可补领
};
struct f_sign_total_condition
{
	uint8	group;		// 条件组
	uint8	type;		// 条件类型
	uint32	param;		// 参数
};
struct f_sign_total_award
{
	uint16	day;			// 累计天数
	uint8	type;			// 奖励类型
	uint32	id;				// 奖励id
	uint8	chara;			// 品质
	uint8	star;			// 星级
	uint32	num;			// 数量
	uint8	bind;			// 是否绑定
	uint8	vfx;			// 是否显示转圈特效
};
struct f_sign_final_condition
{
	uint8	group;		// 条件组
	uint8	type;		// 条件类型
	uint32	param;		// 参数
};
struct f_sign_final_award
{
	uint8	type;			// 奖励类型
	uint32	id;				// 奖励id
	uint8	chara;			// 品质
	uint8	star;			// 星级
	uint32	num;			// 数量
	uint8	bind;			// 是否绑定
	uint8	vfx;			// 是否显示转圈特效
};
struct f_sign
{
	uint32							id;		// id
	uint8							type;	// 签到类型
	vector<f_sign_condition>		cond_list;	// 签到类型
	vector<f_sign_award>			award_list;	// 签到奖励
	vector<f_sign_total_condition>	total_cond_list;	// 累计签到条件
	vector<f_sign_total_award>		total_award_list;	// 累计签到奖励
	vector<f_sign_final_condition>	final_cond_list;	// 签到大奖条件
	vector<f_sign_final_award>		final_award_list;	// 签到大奖奖励
	vector<ModelInfo>				model;				// 模型
};

//---------------------新版烟花---------------------
struct Fireworks
{
	uint16 id,          							// id
	uint16 exchangeid  								// 兑换ID
	vector<IndexAwardItem> item,         			// 大奖物品 （兑换道具index -1）
	uint16 turnplate,   							// 转盘ID
	vector<IndexAwardEquip> awardEquip,        		// 大奖装备 （大奖index 0）
	vector<IndexAwardItem> awardItem,         		// 大奖物品 （大奖index 0）
	vector<NewModelInfo> model,             		// 模型
	vector<key_value> condPara,          			// 个人累计奖励条件
	vector<IndexAwardEquip> awardEquipNew1,     	// 个人累计奖励装备
	vector<IndexAwardItem> awardParaNew1,      		// 个人累计奖励物品
	uint8 upperLimit,                               // 上限次数
	uint8 lowerLimit,                               // 必得次数
};

//获取阶段奖励
struct U2GS_GetFireworksAward ->
{
	uint16 index; 
};

struct GS2U_GetFireworksAwardRet <-
{
	uint16 index; 
	uint32 errCode;     // 0 成功
};

//---------------------新版烟花end------------------

struct change_package
{
    uint32                   id;             // 活动条目id
    string                  package_num;    // 版本号
    string                  text;           // 描述文字
    vector<IndexAwardItem>  award_item;     // 奖励道具
    vector<IndexAwardEquip> award_eq;       // 奖励装备
    string                  app_shop;       // 商店链接
    string                  remind;         // 提醒文字
    uint8                   type;           // 是否检查
};
// 获取换包奖励
struct U2GS_get_change_package_award ->
{
	uint32					ac_id;			// 活动id
};

// 获取换包奖励 返回
struct GS2U_get_change_package_award_ret <-
{
	uint32			ac_id;	     // 活动id
	uint32	        err_code;    // 错误码

};
//-------------------首充重置---------------------------

// 请求首充重置
struct U2GS_GetFirstRechargeResetReq ->
{
	uint32					ac_id;			// 活动id
};

// 首充重置返回
struct GS2U_FirstRechargeResetRet <-
{
	uint32			ac_id;	     // 活动id
	uint32	        err_code;    // 错误码
	
};

// 首充重置最大次数和描述
struct firstRechargeRestInfo
{
	uint32     max_times;
	string     reset_text
};

//-------------------首充重置 end---------------------------


// ================================= 龙神秘宝 =================================
struct type_traw
{
	uint32 draw_times; // 抽奖次数
	uint32 base_expectation; // 基础类预期
	uint32 a_expectation; // A类预期
	uint32 s_expectation; // S类预期
	uint32 ss_expectation; // SS类预期
	uint32 sss_expectation; // SSS预期
};

struct times_reward_item
{
	uint32 index; // 奖励编号
	uint32 draw_times; // 抽奖次数
	uint32 career; // 职业
	uint32 type; // 类型
	uint32 itemID; // ID
	uint32 count; // 数量
	uint32 quality; // 品质
	uint32 star; // 星级
	uint32 bind; // 是否绑定
};

// 奖池奖励信息
struct dragon_treasure
{
	vector<consWay>				consWay;		// 消耗
	vector<key_value>     purchase;   // 购买道具消耗
	vector<key_value>			choose_num;		// 自选数量[{type, num}, ...]
	vector<type_traw>     type_traw;   //	抽取品类
	vector<times_reward_item>		times_reward_item;		// 抽奖次数奖励
	vector<indexTypeItem>		base_item;		// 基础奖励
	vector<indexTypeItem>		type_A_item;		// A类奖励
	vector<indexTypeItem>		type_S_item;		// S类奖励
	vector<indexTypeItem>		type_SS_item;		// SS类奖励
	vector<indexTypeItem>		type_SSS_item;		// SSS类奖励
	vector<key_value>		notice;    // 公告配置 [{序号, 是否公告}]
};

// 龙神秘宝返回
struct GS2U_dragon_treasure_ret <-
{
  uint32      id;             				// 活动入口ID
  uint32      err;             				// 错误码
  dragon_treasure 		info;	// 配置
  vector<uint32>	select_ids;					// 选择的奖励[idx, ...]
  vector<key_value>	draw_ids;					// 抽到的奖励[{pos, idx}, ...]
  vector<uint32>	times_rewards;			// 领取的次数奖励[idx]
};

// 选择自选奖励
struct U2GS_DragonTreasureSelectReward ->
{
	uint32				ac_id;			// 活动id
	vector<uint32>		select_ids;		// 选择的id列表
};
struct GS2U_DragonTreasureSelectRewardRet <-
{
	uint32				err_code;		// 错误码
	uint32				ac_id;			// 活动id
	vector<uint32>		select_ids;		// 选择的id列表
};

// 抽奖
struct U2GS_DragonTreasureDraw ->
{
	uint32				ac_id;			// 活动id
	uint32				pos;			// 奖励位置
};
struct GS2U_DragonTreasureDrawRet <-
{
	uint32				err_code;		// 错误码
	uint32				ac_id;			// 活动id
	uint32				pos;			// 奖励位置
	uint32				index;			// 奖励index
};

// 领取次数奖励
struct U2GS_DragonTreasureGetTimesReward ->
{
	uint32				ac_id;			// 活动id
	uint32				index;			// 奖励index
};
struct GS2U_DragonTreasureGetTimesRewardRet ->
{
	uint32				err_code;		// 错误码
	uint32				ac_id;			// 活动id
	uint32				index;			// 奖励index
};

// 购买活动消耗道具
struct U2GS_DragonTreasureBuyConsumeReq ->
{
	uint32		id;					// 活动入口ID
	uint16      num;                // 购买数量
};
struct GS2U_DragonTreasureBuyConsumeRet <-
{
	uint32		id;					// 活动入口ID
	uint16      num;                // 购买数量
	uint32		err;				// 错误码
};
// ================================= 龙神秘宝 end =================================

// 庆典活动基础数据
struct activeBaseInfoEx
{
	uint32		id;				// 活动ID
	uint32      group_id        // 组id(组内第一个活动的id)
	uint16      group_index;    // 分组顺序
	string      group_name; 	// 所属组名
	string 		name;			// 活动名称
	string		title;			// 活动副标题
	string		describe;		// 活动公告内容
	string		describe_big;		// 活动公告内容
	vector<uint32>	pic_list;	// 活动配置图标
	uint8   push_title;
	uint8		teamType;		// 活动分组
	string		teamName;		// 活动分组名
	uint8		type;			// 活动类型(1、条件达成类, 2、多倍奖励类, 3、限时购买类, 4、物品兑换类, 5、排行榜类型)
	uint16		detailedType;	// 详细类型（客户端显示图片用）
	uint32		startTime;		// 开始时间
	uint32		endTime;		// 结束时间
	uint32		showEndTime;	// 显示结束时间
	string		banner_upleft;	// 左上banner
	string		banner_lowleft;	// 左下banner
	string		banner_upright;	// 右上banner
	string		banner_lowright;// 右下banner
	vector<timeInterval> interval_list;	// 活动时间区间
	vector<uint64>	joinCustom;		// 参与条件([Type,MinLevel,MaxLevel] or [Type, MinVip, MaxVip] or [Type, MinBattleValue, MaxBattleValue] or [])
	vector<rechargeAct> recharge_list;	// 庆典累充列表(庆典累充)
	vector<dailyTopBase> daily_top_list;	// 庆典排行榜列表（庆典排行榜）
	vector<activityItem> activityList;	// 活动项目列表(庆典任务)
	vector<resPoint>	resPoint_list;	// 消耗资源列表(资源盛典 消耗资源)
	SalesFunds	salesFunds;				// 大圣基金
	WeeklyCard	weeklyCard;		// 特权周卡
	Card777		card777;		// 龙神777
	vector<ac_play>   ac_play_list;  // 玩法活动列表
	vector<f_sign>		f_sign_list;	// 节日签到列表
	vector<mystery_shop>	m_shop_list;// 神秘商店列表
	Fireworks   fireworks;      // 新版烟花
	vector<firstRechargeRestInfo>          firstRechargeRest; // 首充重置最大次数和描述
	vector<LuckyCat>   lucky_cat;      // 招财猫
	change_package  change_package;    // 换包奖励
	dragon_treasure	dragon_treasure;	// 龙神秘宝
	vector<WheelLuckOne>  wheel_luck_one; // 幸运转盘
	WheelLuckTwo   wheel_luck_two;        // 鸿运转盘
	vector<openServerGiftPacks>    open_server_gift_packs;    // 开服礼包
	vector<limit_direct_buy>   limit_goods;      // 限时直购
};
// 发送活动基础数据到客户端
struct GS2U_sendActivityBaseListEx__6544 <-
{
	uint8		teamType;		// 活动分组
	vector<activeBaseInfoEx> activity_list;
};
// 客户端请求庆典活动数据
struct U2GS_requestActivityBaseinfoEx__6545 ->
{
	uint8		teamType;		// 活动分组
};

// 剑台除魔请求某张地图的诅咒值
struct U2GS_RequestMapCurse__6546 ->
{
	uint32		mapDataID;		// 地图ID
};
struct GS2U_RequestMapCurseRet__6547 <-
{
  uint32		errCode;  // 0-成功
	uint32		mapDataID;		// 地图ID
	uint32		boughtTimes;		// 已经购买的次数
	bool      isMax;    // 是否超过最大值0-No 1-Yes
};
// 剑台除魔同步某张地图的诅咒值
struct GS2U_SyncMapCurse__6548 <-
{
	uint32		mapDataID;		// 地图ID
	uint32		value;		// 当前值
};
// 剑台除魔购买地图保护时间 重置诅咒值
struct U2GS_BuyCMMapEnterTime__6549 ->
{
	uint32		mapDataID;
};
struct GS2U_BuyCMMapEnterTimeRet__6550 <-
{
	uint32		errCode;  // 0-成功
	uint32		mapDataID;
};
// 请求庆典排行榜数据
struct U2GS_getDailyTopInfo__6551 ->
{
	uint32		id;
};
struct dailyTopPlayer
{
	uint64		playerID;
	string		name;
	uint8     sex;
	uint32    title_id;  
	uint16    honor;  
	uint32		career;
	vector<EqLookInfo> eq_list;  // 可见的装备列表
	uint32  	wingCfgID;	// 佩戴神翼ID
	uint32		value;	// 排行榜值 (职业 时装 翅膀)
	uint16		rank;	// 排名
	uint16      nationality_id;        // 区域id
	uint32	weapon_id;			// 神兵id
	uint8	weapon_vfx;			// 神兵特效
	uint32	weapon_level;		// 神兵阶数
	uint32	weapon_star;		// 神兵星级
};
struct top_of_day
{
	uint8		day;
	uint8		top_type;
	vector<dailyTopPlayer> rank_list;
};
struct GS2U_sendDailyTopInfo__6552 <-
{
	uint32		id;
	uint8		curDay;		// 当前活动第几天
	uint32		curValue;		// 玩家自己的值
	vector<top_of_day> top_list;
};
// 剑台除魔购买次数
struct U2GS_RequestBuyCMMapTimes__6553 ->
{
  uint8    buyTimes; // 购买xx次
};
struct GS2U_RequestBuyCMMapTimesRet__6554 <-
{
  uint32		errCode;  // 0-成功
	uint32		remainTimes;		// 当前剩余总次数
};

// 镇魔塔次数找回
struct U2GS_ArtiDungeonBuy__6556 ->
{
	uint32  freeCount;			  // 找回免费次数
	uint32  payCount;			  // 找回购买次数
};
struct GS2U_ArtiDungeonBuy__6557 <-
{
	uint32  freeCount;			  // 找回免费次数
	uint32  payCount;			  // 找回购买次数
	uint32  errorCode;		      // 0-成功，非0-错误原因
};

// 购买大圣基金
struct U2GS_buySalesFunds__6558 ->
{
	uint32		id;		// 活动ID
	uint8		index;	// 档次索引
};
struct GS2U_buySalesFundsResult__6559 <-
{
	uint32		id;		// 活动ID
	uint8		index;	// 档次索引
	uint32		result;
};
// 领取大圣基金奖励
struct U2GS_getSalesFundsAward__6560 ->
{
	uint32		id;		// 活动ID
	uint8		index;	// 档次索引
};
struct GS2U_getSalesFundsAwardResult__6561 <-
{
	uint32		id;		// 活动ID
	uint8		index;	// 档次索引
	uint32		result;
};
// 请求新郎新娘的信息
struct U2GS_requestBrideInfo__6562 ->
{
	uint64		ownerID;			
};

// -------------------------------- PK规则、红名规则 BEGIN -----------------------------------------------

// 客户端请求改变PK模式，不管成功或失败，服务器都会返回GS2U_pk_mode_change，以服务器为准
struct U2GS_pk_mode_change__10101 ->
{
	uint8  mode;		// PK模式
};
// 服务器同步PK模式
struct GS2U_pk_mode_change__10102 <-
{
	uint64  player_id;  // 玩家ID
	uint8   mode;		// PK模式
};

// 服务器同步红名值
struct GS2U_red_value__10103 <-
{
	uint64  player_id;  // 玩家ID
	uint32  red_value;	// 红名值
};

// 服务器同步反击状态
struct GS2U_fight_back_status__10104 <-
{
	uint64  target_player_id;  // 对方玩家ID
	uint8   status;			   // 反击状态：0-离开、1-进入
};

// -------------------------------- PK规则、红名规则 END ---------------------------------------------------


// -------------------------------- 聚魂 BEGIN -----------------------------------------------

// 灵魂结构
struct SoulInfo
{
	uint64	soul_uid;		  // 灵魂实例ID
	uint32	cfg_id;			  // 配置ID （item_id）
	uint16  level;	          // 等级
	uint16  star;             //星级
	uint16  stage;            // 阶级
};

// 灵魂装配信息
struct SoulPosInfo
{
	uint16  position;         // 位置  1-6 普通 7-核心
	uint64	soul_uid;		  // 灵魂实例ID
};

// 发送灵魂列表
struct GS2U_SoulList__10201 <-
{
	vector<SoulInfo>	soul_list;	         // all
	vector<SoulPosInfo>	soul_equip_list; // 装配列表	
};

// 批量刷新灵魂
struct GS2U_SoulUpdate <-
{
	vector<SoulInfo>	soul;	
};

// 灵魂装配
struct U2GS_SoulEquipOn__10204 ->
{
	uint16  position;         // 位置 为0表示由服务器去找位置
	uint64	soul_uid;		  // 灵魂实例ID
};
// 灵魂卸下
struct U2GS_SoulEquipOff__10205 ->
{
	uint16  position;         // 位置 
	uint64	soul_uid;		  // 灵魂实例ID
};

// 刷新灵魂位置
struct GS2U_SoulPosUpdate__10206 <-
{
	SoulPosInfo	soul_pos;	
};

// 灵魂升级
struct U2GS_SoulAddLevel__10207 ->
{
	uint64	soul_uid;	// 灵魂实例ID
	uint32	add_lv;		// 升多少级
};
// 灵魂升级返回
struct GS2U_SoulAddLevelRet__10208 <-
{
	uint32  err_code;
	uint64	soul_uid;	// 灵魂实例ID
};
// 灵魂升星
struct U2GS_SoulAddStar ->
{
	uint64	soul_uid;	// 
};
// 灵魂升星返回
struct GS2U_SoulAddStarRet <-
{
	uint32  err_code;
	uint64	soul_uid;	// 
};

// 灵魂升阶
struct U2GS_SoulAddStage ->
{
	uint64	soul_uid;	// 
};
// 灵魂升阶返回
struct GS2U_SoulAddStageRet <-
{
	uint32  err_code;
	uint64	soul_uid;	// 
};

// 灵魂拆解
struct U2GS_SoulSeparate__10211 ->
{
	uint64	soul_uid;	// 灵魂实例ID
};
// 灵魂拆解
struct GS2U_SoulSeparateRet__10212 <-
{
  uint32  err_code;
};

// 灵魂分解
struct U2GS_SoulFade__10213 ->
{
	vector<uint64>	soul_uids;	// 灵魂实例ID
};
// 灵魂分解
struct GS2U_SoulFadeRet__10214 <-
{
  uint32  err_code;
};


//  todo  1. 背包满时自动分解   



// -------------------------------- 聚魂 END ---------------------------------------------------

// -------------------------------- 新背包物品系统 BEGIN -----------------------------------------------
// 物品结构
struct item_info
{
	uint64  id;				// 实例Id
	pb_uint32  cfg_id;			// 配置Id
	uint8   bind;			// 是否绑定：0-非绑、1-绑定
	pb_uint32  expire_time;	// 过期时间，0为不过期
	uint32  amount;			// 堆叠数量
};

// 1   个人背包
// 2   个人仓库
// 3   灵魂背包
// 4   灵魂装备背包(存放已经穿戴的灵魂)
// 5   符文背包
// 6   符文装备背包
// 7   神兽装备背包
// 8   神兽装备穿戴背包
// 9   玩家装备穿戴背包
// 10  玩家镶嵌宝石背包
// 11  魔灵装备
// 12  魔灵穿戴的装备
// 13  翼灵装备
// 14  翼灵穿戴的装备
// 15  兽灵装备
// 16  兽灵穿戴的装备
// 17  图鉴背包
// 背包结构
struct item_bag_info
{
	uint8              bag_type;	// 背包类型：1-个人背包、2-个人仓库
	uint16             capacity; 	// 背包容量
	pb_uint16             extend; 	  // 扩展容量
	vector<item_info>  item_list;  	// 物品列表
};

// 背包列表，上线时发送
struct GS2U_item_bag_list__10301 <-
{
	vector<item_bag_info>  bag_list;  	// 背包列表
};

// 背包变化
struct GS2U_item_bag_change__10302 <-
{
	uint8              bag_type;			// 背包类型：1-个人背包、2-个人仓库
	uint16             capacity; 			// 背包容量
	uint16             extend; 			// 背包容量
	vector<uint64>     delete_item_list;  	// 删除物品列表
	vector<item_info>  update_item_list;  	// 增加、更新物品列表
};

// 背包容量扩充
struct U2GS_item_bag_capacity ->
{
  uint8   bag_id;
	uint8   count; 				// 扩充个数
	uint32  currency;			// 消耗货币数量
};
struct GS2U_item_bag_capacity <-
{
  uint8   bag_id;
	// 成功后会发送GS2U_item_bag_change消息
	uint16  error;		  		// 0-成功，非0-错误原因
};

// 背包堆叠拆分
struct U2GS_item_bag_split ->
{
	uint8   bag_type;			// 背包类型：1-个人背包、2-个人仓库
	uint64  id;					// 实例Id
	uint16  amount;				// 移出数量
};
struct GS2U_item_bag_split <-
{
	// 成功后会发送GS2U_item_bag_change消息
	uint16  error;		  		// 0-成功，非0-错误原因
};

// 背包整理
struct U2GS_item_bag_merge ->
{
	uint8   bag_type;			// 背包类型：1-个人背包、2-个人仓库
};
struct GS2U_item_bag_merge <-
{
	// 成功后会发送GS2U_item_bag_change消息
	uint16  error;		  		// 0-成功，非0-错误原因
};

// 背包物品转移
struct U2GS_item_bag_transfer__10309 ->
{
	uint8   bag_type;			// 背包类型：1-个人背包、2-个人仓库
	vector<uint64>  ids;					// 实例Id
	uint8   target_bag_type;	// 背包类型：1-个人背包、2-个人仓库
};
struct GS2U_item_bag_transfer__10310 <-
{
	// 成功后会发送GS2U_item_bag_change消息
	uint8   bag_type;			// 背包类型：1-个人背包、2-个人仓库
	vector<uint64>  ids;					// 实例Id
	uint8   target_bag_type;	// 背包类型：1-个人背包、2-个人仓库
	uint16  error;		  		// 0-成功，非0-错误原因
};

// 背包物品出售
struct U2GS_item_bag_sell ->
{
  uint8   bag_id;			// 
	vector<uint64>  delete_item_list;  	// 出售物品列表
};
struct GS2U_item_bag_sell <-
{
	// 成功后会发送GS2U_item_bag_change消息
	uint16  error;		  				// 0-成功，非0-错误原因
	vector<CoinInfo>  money;			// 返回货币
};

// 物品使用情况
struct ItemUse
{
	uint32	item_id;	// 物品id
	uint32	use_count;	// 使用数量
};

// 物品cd
struct ItemCd
{
	uint32	type;		// 类型
	uint32	count;		// 数量
};

// 物品使用情况同步(全部),上线发送
struct GS2U_ItemUseInfoSync <-
{
	vector<ItemUse>	use_info;	// 物品使用情况
};

// 物品使用情况同步(变化的),变化时发送
struct GS2U_ItemUseInfoUpdate <-
{
	vector<ItemUse>	use_info;	// 物品使用情况
};

// 物品cd情况同步(全部),上线发送
struct GS2U_ItemCdInfoSync <-
{
	vector<ItemCd>	cd_info;	// 物品cd情况
};

// 物品cd情况同步(变化的),变化时发送
struct GS2U_ItemCdInfoUpdate <-
{
	vector<ItemCd>	cd_info;	// 物品cd情况
};

// -------------------------------- 新背包物品系统 END -----------------------------------------------

// -------------------------------- 符文塔 ---------------------------------------------------
//进入
struct U2GS_EnterRuneTower ->
{
	uint				dungeonID;
};
// 已有祝福列表
struct U2GS_DragonTowerBless ->
{
};
struct GS2U_DragonTowerBlessRet <-
{
	vector<uint32>	blessList		// 已选择的祝福列表
	vector<uint32>	randomBlessList	// 待选择的祝福列表
	uint32			error;
};
// 选择祝福
struct U2GS_DragonTowerChoiceBless ->
{
	uint32	blessId;		// 0为稍后选择，随机选择的话前端进行随机
};
struct GS2U_DragonTowerChoiceBlessRet <-
{
	uint32			blessId;
	vector<uint32>	randomBlessList	// 待选择的祝福列表
	vector<uint32>	blessList		// 已选择的祝福列表
	uint32			error;
};

struct dragonTowerReward
{
	uint32	dungeonID;
	uint64      		exp;    	// 经验
	vector<CoinInfo>	coinList;	// 货币列表
	vector<itemInfo>	itemList;	// 道具列表
	
};
// 扫荡
struct U2GS_DragonTowerMopUp ->
{
	uint32	number;		// 扫荡层数
};
struct GS2U_DragonTowerMopUpRet <-
{
	uint32				number;		// 扫荡层数
	vector<dragonTowerReward>	reward_list;	// 奖励列表
	uint32				error;
};

// -------------------------------- 符文塔 END ---------------------------------------------------

// -------------------------------- 符文 BEGIN -----------------------------------------------

// 符文结构
struct RuneInfo
{
	uint64	rune_uid;		  // 灵魂实例ID
	uint32	cfg_id;			  // 配置ID （item_id）
	uint16	star;			// 星级
	uint16  level;        // 等级
	uint16  stage;         // 阶级
};

// 符文装配信息  会同步所有激活了的孔位
struct RunePosInfo
{
	uint64 	role_id;		// 角色ID
	int16  	position;     	// 部位
	uint64	rune_uid;		// 灵魂实例ID
};

// 发送符文列表
struct GS2U_RuneList <-
{
	vector<RuneInfo>	rune_list;	         // all
	vector<RunePosInfo>	rune_equip_list; // 装配列表	
};

// 刷新符文
struct GS2U_RuneUpdate <-
{
	vector<RuneInfo>	rune;	
};

// 符文装配
struct U2GS_RuneEquipOn ->
{
	uint64 	role_id;		// 角色ID
	int16  position;         // 位置 为0表示由服务器去找位置
	uint64	rune_uid;		  // 
};
// 符文卸下
struct U2GS_RuneEquipOff ->
{
	uint64 	role_id;		// 角色ID
	int16  position;         // 位置 
	uint64	rune_uid;		  // 
};

// 刷新符文位置
struct GS2U_RunePosUpdate <-
{
	RunePosInfo	rune_pos;	
};

// 符文升级
struct U2GS_RuneAddLevel ->
{
	uint64	rune_uid;	// 符文uid
	uint32	add_lv;		// 升多少级
};
// 符文升级返回
struct GS2U_RuneAddLevelRet <-
{
	uint32  err_code;
	uint64	rune_uid;	// 符文uid
};

// 符文升星
struct U2GS_RuneAddStar ->
{
	uint64	rune_uid;	// 
};
// 符文升星返回
struct GS2U_RuneAddStarRet <-
{
	uint32  err_code;
	uint64	rune_uid;	// 
};

// 符文升阶
struct U2GS_RuneAddStage ->
{
	uint64	rune_uid;	// 
};
// 符文升阶返回
struct GS2U_RuneAddStageRet <-
{
	uint32  err_code;
	uint64	rune_uid;	// 
};

// 符文拆解
struct U2GS_RuneSeparate ->
{
	uint64	rune_uid;	// 灵魂实例ID
};
// 符文拆解
struct GS2U_RuneSeparateRet <-
{
  uint32  err_code;
};

// 符文分解
struct U2GS_RuneFade ->
{
	vector<uint64>	rune_uids;	// 灵魂实例ID
};
// 符文分解
struct GS2U_RuneFadeRet <-
{
  uint32  err_code;
};
// -------------------------------- 符文 END ---------------------------------------------------

// -------------------------------- D3法阵符文 BEGIN ---------------------------------------------------

// 法阵结构
struct FazhenInfo
{
	uint64	fazhen_uid;		// 法阵实例ID
	uint16	star;			// 星级
	vector<key_big_value> rune_list;	// 符文列表[{pos, FazhenRuneUid}] （大概有4 5 6个位置）
};
// 符文结构
struct FazhenRuneInfo
{
	uint64	rune_uid;		// 灵魂实例ID
	uint64	fazhen_uid;		// 法阵实例id
	uint16  level;			// 等级
	uint16  star;			// 星级
};

//显示用符文法阵结构
struct FaZhenRuneViewInfo
{
	uint64  fazhen_uid;				// 法阵uid
	uint32	cfg_id;				// 法阵配置id
	uint8  	star;				// 法阵星级
	uint8 	pos;				// 位置
	vector<key_2value> 	rune;	//镶嵌符文列表{镶嵌符文配置ID,符文等级,符文星级}
};


// 上线同步法阵和符文
struct GS2U_SyncFazhenRune <-
{
	vector<FazhenInfo> fazhen_list;		// 法阵列表
	vector<FazhenRuneInfo> rune_list;	// 符文列表
	vector<uint8> unlock_pos_list;		// 解锁的法阵位置
};

// 更新法阵
struct GS2U_UpdateFazhen <-
{
	vector<FazhenInfo> fazhen_list;
};

// 更新符文
struct GS2U_UpdateFazhenRune <-
{
	vector<FazhenRuneInfo> rune_list;
};

//请求其他玩家的符文法阵结构数据
struct U2GS_FazhenRuneViewInfo ->
{
	uint64 player_id;	//玩家id
	uint8  type;        // 类型：0-其他查看、1-竞技场查看
};

struct GS2U_FazhenRuneViewInfoRet <-
{
	uint64 player_id;	//玩家id
	vector<FaZhenRuneViewInfo> fazhen_view_list;	//法阵符文结构列表
	uint32 err_code;	//错误码
};

// 法阵位解锁
struct U2GS_FazhenPos ->
{
	uint8 pos;			//解锁位
};

struct GS2U_FazhenPosRet <-
{
	uint8 pos;			//解锁的位置
	uint32 err_code;	//错误码
};

// 法阵打造（装备）
struct U2GS_FazhenEquip ->
{
	uint64	role_id;					// 角色id
	vector<uint64>	fazhen_uid;			//装备位置、新装备法阵uid
};
// 法阵打造（装备）返回
struct GS2U_FazhenEquipRet <-
{
	uint32	err_code;					// 错误码
	uint64	role_id;					// 角色id
	vector<uint64>	fazhen_uid;			//装备位置、新装备法阵uid
};

// 法阵卸下
struct U2GS_FazhenOff ->
{
	uint64	role_id;				// 角色id
	vector<uint64>	fazhen_uid;		// 法阵实例ID
};
// 法阵卸下结果
struct GS2U_FazhenOffRet <-
{
	uint64	role_id;				// 角色id
	vector<uint64>	fazhen_uid;		// 法阵实例ID
	uint32	err_code;				// 错误码
};

// 法阵/符文分解
struct U2GS_FazhenRuneBreakDown ->
{
	vector<uint64>	fazhen_uid_list;	// 法阵实例ID列表
	vector<uint64>	rune_uid_list;		// 符文实例ID列表
	vector<uint64>	item_uid_list;		// 符文精华ID列表
};
// 分解结果
struct GS2U_FazhenRuneBreakDownRet <-
{
	vector<CoinInfo>	coinList;	// 货币列表
	vector<itemInfo>	itemList;	// 道具列表 
	uint32	err_code;				// 分解结果
}; 

// 法阵升星（升1星）
struct U2GS_FazhenAddStar ->
{
	vector<uint64>	fazhen_uid_list;	// 法阵uid列表
};
struct GS2U_FazhenAddStarRet <-
{
	vector<uint64>	fazhen_uid;	// 升级的法阵列表
	uint32	err_code;			// 错误码
};

struct FazhenRunePosInfo
{
	uint64	fazhen_uid;	// 角色装备法阵uid
	uint8	rune_pos;	// 法阵上的符文位置索引
	uint64	rune_uid;	// 符文uid
};

// 符文镶嵌
struct U2GS_FazhenRuneOn ->
{
	uint64	role_id;								// 角色id
	vector<FazhenRunePosInfo>	fazhen_pos_rune;	// 法阵上的符文位置索引
};
// 符文镶嵌返回
struct GS2U_FazhenRuneOnRet <-
{
	uint64	role_id;								// 角色id
	vector<FazhenRunePosInfo>	fazhen_pos_rune;	// 法阵上的符文位置索引
	uint32	err_code;								// 错误码
};

// 符文卸下
struct U2GS_FazhenRuneOff ->
{
	uint64	role_id;								// 角色id
	vector<FazhenRunePosInfo>	fazhen_pos_rune;	// 法阵上的符文位置索引
};
// 符文卸下返回
struct GS2U_FazhenRuneOffRet <-
{
	uint64	role_id;								// 角色id
	vector<FazhenRunePosInfo>	fazhen_pos_rune;	// 法阵上的符文位置索引
	uint32	err_code;								// 错误码
};

// 符文升级
struct U2GS_FazhenRuneAddLv ->
{
	vector<key_big_value>	rune_lv;	// <目标等级，符文uid>
};
// 符文升级返回
struct GS2U_FazhenRuneAddLvRet <-
{
	vector<key_big_value>	rune_lv;	// <目标等级，符文uid>
	uint32	err_code;			// 错误码
};

// 符文升星（升1星）
struct U2GS_FazhenRuneAddStar ->
{
	vector<uint64>	rune_uid	// 符文uid列表
};
// 符文升星返回
struct GS2U_FazhenRuneAddStarRet <-
{
	vector<uint64>	rune_uid	// 符文uid列表
	uint32	err_code;			// 错误码
};

// -------------------------------- D3法阵符文 END ---------------------------------------------------

// -------------------------------- 万神殿(D3神灵) BEGIN -----------------------------------------------
// 万神殿角色数据
struct RoleAstrolabe
{
	uint64	role_id;				// 角色id
	uint8	pos_num;				// 助战数量上限
	vector<uint32>	astro_id_list;	//神灵列表
};

// 发送万神殿装备列表
struct GS2U_AEquipList <-
{
	vector<AEquipmentInfo>	aequips1;	         // 未穿戴
	vector<AEquipmentInfo>	aequips2;	         // 已穿戴
};

// 万神殿的装备位置结构
struct AEquipPos
{
	uint16  position;    // 位置
	uint64	equip_uid;	 // 装备Uid
};
// 万神殿结构
struct Astrolabe
{
	uint32	       id;			// 配置ID
	vector<AEquipPos> equips;	// 装备列表
};
// 上线发送万神殿列表  只有穿了装备的会发  (已弃用:助战孔位数量使用共享变量同步)
struct GS2U_AstrolabeList <-
{
	vector<RoleAstrolabe>	roleAstrolabeList; // all
	vector<Astrolabe>	astrolabes;	// all
};
// 刷新角色万神殿
struct GS2U_RoleAstrolabeUpdate <-
{
	RoleAstrolabe	roleAstrolabe;	// one
};
// 刷新万神殿
struct GS2U_AstrolabeUpdate <-
{
	Astrolabe	astrolabe;	         // one
};
// 刷新万神殿装备
struct GS2U_AEquipUpdate <-
{
	vector<AEquipmentInfo>	aequips;	         // one
};

// 穿戴 卸下
// 装配
struct U2GS_AstroEquipOn ->
{
	uint16  position;         // 位置 为0表示由服务器去找位置
	uint32	astro_id;		  // 万神殿ID
	uint64	aequip_uid;		  // 装备实例ID
};
// 卸下
struct U2GS_AstroEquipOff ->
{
	uint16  position;         // 位置 
	uint32	astro_id;		  // 万神殿ID
	uint64	aequip_uid;		  // 装备实例ID
};

// 助战
struct U2GS_AstroAssistOp ->
{
	uint8   type;         		// 0 -上阵 1-下阵
	uint64	role_id;			// 换上的神灵对应角色id
	uint32	astro_id;			// 神灵ID
	uint32	replace_astro_id;	// 换下的神灵ID 没有换下为0
};
// 助战返回
struct GS2U_AstroAssistOpRet <-
{
	uint32  err_code;
	uint8   type;				//0 -上阵 1-下阵
	uint64	role_id;			// 换上的神灵对应角色id
	uint32	astro_id;			// 神灵ID
	uint32	replace_astro_id;	// 换下的神灵ID 没有换下为0
};

// 扩展助战位置
struct U2GS_AstroExtendAssistNum ->
{
	uint64	role_id;	// 角色id
};
// 扩展助战位置返回
struct GS2U_AstroExtendAssistNumRet <-
{
	uint64	role_id;	// 角色id
	uint32  err_code;
};
// 一键操作
struct U2GS_AstroOneKeyOp ->
{
  uint32	astro_id;		  // 万神殿ID
  uint16 op;   // 0- 全部卸载  1- 一键装配
  vector<uint64> aequips;     // 穿戴的装备信息
};
// 一键操作返回
struct GS2U_AstroOneKeyOpRet <-
{
  uint32	astro_id;		  // 万神殿ID
  uint32  err_code;
	uint16  op;   // 0- 全部卸载  1- 一键装配
};

// 万神殿装备强化
struct U2GS_AEquipAddLevel ->
{
  uint64        		aequip_id;   // 要强化的装备ID
  bool    				is_double;      // 是否加倍
  vector<key_value> 	costlist;     // 消耗的经验道具 key:道具id,value:数量
};
// 万神殿装备强化返回
struct GS2U_AEquipAddLevelRet <-
{
  uint32        err_code;
	uint64        aequip_id;   // 强化的装备ID
};

// 神灵装备拆解
struct U2GS_AEquipDismantle ->
{
  uint64        aequip_id;   // 装备UID
};
struct GS2U_AEquipDismantleRet <-
{
  uint32        err_code;
};

// -------------------------------- 万神殿 END ---------------------------------------------------


// --------------------------------掉落Start -------------------------------------------------
// 掉落物
struct DropItem
{
	uint64	uid; //地图掉落内唯一
	uint64	playerid;//归属玩家id，如果有该值，则只能该玩家可以看到和领取。teamid无效
	uint64	teamid; //归属队伍，为0时全部可以领取
	uint32	time; //保护截止时间，过了保护时间都可以领取
	uint32	id;//物品id,包括货币，材料，装备等
	uint32	num;//数量
	uint16	quality; //品质，仅装备才有意义
	uint16	star; //星数，仅装备才有意义
	float   x;
	float   y;
	uint64  source_id; // 来源对象Id
};
//掉落通知
struct	GS2U_DropItemNotify <-
{
	vector<DropItem> items;
};
//玩家拾取掉落
struct U2GS_GetDropItem ->
{
	uint64	uid;
};

//玩家准备
struct	GS2U_GetDropItemRet <-
{
	uint32	errorCode;
};

//掉落删除通知,视野同步或者被领取等都会删除
struct	GS2U_DropItemCleanNotify <-
{	
	vector<uint64>	uid;
	uint64	playerid;	  // 拾取的玩家ID
};
// --------------------------------掉落end ---------------------------------------------------
struct Dialog_Item
{
	uint32	 item_id;		//物品ID
	uint32	 count;		// 数量
	uint8	   multiple;	// 奖励倍数（默认1倍）
	uint8	   bind;	 // 绑定状态  0 -非绑定   1-绑定
	uint32	 time_limt;	 // 到期时间
};


struct Dialog_Coin
{
	uint8				type;//货币类型
	uint32				amount;//数量
	uint8	      multiple;	// 奖励倍数（默认1倍）
};
// --------------------------------挂机 --------------------------------
// 开始挂机
struct U2GS_startHang ->
{
	
};
struct GS2U_startHangResult <-
{
	uint32		result;
};
// 结束挂机
struct U2GS_stopHang ->
{
	
};
struct GS2U_soptHangResult <-
{
	uint32		result;
};
// 获取挂机数据
struct U2GS_getHangData ->
{
	
};
struct expEffect
{
	uint64		player_id;	// 玩家ID
	string		name;		// 玩家名
	uint8		sex;		// 性别
	uint64		exp_effect;	// 经验效率
	uint16		rank;		// 排名
};
struct GS2U_sendHangData <-
{
	bool		inHang;		// 是否在线挂机中
	uint32		onlineStart;// 在线挂机开始时间
	uint32		hangTime;	// 挂机时长
	uint64		exp1;		// 在线挂机经验
	uint64		exp2;		// 离线挂机经验
	uint16		level;		// 当前经验可以升到的等级
	uint32		coin1;		// 在线挂机金币
	uint32		coin2;		// 离线挂机金币
	vector<Dialog_Item> item_list1;	// 在线挂机奖励
	vector<EqInfo> eq_list1;	// 在线挂机奖励
	vector<Dialog_Item> item_list2;	// 离线挂机奖励
	vector<EqInfo> eq_list2;	// 离线挂机奖励
	uint64		cur_exp;	// 当前经验产量
	uint32		cur_coin;	// 当前金币产量
	uint32		fade_num;	// 炼金装备数量
	uint32		fade_exp;	// 炼金经验
	vector<Dialog_Item> cur_item_list;
	vector<EqInfo> cur_eq_list;	
	vector<expEffect>	effect_list;	// 效率排行榜
	vector<Dialog_Coin> curr_list; // 货币奖励	
};
// 请求挂机开始时间
struct U2GS_getHangStartTime ->
{
	
};
// 通知前端关机开始时间
struct GS2U_HangStartTime <-
{
	uint32	time;	// 开始时间	
};
// 玩家领奖
struct U2GS_getHangAward ->
{
	
};
struct GS2U_getHangAwardResult <-
{
	uint32		result;
};
// 请求快速挂机奖励
struct U2GS_requestQuickAwardInfo ->
{
};
struct GS2U_requestQuickAwardInfoRet <-
{
	uint64		exp;
	uint32		coin;
	uint16      level;    // 预计提升到等级
	vector<Dialog_Item> item_list;
	vector<EqInfo> eq_list;
};
// 领取快速挂机奖励
struct U2GS_getQuickHangAward ->
{
};
struct GS2U_getQuickHangAwardRet <-
{
	uint32		result;
};
// --------------------------------挂机 end-----------------------------
// --------------------------------合成 --------------------------------
struct U2GS_synthic ->
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	bool		itemBack;	// 是否祝福（失败是否返还）
	uint16		times;		// 合成次数
	vector<uint64> dbIDList;// 实例ID列表
	vector<uint64> dbIDList2;// 实例ID列表
	uint16      flag;       // 0 不使用 1 使用  （ID为20时 0为穿戴 1为收藏）
};

struct GS2U_synthicResult <-
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	uint16		sucTimes;	// 成功次数
	uint32		result;		// 反馈ID
	vector<uint64> backList;// 返还列表
	vector<Dialog_Item>  itemList; // 合成结果-物品
};

// 合成信息
struct synthetic_info
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	uint16		cf_times;	// 连续失败次数
}

struct GS2U_update_synthetic_info <-
{
	vector<synthetic_info> synthetic_info_list; // 合成信息列表
};

// 快捷合成
struct U2GS_quickSynthetic ->
{
	uint32		itemID;			// 材料物品ID
	uint16		allNum;		// 材料物品数量
};

struct GS2U_quickSynthetic <-
{
	uint32      errorCode;		// 错误码
	uint32		itemID;			// 材料物品ID
};
// --------------------------------合成 end-----------------------------
struct pantheconCollection
{
	uint8		level;		// 1表示高级，2表示低级
	uint16		collectTimes;	// 采集次数
};
struct GS2U_sendPantheonCollectInfo <-
{
	vector<pantheconCollection> collect_list;
};

// --------------------------------玩家装备 --------------------------------


// 宝石部位结构
struct GemPosInfo
{
  uint8		pos;		// 部位ID 
  uint64	gem_uid;	// 宝石uid
  uint32	gem_cfg_id;	// 宝石cfg_id
};

// 宝石部位结构
struct CastProp
{
  uint8  pos;		// 部位ID 
  uint8 index;		// 属性号
	pb_uint64 value;		// 属性值
	uint8 character;		// 品质		
};

// 装备部位结构
struct EqPosInfo
{
  uint64  role_id;	// 角色id
  uint8   pos;		// 部位ID
  uint64  equid;		// 装备ID
  pb_uint16  intensity_lv;			    // 强化等级  
  pb_uint16  intensity_t_lv;			    // 强化最大等级  
  pb_uint16  add_lv;			    // 追加等级  
  pb_uint16  add_t_lv;			    // 追加最大等级  
  pb_uint16  ele_intensity_atk_lv;		// 元素强化攻击等级
  pb_uint16  ele_intensity_def_lv;		// 元素强化防御等级
  pb_uint16  ele_intensity_atk_break_lv;	// 元素强化攻击突破等级
  pb_uint16  ele_intensity_def_break_lv;	// 元素强化防御突破等级
  pb_uint16  ele_add_atk_lv;		// 元素追加攻击等级
  pb_uint16  ele_add_def_lv;		// 元素追加防御等级
  pb_uint16  gem_refine_lv;			// 宝石精炼等级  
  pb_uint16  gem_refine_exp;		// 宝石精炼当前经验  
  vector<GemPosInfo> gem_list;	    // 宝石镶嵌信息
  vector<CastProp> cast_prop;	    // 洗练属性列表 [{属性ID,属性值, 属性品质}]
  vector<GrowProp> gd_prop;			// 龙饰属性(最终属性) [{属性ID,初始属性值,成长属性值, 属性品质, 评分索引}]
  vector<key_value>  suit_lv;		// 套装打造的等级: key:1-普通，2-完美 3-传说，value：已打造的阶数
  vector<key_value> card;			// 卡片信息 <hole, card_id>
  uint64	fazhen;					// 法阵实例id
};

// 升级消耗的道具
struct CostList
{
  uint32     item_id;					  
  uint32     num;
};

// 强化大师
struct EqMaster
{
	uint64  role_id;	// 角色id
	uint8	type;		// 类型 1强化 2追加 3宝石 4精炼 5元素强化 6元素追加
	pb_uint32	level;		// 等级
};

// 上线同步
struct GS2U_EqList <-
{
	vector<EqInfo>	eqs;	         // all
	vector<EqPosInfo>	eqps;	         // all
	vector<EqMaster>	eq_master;		// all
};

// 刷新装备
struct GS2U_EqUpdate <-
{
	vector<EqInfo>	eqs;
};
// 刷新装备部位
struct GS2U_EqPosUpdate <-
{
	vector<EqPosInfo>	eqps;
};
// 刷新大师信息
struct GS2U_EqMasterUpdate <-
{
	vector<EqMaster>	eq_master;
};

// 穿戴 卸下
// 装配
struct U2GS_EquipOp ->
{
	uint8  type;         // 0 - 穿  1-脱
	uint64 equid;		  // 装备实例ID
	uint64 role_id;		// 角色id
};

struct GS2U_EquipOpRet <-
{
  uint32 err_code;
	uint8  type;         // 0 - 穿  1-脱
	uint64 equid;		  // 装备实例ID
	uint64 role_id;		// 角色id
};


// 装备强化
struct U2GS_EqAddLevel ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 要强化的装备ID
};
// 装备强化返回
struct GS2U_EqAddLevelRet <-
{
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint64        equid;   // 强化的装备ID
  uint16    is_success;  // 是否成功
};

// 装备追加
struct U2GS_EqAddAdd ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint16        intact_num;  // 使用完璧道具个数
};

// 装备元素强化
struct U2GS_EqEleAddLevel ->
{
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备元素强化返回
struct GS2U_EqEleAddLevelRet <-
{
	uint32		err_code;	// 错误码
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备元素强化突破
struct U2GS_EqEleLevelBreak ->
{
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备元素强化突破
struct GS2U_EqEleLevelBreakRet <-
{
	uint32		err_code;	// 错误码
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备元素追加
struct U2GS_EqEleAddAdd ->
{
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备元素追加返回
struct GS2U_EqEleAddAddRet <-
{
	uint32		err_code;	// 错误码
	uint64		role_id;	// 角色id
	uint64		equid;		// 装备id
	uint8		type;		// 类型
};

// 装备炼金
struct U2GS_EqFade ->
{
  vector<uint64>        equids;   // 要祭炼的装备ID们
};
// 装备炼金返回
struct GS2U_EqFadeRet <-
{
  uint32        err_code;
};

// 装备洗练
struct U2GS_EqCast ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint8         type;    // 洗练类型 0-基础洗练  1-免费 2-钻石 3-高级橙 4-高级红
  vector<uint8>  lock_indes;   // 锁住的索引
};
// 装备洗练返回
struct GS2U_EqCastRet <-
{
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
};



// 装备洗练位扩展
struct U2GS_EqCastHoleExtend ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint8         pos;     // 
};
// 装备洗练位扩展返回
struct GS2U_EqCastHoleExtendRet <-
{
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint8         pos;     // 
};


// 装备 宝石镶嵌
struct U2GS_EqGemEquipOn ->
{
  uint64		role_id;	// 角色id
  uint64        eq_uid;   // 装备ID
  uint64        gem_uid;   // 宝石ID
  uint8        pos;   // 位置
};
// 装备 宝石卸载
struct U2GS_EqGemEquipOff ->
{
  uint64		role_id;	// 角色id
  uint64        eq_uid;   // 装备ID
  uint64        gem_uid;   // 宝石ID
  uint8        pos;   // 位置
};

// 装备宝石镶嵌\卸载返回返回
struct GS2U_EqGemEquipRet <-
{
  uint8        op;   // 0- 穿  1- 脱
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint64        eq_uid;   // 装备ID
  uint64        gem_uid;   // 宝石ID
  uint8        pos;   // 位置
};

// 装备宝石一键镶嵌
struct U2GS_EqGem1KeyEquipOn ->
{
	uint64				role_id;	// 角色id
	uint64				eq_uid;		// 装备ID
	vector<GemPosInfo>	equip_list;	// 镶嵌列表
};

// 装备宝石一键镶嵌返回
struct GS2U_EqGem1KeyEquipOnRet <-
{
	uint32				err_code;	// 错误码
	uint64				role_id;	// 角色id
	uint64				eq_uid;		// 装备ID
};

// 装备宝石一键卸下
struct U2GS_EqGem1KeyEquipOff ->
{
	uint64				role_id;	// 角色id
	uint64				eq_uid;		// 装备ID
};

// 装备宝石一键卸下返回
struct GS2U_EqGem1KeyEquipOffRet <-
{
	uint32				err_code;	// 错误码
	uint64				role_id;	// 角色id
	uint64				eq_uid;		// 装备ID
};

// 装备 宝石精炼  (对装备部位进行 而非对宝石)
struct U2GS_EqGemAddLevel ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
 vector<CostList>  costs;   // 消耗
};

// 装备宝石精炼返回
struct GS2U_EqGemAddLevelRet <-
{
  uint32        err_code;
};

// 装备 宝石拆解
struct U2GS_EqGemDismantle ->
{
  uint64        uid;   
};
// 装备 宝石拆解返回
struct GS2U_EqGemDismantleRet <-
{
  uint32        err_code;
};

// 装备套装打造
struct U2GS_EqSuitAdd ->
{
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint16		type;	// 类型：1-普通 2-完美 3-传说
};

// 装备套装打造返回
struct GS2U_EqSuitAddRet <-
{
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint64        equid;   // 装备ID
  uint16		type;	// 类型：1-普通 2-完美 3-传说
  uint16        now_suit_lv; //打造后的等级
};

// 装备套装拆解
struct U2GS_EqSuitDismantle ->
{
  uint64		role_id;	// 角色id
  uint16        pos;   // 部位
  uint16		type;	// 类型：1-普通 2-完美 3-传说
};

// 装备套装拆解返回
struct GS2U_EqSuitDismantleRet <-
{
  uint32        err_code;
  uint64		role_id;	// 角色id
  uint16        pos;   // 部位
  uint16		type;	// 类型：1-普通 2-完美 3-传说
};


// 装备大师点亮
struct U2GS_EqMasterAdd ->
{
	uint64	role_id;	// 角色id
	uint8	type;		// 1 强化大师 2 追加大师 3 宝石等级大师 4 宝石精炼大师
};

struct GS2U_EqMasterAddRet <-
{
	uint64	role_id;	// 角色id
	uint8	type;		// 1 强化大师 2 追加大师 3 宝石等级大师 4 宝石精炼大师
	uint16	level;		// 大师等级
	uint32	err_code;
};

struct GS2U_fade_privilege_info <-
{
	uint8	lv;		// 特权等级
	uint32	time;	// 激活时间
};

struct GS2U_recharge_fade_privilege_ret <-
{
	uint8	lv;		// 特权等级
	uint32	time;	// 激活时间
	uint32	err_code;	// 错误码
};

// 装备卸下返还
struct GS2U_equip_off_back <-
{
	vector<key_value> back_list; // 返还道具列表 [{ItemID, Num}]
};

// 装备倾向选择
struct U2GS_EqPolaritySelectReq ->
{
	uint64	eq_uid;	// 装备uid
	uint8		target_polarity;		// 目标相性
};

struct GS2U_EqPolaritySelectRet <-
{
	uint64	eq_uid;	// 装备uid
	uint8		target_polarity;		// 目标相性
	uint32	err_code;
};

// 装备打造 
struct U2GS_eq_forge_req ->
{
	uint64		base_eq_uid;			// 基础装备uid
	vector<uint64>		used_list;		// 材料装备uid列表
};

struct GS2U_eq_forge_ret <-
{
	uint64		base_eq_uid;			// 基础装备uid
	uint8     is_success; // 1 成功 0 失败
	uint32      err_code;		// 错误码
};
// --------------------------------玩家装备 end-----------------------------

// ---------------------------- 魔戒 -----------------------------
// 魔戒穿戴信息
struct LordRingPosInfo
{
	uint8	pos;			// 部位
	uint64	uid;			// uid
};

// 角色魔戒穿戴信息
struct RoleLordRingPosInfo
{
	uint64	role_id;			// 角色ID
	vector<LordRingPosInfo>	ring_list	// 魔戒列表
};

// 魔戒穿戴/卸下请求
struct U2GS_LordRingOpReq ->
{
	uint64	role_id;			// 角色ID
	uint8	type;			// 0穿戴 1卸下
	uint64	uid;			// 魔戒uid
};

// 魔戒穿戴/卸下结果
struct GS2U_LordRingOpRet <-
{
	uint64	role_id;			// 角色ID
	uint32	err_code;		// 错误码
	uint8	type;			// 0穿戴 1卸下
	uint64	uid;			// 魔戒uid
};

// 上线同步
struct GS2U_LordRingList <-
{
	vector<RoleLordRingPosInfo> lrps;	// 所有穿戴的魔戒
};

// 魔戒装备更新
struct GS2U_LordRingPosUpdate <-
{
	vector<RoleLordRingPosInfo> lrps;	// 更新列表
};

// ---------------------------- 魔戒 end -----------------------------

/

//命中请求
/*struct U2GS_ObjectAttackHit ->
{
	uint64	attacker;
	uint32	skillId;
	uint32  serial;
	uint8	hitCount;
	vector<uint64> targetList;        // 目标列表
};*/

// --------------------------------宠物 start-----------------------------
// 宠物结构
struct PetInfo
{
  uint32         pet_id;					  // 宠物id (配置表Id)
  uint16         pet_lv;					  // 等级
  uint32         pet_exp;						// 经验
  uint16         break_lv;				  // 突破等级  和宠物等级相关
  uint16         star;				      // 星数
  uint16         grade;				      // 品质(稀有度)
  uint16         awaken_lv;				  // 觉醒等级
  uint16         awaken_potential;	// 炼魂等级  和觉醒等级相关 
  uint8          is_rein;   // 是否转生 0否 1是 
  uint16         ultimate_skill_lv;  // 必杀技等级
};

// 刷新宠物 上线发送
struct GS2U_PetUpdate <-
{
  vector<PetInfo>     pets;				  // 
};

// 上阵的宠物列表
struct GS2U_PetEquipList <-
{
  vector<key_value>     pet_list; // （位置，宠物id）
};

// 上阵
struct U2GS_PetOut ->
{
  uint8          pos;
  uint32         pet_id;
};
struct GS2U_PetOutRet <-
{
  uint8          op;            // 1-上阵  2-下阵
  uint32         err_code;   	// 0-成功，非0-错误原因
};


// 升级
struct U2GS_PetAddLv ->
{
  uint32         pet_id;
  vector<CostList>  costs;
};
struct GS2U_PetAddLvRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 自动升级
struct U2GS_PetAutoAddLv ->
{
  uint32         pet_id; // 魔宠ID
};
struct GS2U_PetAutoAddLvRet <-
{
  uint32         pet_id;	// 魔宠ID
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 突破
struct U2GS_PetAddBreak ->
{
  uint32         pet_id;
};
struct GS2U_PetAddBreakRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};


// 升星
struct U2GS_PetAddStar ->
{
  uint32         pet_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_PetAddStarRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 觉醒
struct U2GS_PetAddAwaken ->
{
  uint32         pet_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_PetAddAwakenRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};
// 炼魂
struct U2GS_PetAddAwakenPotential ->
{
  uint32         pet_id;
};
struct GS2U_PetAddAwakenPotentialRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};
// 转生
struct U2GS_PetReincarnation ->
{
  uint32         pet_id;
};
struct GS2U_PetReincarnationRet <-
{
  uint32         pet_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};
// 宠物晋升
struct U2GS_PetAddGrade ->
{
  uint32         pet_id;
};
struct GS2U_PetAddGradeRet <-
{
  uint32         pet_id;
  uint32         err_code;   	// 0-成功，非0-错误原因
};

// 宠物必杀技升级
struct U2GS_PetUltimateLvUp ->
{
  uint32         pet_id;
};
struct GS2U_PetUltimateLvUpRet <-
{
  uint32         pet_id;
  uint32         err_code;   	// 0-成功，非0-错误原因
};

// -------------魔灵 <----------------------
// 魔灵装备位置信息
struct MolingEqPos
{
	uint64		role_id;
	uint8		pos;				
	uint64		uid;   
	uint32		lv;        // 强化等级
	uint16		break_lv;        // 突破等级
};
struct MolingSkill
{
	uint64		role_id;
	uint8		pos;				
	uint32		pet_id;   
	uint32		skill_id;   
};
// 魔灵信息
struct Moling
{
	uint64			role_id;
	uint16			lv;					  // 等级
	uint32			exp;						// 经验
	uint16			pill1;					  // 嗑丹
	uint16			pill2;					  // 
	uint16			pill3;					  // 
};
// 刷新魔灵  或者上线推送
struct GS2U_MolingUpdate <-
{
	vector<Moling>		ml;    // 魔灵
};
// 刷新魔灵上装配的技能
struct GS2U_MolingSkillUpdate <-
{
	vector<MolingSkill>	skills;    
};
// 刷新魔灵上装配的装备
struct GS2U_MolingEqUpdate <-
{
	vector<MolingEqPos>	eqs;
};

// 魔灵升级
struct U2GS_MolingAddLv ->
{
	uint64				role_id;
	vector<CostList>	costs;
};
struct GS2U_MolingAddLvRet <-
{
	uint64		role_id;
	uint32		err_code;   // 0-成功，非0-错误原因
};

// 魔灵升级
struct U2GS_MolingAutoAddLv ->
{
	uint64				role_id;
};
struct GS2U_MolingAutoAddLvRet <-
{
	uint64		role_id;
	uint32  add_exp; // 增加经验值
	uint32		err_code;   // 0-成功，非0-错误原因
};

// 请求开启技能格子
struct U2GS_MolingSkillBoxOpenReq ->
{
	uint64		role_id;
	uint8		pos;	// 技能格
};

// 请求开启技能格子返回
struct GS2U_MolingSkillBoxOpenRet <-
{
	uint64		role_id;
	uint32		err_code;	// 错误码
	uint8		pos;	// 技能格
};

// 魔灵技能穿戴/卸载
struct U2GS_MolingSkillOp ->
{
	uint64		role_id;
	uint8		type; // 0-on  1-off
	uint8		pos; 
	uint32		skillid;  // 技能ID   如果是卸载 可以不使用这个字段
	uint32		petid;    // 来自的宠物
};
struct GS2U_MolingSkillOpRet <-
{
	uint64		role_id;
	uint32		err_code;   // 0-成功，非0-错误原因
	uint8		type; // 0-on  1-off
};

// 魔灵装备穿戴/卸载
struct U2GS_MolingEqOp ->
{
	uint64		role_id;
	uint8		type; // 0-on  1-off
	uint64		uid;
};
struct GS2U_MolingEqOpRet <-
{
	uint64		role_id;
	uint32		err_code;   // 0-成功，非0-错误原因
	uint8		type; // 0-on  1-off
	uint64		uid;
};
// 魔灵装备一键穿戴/卸载
struct U2GS_MolingEqOneKeyOp ->
{
	uint64		role_id;
	uint8		type; // 0-on  1-off
};
struct GS2U_MolingEqOneKeyOpRet <-
{
	uint64		role_id;
	uint32		err_code;   // 0-成功，非0-错误原因
	uint8		type; // 0-on  1-off
};

// 魔灵装备升级
struct U2GS_MolingEqAddLv ->
{
	uint64		role_id;
	uint8		pos; //部位
	uint64		eq_uid;
};
struct GS2U_MolingEqAddLvRet <-
{
	uint64			role_id;
	uint32			err_code;   // 0-成功，非0-错误原因
	uint8			is_success;   // 0- no 1 -yes
};

// 魔灵装备突破
struct U2GS_MolingEqBreak ->
{
  uint64	role_id;
  uint8		pos; //部位
  uint64	eq_uid;
};
struct GS2U_MolingEqBreakRet <-
{
	uint64			role_id;
	uint32			err_code;   // 0-成功，非0-错误原因
};
struct U2GS_YilingEqBreak ->
{
  uint64	role_id;	// 角色ID
  uint8 	pos; 		//部位
  uint64 	eq_uid;
};
struct GS2U_YilingEqBreakRet <-
{
  uint64 		 role_id;		 // 角色ID
  uint32         err_code;   // 0-成功，非0-错误原因
};


// ------->羁绊<---------
// 宠物羁绊信息
struct PetFetter
{
  uint16     f_id;					  // 羁绊ID (羁绊配置表ID)
  uint16    f_lv;   
};
// 刷新羁绊信息
struct GS2U_PetFetterUpdate <-
{
 vector<PetFetter> pfs;   
};
// 激活
struct U2GS_PetFetterActive ->
{
  uint16     f_id;	// 羁绊ID (羁绊配置表ID)
  uint16    f_lv;   // 激活到的等级
};
struct GS2U_PetFetterActiveRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 出战/不出战
struct U2GS_PetEquipOP ->
{
  uint8     type;	// 0 - 出战  1- (目前不能取消出战 预留)
  uint32    pet_id;   // 
};

// 嗑丹
struct U2GS_MolingEatPill ->
{
  uint64    role_id;
  uint8     index;	// 丹药索引
  uint16    num;   // 
};
struct GS2U_MolingEatPillRet <-
{
  uint64         role_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

struct GS2U_MLEqUpdate <-
{
  vector<EqAddition>   eqs;
};
struct GS2U_YLEqUpdate <-
{
  vector<EqAddition>   eqs;
};
struct GS2U_SLEqUpdate <-
{
  vector<EqAddition>   eqs;
};



// --------------------------------宠物 end-----------------------------

// 前端上传下载进度
struct U2GS_DownloadProgress ->
{
	string  imei;			// 手机串号
	uint32  progress;		// 进度百分比
	uint8   is4G;       	// 1-4G、0-其他
};

struct U2GS_buyDungeonFightCount ->
{
	uint	dungeonID;		// 副本ID
	uint8	times;			// 购买次数
};
struct GS2U_buyDungeonFightCountResult <-
{
	uint	dungeonID;		// 副本ID
	uint8	times;			// 购买次数
	uint32	result;			// 返回
};

// --------------------------------翅膀-----------------------------
// 翅膀数据
struct WingNew
{
	uint32	wing_id;		// 翅膀ID 配置表Id
	uint16	wing_lv;			// 等级
	uint16	wing_exp;			// 经验
	uint16  break_lv;				  // 突破等级  和翅膀等级相关
	uint16	star;			// 星数
	uint16  feather_lv; // 羽化等级
	uint16  sublimate_lv; // 炼魂等级
	uint8   is_rein;   // 是否转生 0否 1是
	uint8	ele_awaken;	// 元素觉醒 bit
	uint8	is_fly; // 是否飞翼 0否 1是
};

struct GS2U_WingNewUpdate <-
{
	vector<WingNew>	wings;	// 
};

// 升星  对一个不存在的翅膀升星表示激活
struct U2GS_WingNewAddStar ->
{
	uint32	wing_id;			
	bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_WingNewAddStarRet <-
{
	uint32	wing_id;			
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 升级
struct U2GS_WingNewAddLevel ->
{
	uint32	wing_id;			// 神翼ID、道具ID
	vector<CostList>  costs;
};
struct GS2U_WingNewAddLevelRet <-
{
	uint32	wing_id;			// 神翼ID、道具ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 自动升级
struct U2GS_WingAutoAddLevel ->
{
	uint32	wing_id;			// 神翼ID
};
struct GS2U_WingAutoAddLevelRet <-
{
	uint32	wing_id;			// 神翼ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 突破
struct U2GS_WingNewAddBreak ->
{
  uint32         wing_id;
};
struct GS2U_WingNewAddBreakRet <-
{
  uint32         wing_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 羽化
struct U2GS_WingNewAddFeather ->
{
  uint32 wing_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_WingNewAddFeatherRet <-
{
  uint32  wing_id;          //  
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 炼魂
struct U2GS_WingNewAddsublimate ->
{
  uint32         wing_id;
};
struct GS2U_WingNewAddsublimateRet <-
{
  uint32         wing_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 飞翼升级
struct U2GS_FWingNewAddLevel ->
{
  uint16  add_level;                  	// 一次升多少级
};
struct GS2U_FWingNewAddLevelRet <-
{
	uint32	err_code;			// 0-成功，非0-错误原因
	uint16  add_level;                  	// 一次升多少级
};
// 转生
struct U2GS_WingReincarnation ->
{
  uint32         wing_id;
};
struct GS2U_WingReincarnationRet <-
{
  uint32         wing_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 元素觉醒
struct U2GS_WingNewEleAwaken ->
{
  uint32         wing_id;	// 翅膀id
  uint32         type;		// 觉醒类型
};
struct GS2U_WingNewEleAwakenRet <-
{
  uint32         wing_id;	// 翅膀id
  uint32         type;		// 觉醒类型
  uint32         err_code;	// 0-成功，非0-错误原因
};

// 开放飞翼
struct U2GS_WingOpenFly ->
{
	uint32	wing_id;	// 翅膀id
};
struct GS2U_WingOpenFlyRet <-
{
	uint32	wing_id;	// 翅膀id
	uint32	err_code;
};

// -------------翼灵 <----------------------
// 翼灵装备位置信息
struct YilingEqPos
{
  uint8     pos;				
  uint64    uid;   
  uint32    lv;        // 强化等级
  uint16    break_lv;        // 突破等级
};
struct YilingSkill
{
  uint8     pos;				
  uint32    wing_id;   
  uint32    skill_idx;   // 配置表list里面的第几号技能
  uint8 		is_lock; // 锁定状态 0 未锁定 1 锁定中
};
// 翼灵信息
struct Yiling
{
  uint64		 role_id;			//角色ID
  uint16         lv;				// 等级
  uint32         exp;				// 经验
  uint16         break_lv;          // 突破等级
  uint32         skill_t_mask;		// 打造技能槽位状态
  vector<uint32> award_list;        // 已领取的等级奖励
};
// 刷新翼灵  或者上线推送
struct GS2U_YilingUpdate <-
{
  Yiling           yl;    // 翼灵
};
// 刷新翼灵上装配的技能
struct GS2U_YilingSkillUpdate <-
{
  uint64  				role_id;
  vector<YilingSkill>	skills;    
};

// 刷新翼灵上打造的技能
struct GS2U_YilingTSkillUpdate <-
{
	uint64					role_id;
  vector<YilingSkill>		skills;    
};
// 刷新翼灵上装配的装备
struct GS2U_YilingEqUpdate <-
{
  uint64					role_id;
  vector<YilingEqPos> 		eqs;    
};

// 翼灵升级
struct U2GS_YilingAddLv ->
{
  uint64			role_id; // 角色ID
  vector<CostList>  costs;
};
struct GS2U_YilingAddLvRet <-
{
  uint64 			role_id; 	// 角色ID
  vector<CostList>  costs;
  uint32         	err_code;   // 0-成功，非0-错误原因
};

// 翼灵自动升级
struct U2GS_YilingAutoAddLv ->
{
  uint64			role_id; // 角色ID
};
struct GS2U_YilingAutoAddLvRet <-
{
  uint64 			role_id; 	// 角色ID
  uint32  add_exp; // 增加经验值
  uint32         	err_code;   // 0-成功，非0-错误原因
};

// 请求开启技能格子
struct U2GS_YilingSkillBoxOpenReq ->
{
	uint64 			role_id; 	// 角色ID
	uint8		pos;	// 技能格
};

// 请求开启技能格子返回
struct GS2U_YilingSkillBoxOpenRet <-
{
	uint64 			role_id; 	// 角色ID
	uint32		err_code;	// 错误码
	uint8		pos;	// 技能格
};

// 翼灵技能穿戴/卸载
struct U2GS_YilingSkillOp ->
{
	uint64 	role_id; 	// 角色ID
  uint8   type; // 0-on  1-off
  uint8   pos; 
  uint32  skill_idx;  // 技能位置ID   如果是卸载 可以不使用这个字段
  uint32  wing_id;    // 来自的翅膀
};
struct GS2U_YilingSkillOpRet <-
{
  uint64		 role_id;		// 角色ID
  uint32         err_code;		// 0-成功，非0-错误原因
  uint8          type;			// 0-on  1-off
};

// 翼灵装备穿戴/卸载
struct U2GS_YilingEqOp ->
{
	uint64		 role_id;		// 角色ID
  uint8   type; // 0-on  1-off
  uint64  uid;
};
struct GS2U_YilingEqOpRet <-
{
  uint64  		role_id;   // 角色ID
  uint32        err_code;   // 0-成功，非0-错误原因
  uint8   		type; // 0-on  1-off
  uint64  		uid;
};
// 翼灵装备一键穿戴/卸载
struct U2GS_YilingEqOneKeyOp ->
{
	uint64  		role_id;   // 角色ID
  uint8   type; // 0-on  1-off
};
struct GS2U_YilingEqOneKeyOpRet <-
{
	uint64  		role_id;   // 角色ID
  uint32         err_code;   // 0-成功，非0-错误原因
  uint8   type; // 0-on  1-off
};

// 翼灵装备升级
struct U2GS_YilingEqAddLv ->
{
  uint64  		 role_id;   // 角色ID
  uint8 pos; //部位
  uint64 eq_uid;
};
struct GS2U_YilingEqAddLvRet <-
{
  uint64  		 role_id;   // 角色ID
  uint32         err_code;   // 0-成功，非0-错误原因
  uint8   is_success;   // 0- no 1 -yes
};

// 锁定技能格子
struct U2GS_YilingLockIndexReq ->
{
  uint64  role_id; // 角色ID	
  uint8 	index; // 格子索引
  uint8 target_lock; // 目标锁定状态 0 未锁定 1 锁定中
};
struct GS2U_YilingLockIndexRet <-
{
  uint64  role_id; // 角色ID	
  uint8 	index; // 格子索引
  uint8 target_lock; // 目标锁定状态 0 未锁定 1 锁定中
  uint32      err_code;   // 0-成功，非0-错误原因
};

// 翼灵 打造技能 卸下
struct U2GS_YilingSkill_T_off ->
{
  uint64    role_id; 	// 角色ID
  uint8     pos;	// 部位
};
struct GS2U_YilingSkill_T_off_Ret <-
{
	uint64    role_id; 	// 角色ID
  uint8     pos;	// 部位
  uint32 err_code;   // 0-成功，非0-错误原因
};

// ------->羁绊<---------
// 翅膀羁绊信息
struct WingNewFetter
{
  uint16     f_id;					  // 羁绊ID (羁绊配置表ID)
  uint16    f_lv;   
};
// 刷新羁绊信息
struct GS2U_WingNewFetterUpdate <-
{
 vector<WingNewFetter> wfs;   
};
// 激活
struct U2GS_WingNewFetterActive ->
{
  uint16     f_id;	// 羁绊ID (羁绊配置表ID)
  uint16     f_lv;   // 激活到的等级
};
struct GS2U_WingNewFetterActiveRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 出战/不出战
struct U2GS_WingNewEquipOP ->
{
  uint64    role_id;   // 角色id
  uint8     type;	// 0 - 出战  1- (目前不能取消出战 预留)
  uint32    wing_id;   // 
};

// 翼灵触发技能格子开启
struct U2GS_YilingSkill_T_Slot_Open ->
{
  uint64		 role_id;    // 角色ID
  uint8     index;	// 索引
};
struct GS2U_YilingSkill_T_Slot_OpenRet <-
{
  uint64		 role_id;    // 角色ID
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 翼灵触发技能打造
struct U2GS_YilingSkill_T_Make ->
{
  uint64	role_id;    // 角色ID
  vector<uint8>     lock_index;	// 索引
};
struct GS2U_YilingSkill_T_MakeRet <-
{
  uint64	role_id;    // 角色ID
  uint32	err_code;   // 0-成功，非0-错误原因
  uint8  	fail_times;    
  uint8  	success_times;
};

// 翼灵突破
struct U2GS_YilingBreak ->
{
  uint64	role_id;    // 角色ID
};
struct GS2U_YilingBreakRet <-
{
  uint64	role_id;    // 角色ID
  uint32	err_code;   // 0-成功，非0-错误原因
};

// 翼灵等级奖励
struct U2GS_YilingLvAward ->
{
  uint64	role_id;    // 角色ID
  uint32    lv;         // 领取的等级
};
struct GS2U_YilingLvAwardRet <-
{
  uint64	role_id;    // 角色ID
  uint32    lv;         // 领取的等级
  uint32	err_code;   // 0-成功，非0-错误原因
};
// --------------------------------翅膀 end-----------------------------

// --------------------------------坐骑-----------------------------
// 坐骑数据
struct MountNew
{
	uint32	mount_id;		// 坐骑ID 配置表Id
	uint16	mount_lv;			// 等级
	uint16	mount_exp;			// 经验
	uint16  break_lv;				  // 突破等级  和坐骑等级相关
	uint16	star;			// 星数
	uint16  awaken_lv; // 觉醒等级
	uint16  sublimate_lv; // 炼魂等级
	uint8   is_rein;   // 是否转生 0否 1是
	uint8	ele_awaken;	// 元素觉醒 bit
};

struct GS2U_MountNewUpdate <-
{
	vector<MountNew>	mounts;	// 
};

// 升星  对一个不存在的坐骑升星表示激活
struct U2GS_MountNewAddStar ->
{
	uint32	mount_id;			
	bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_MountNewAddStarRet <-
{
	uint32	mount_id;			
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 升级
struct U2GS_MountNewAddLevel ->
{
	uint32	mount_id;			// 神翼ID、道具ID
	vector<CostList>  costs;
};
struct GS2U_MountNewAddLevelRet <-
{
	uint32	mount_id;			// 神翼ID、道具ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 自动升级
struct U2GS_MountAutoAddLevel ->
{
	uint32	mount_id;			// 坐骑ID
};
struct GS2U_MountAutoAddLevelRet <-
{
	uint32	mount_id;			// 坐骑ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 突破
struct U2GS_MountNewAddBreak ->
{
  uint32         mount_id;
};
struct GS2U_MountNewAddBreakRet <-
{
  uint32         mount_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 觉醒
struct U2GS_MountNewAddAwaken ->
{
  uint32 mount_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_MountNewAddAwakenRet <-
{
  uint32  mount_id;          //  
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 炼魂
struct U2GS_MountNewAddsublimate ->
{
  uint32         mount_id;
};
struct GS2U_MountNewAddsublimateRet <-
{
  uint32         mount_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};
// 转生
struct U2GS_MountReincarnation ->
{
  uint32         mount_id;
};
struct GS2U_MountReincarnationRet <-
{
  uint32         mount_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 元素觉醒
struct U2GS_MountNewEleAwaken ->
{
  uint32         mount_id;	// 坐骑id
  uint32         type;		// 觉醒类型
};
struct GS2U_MountNewEleAwakenRet <-
{
  uint32         mount_id;	// 坐骑id
  uint32         type;		// 觉醒类型
  uint32         err_code;	// 0-成功，非0-错误原因
};

// -------------兽灵 <----------------------
// 兽灵装备位置信息
struct ShoulingEqPos
{
  uint8     pos;				
  uint64    uid;   
  uint32    lv;        // 强化等级
  uint16    break_lv;        // 突破等级
};
struct ShoulingSkill
{
  uint8     pos;				
  uint32    mount_id;   
  uint32    skill_idx;
  uint8 		is_lock; // 锁定状态 0 未锁定 1 锁定中   
};
// 兽灵信息
struct Shouling
{
  uint64  		 role_id; // 角色ID
  uint16         lv;					  // 等级
  uint32         exp;						// 经验
  uint16         break_lv;          // 突破等级
  uint32         skill_t_mask;	// 打造技能槽位状态
  uint16         pill1;					  // 嗑丹
  uint16         pill2;					  // 
  uint16         pill3;					  // 
  vector<uint32> award_list;        // 已领取的等级奖励
};
// 刷新兽灵  或者上线推送
struct GS2U_ShoulingUpdate <-
{
  Shouling  sl;    // 兽灵
};
// 刷新兽灵上装配的技能
struct GS2U_ShoulingSkillUpdate <-
{
  uint64  role_id; // 角色ID
  vector<ShoulingSkill>      skills;    
};

// 刷新兽灵上打造的技能
struct GS2U_ShoulingTSkillUpdate <-
{
  uint64  role_id; // 角色ID
  vector<ShoulingSkill>      skills;    
};
// 刷新兽灵上装配的装备
struct GS2U_ShoulingEqUpdate <-
{
  uint64  role_id; // 角色ID
  vector<ShoulingEqPos> eqs;    
};

// 兽灵升级
struct U2GS_ShoulingAddLv ->
{
  uint64  role_id; // 角色ID
  vector<CostList>  costs;
};
struct GS2U_ShoulingAddLvRet <-
{
  uint64  role_id; // 角色ID
  uint32  err_code;   // 0-成功，非0-错误原因
};

// 兽灵自动升级
struct U2GS_ShoulingAutoAddLv ->
{
  uint64  role_id; // 角色ID
};
struct GS2U_ShoulingAutoAddLvRet <-
{
  uint64  role_id; // 角色ID
  uint32  add_exp; // 增加经验值
  uint32  err_code;   // 0-成功，非0-错误原因
};

// 请求开启技能格子
struct U2GS_ShoulingSkillBoxOpenReq ->
{
	uint64  role_id; // 角色ID
	uint8		pos;	// 技能格
};

// 请求开启技能格子返回
struct GS2U_ShoulingSkillBoxOpenRet <-
{
	uint32		err_code;	// 错误码
	uint64  role_id; // 角色ID
	uint8		pos;	// 技能格
};

// 兽灵技能穿戴/卸载
struct U2GS_ShoulingSkillOp ->
{
  uint64  role_id; // 角色ID  
  uint8   type; // 0-on  1-off
  uint8   pos; 
  uint32  skill_idx;  // 技能索引   如果是卸载 可以不使用这个字段
  uint32  mount_id;    // 来自的翅膀
};
struct GS2U_ShoulingSkillOpRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
  uint64  		role_id; // 角色ID  
  uint8          type; // 0-on  1-off
};

// 兽灵装备穿戴/卸载
struct U2GS_ShoulingEqOp ->
{
  uint64  role_id; // 角色ID
  uint8   type; // 0-on  1-off
  uint64  uid;
};
struct GS2U_ShoulingEqOpRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
  uint64  role_id; // 角色ID
  uint8   type; // 0-on  1-off
  uint64  uid;
};
// 兽灵装备一键穿戴/卸载
struct U2GS_ShoulingEqOneKeyOp ->
{
  uint64  role_id; // 角色ID
  uint8   type; // 0-on  1-off
};
struct GS2U_ShoulingEqOneKeyOpRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
  uint64  role_id; // 角色ID
  uint8   type; // 0-on  1-off
};

// 兽灵装备升级
struct U2GS_ShoulingEqAddLv ->
{
  uint64  role_id; // 角色ID
  uint8 pos; //部位
  uint64 eq_uid;
};
struct GS2U_ShoulingEqAddLvRet <-
{
  uint64  role_id; // 角色ID
  uint32  err_code;   // 0-成功，非0-错误原因
  uint8   is_success;   // 0- no 1 -yes
};
// 兽灵装备突破
struct U2GS_ShoulingEqBreak ->
{
  uint64  role_id; // 角色ID	
  uint8 pos; //部位
  uint64 eq_uid;
};
struct GS2U_ShoulingEqBreakRet <-
{
  uint64  role_id; // 角色ID	
  uint32         err_code;   // 0-成功，非0-错误原因
};

//装备升星
struct U2GS_ShoulingEqStar ->
{
	uint64  uid;	//装备uid
};

//装备升星
struct GS2U_ShoulingEqStar <-
{
	uint32  cfgid;	//升星后新的装备cfgId
	uint32  error;	//错误码
};

//坐骑装备 分解
struct U2GS_ShoulingEqBreakDown ->
{
	vector<uint64>	eq_uid_list;	// 坐骑装备实例ID列表
};
//分解结果
struct GS2U_ShoulingEqBreakDownRet <-
{
	vector<itemInfo>  itemlist;		//道具列表
	uint32      err_code;			//错误码
};

// 锁定技能格子
struct U2GS_ShoulingLockIndexReq ->
{
  uint64  role_id; // 角色ID	
  uint8 	index; // 格子索引
  uint8 target_lock; // 目标锁定状态 0 未锁定 1 锁定中
};
struct GS2U_ShoulingLockIndexRet <-
{
  uint64  role_id; // 角色ID	
  uint8 	index; // 格子索引
  uint8 target_lock; // 目标锁定状态 0 未锁定 1 锁定中
  uint32      err_code;   // 0-成功，非0-错误原因
};

// ------->羁绊<---------
// 坐骑羁绊信息
struct MountNewFetter
{
  uint16     f_id;					  // 羁绊ID (羁绊配置表ID)
  uint16    f_lv;   
};
// 刷新羁绊信息
struct GS2U_MountNewFetterUpdate <-
{
 vector<MountNewFetter> wfs;   
};
// 激活
struct U2GS_MountNewFetterActive ->
{
  uint16     f_id;	// 羁绊ID (羁绊配置表ID)
  uint16     f_lv;   // 激活到的等级
};
struct GS2U_MountNewFetterActiveRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 出战/不出战
struct U2GS_MountNewEquipOP ->
{
  uint64  role_id; // 角色ID
  uint8     type;	// 0 - 出战  1- (目前不能取消出战 预留)
  uint32    mount_id;   // 
};

// 嗑丹
struct U2GS_ShoulingEatPill ->
{
  uint64    role_id; // 角色ID
  uint8     index;	// 丹药索引
  uint16    num;   // 
};
struct GS2U_ShoulingEatPillRet <-
{
  uint64    role_id; 	// 角色ID
  uint32    err_code;   // 0-成功，非0-错误原因
};

// 兽灵触发技能格子开启
struct U2GS_ShoulingSkill_T_Slot_Open ->
{
  uint64    role_id; 	// 角色ID
  uint8     index;	// 索引
};
struct GS2U_ShoulingSkill_T_Slot_OpenRet <-
{
  uint64    role_id; 	// 角色ID
  uint32    err_code;   // 0-成功，非0-错误原因
};

// 兽灵触发技能打造
struct U2GS_ShoulingSkill_T_Make ->
{
  uint64    role_id; 	// 角色ID
  vector<uint8>     lock_index;	// 索引
};
struct GS2U_ShoulingSkill_T_MakeRet <-
{
  uint32 err_code;   // 0-成功，非0-错误原因
  uint64 role_id; 	// 角色ID
  uint8  fail_times;    
  uint8  success_times;
};

// 兽灵 打造技能 卸下
struct U2GS_ShoulingSkill_T_off ->
{
  uint64    role_id; 	// 角色ID
  uint8     pos;	// 部位
};
struct GS2U_ShoulingSkill_T_off_Ret <-
{
	uint64    role_id; 	// 角色ID
  uint8     pos;	// 部位
  uint32 err_code;   // 0-成功，非0-错误原因
};

// 兽灵突破
struct U2GS_ShoulingBreak ->
{
  uint64	role_id;    // 角色ID
};
struct GS2U_ShoulingBreakRet <-
{
  uint64	role_id;    // 角色ID
  uint32	err_code;   // 0-成功，非0-错误原因
};

// 兽灵等级奖励
struct U2GS_ShoulingLvAward ->
{
  uint64	role_id;    // 角色ID
  uint32    lv;         // 领取的等级
};
struct GS2U_ShoulingLvAwardRet <-
{
  uint64	role_id;    // 角色ID
  uint32    lv;         // 领取的等级
  uint32	err_code;   // 0-成功，非0-错误原因
};
// --------------------------------坐骑 end-----------------------------
// 领取竞技场奖励
struct U2GS_getArenaAward ->
{
	
};
struct GS2U_getArenaAwardResult <-
{
	uint32		result;		// 0-成功，非0-错误原因
};
// 购买竞技场次数
struct U2GS_buyArenaFightCount ->
{
	uint16		count;		// 购买次数
};
struct GS2U_buyArenaFightCount <-
{
	uint16		count;		// 购买次数
	uint32		result;		// 0-成功，非0-错误原因
};
// -----------------------------守护--------------------------------
// 请求守护数据
struct U2GS_getGuardList ->
{
	
};
struct guardInfo
{
	uint64 		role_id; 	// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		time;		// 到期时间
	uint32		awaken;		// 觉醒等级
};
struct role_guard
{
	uint64 				role_id; 		// 角色ID
	vector<guardInfo>	guard_list;		// 激活的守护列表
	vector<uint32>		get_guard_list;	// 获得过的守护ID
};
struct GS2U_sendRoleGuardList <-
{
	vector<role_guard>	role_guard_list;
};
// 激活守护
struct U2GS_activeGuard ->
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		item_id;	// 激活道具ID
};
struct GS2U_activeGuardResult <- 
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		item_id;	// 激活道具ID
	uint32		err_code;	// 错误码	
};
// 升阶
struct U2GS_levelUpGuard ->
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
};
struct GS2U_levelUpGuardResult <-
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		err_code;	// 错误码	
};

// 补充时间
struct U2GS_AddGuardTime ->
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
};
struct GS2U_AddGuardTimeRet ->
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		err_code;	// 错误码
};

// 续期
struct U2GS_renewGuard ->
{
	uint64		role_id;	// 角色ID
	uint32		guard_id;	// 守护ID
	uint8		cost_group_id;	// 消耗组ID
};
struct GS2U_renewGuard <-
{
	uint64		role_id;		// 角色ID
	uint32		guard_id;		// 守护ID
	uint8		cost_group_id;	// 消耗组ID
	uint32		err_code;		// 错误码	
};
// 装备
struct U2GS_equipGuard ->
{
	uint64		role_id;		// 角色ID
	uint32		guard_id;		// 守护ID
};
struct GS2U_equipGuardResult <-
{
	uint64		role_id;		// 角色ID
	uint32		guard_id;		// 守护ID
	uint32		err_code;		// 错误码		
};
// 觉醒
struct U2GS_awaken_guard ->
{
	uint64		role_id;		// 角色ID
	uint32		guard_id;	// 守护ID
};
struct GS2U_awaken_guard_ret <-
{
	uint64		role_id;		// 角色ID
	uint32		guard_id;	// 守护ID
	uint32		err_code;	//错误码
};
struct guard_fetter
{
	uint64		role_id;    // 角色ID
	uint8		type;		// 羁绊类型
	uint8		lv;			// 羁绊等级
}
// 发送守护羁绊
struct GS2U_sendGuardFetter <-
{
	vector<guard_fetter>	guard_fetter_list; //守护羁绊列表
};
// 激活守护羁绊
struct U2GS_active_guard_fetter ->
{
	uint64		role_id;    // 角色ID
	uint8		type;		// 羁绊类型
	uint8		lv;			// 羁绊等级
};
struct GS2U_active_guard_fetter_ret <-
{
	uint64		role_id;    // 角色ID
	uint8		type;		// 羁绊类型
	uint8		lv;			// 羁绊等级
	uint32		err_code;	//错误码
};
// -----------------------------守护 end----------------------------

//---------------------------------龙神系统start-------------------------------------------
// 升阶消耗材料增加的属性
struct PillAttr
{
	pb_uint32	key;    
	pb_uint64	value;  
};

// 龙神信息(主战 / 掠阵)
struct DragonInfo
{
	uint32	id;     // id
	pb_uint32	level;  // 等级
	pb_uint32	exp;  // 经验
	pb_uint32	star;   // 星
	pb_uint32  active_mask;  // 激活状态
	vector<PillAttr> addition_attr; // 附加属性
	uint32  relate_id;  // 关联龙神ID， 主战龙神  <>  掠阵龙神(掠阵技能)。如果是主战龙神，此字段表示提供掠阵技的掠阵龙神；如果是掠阵龙神，此字段表示他的掠阵技提供给了谁；
	uint8   is_rein;    // 是否转生 0否 1是
	pb_uint32  break_lv;  // 突破等级
};

// 龙神装备/龙神秘典信息
struct DragonEqInfo
{
	uint32	id;     // id
	pb_uint32  awaken_lv;  // 觉醒等级
};
// 刷新天神  上线同步  修改同步
struct GS2U_DragonUpdate<-
{
  vector<DragonInfo>  ds;
};

// 刷新龙神装备/龙神秘典  上线同步  修改同步
struct GS2U_DragonEqUpdate<-
{
  vector<DragonEqInfo>  des;
};

// 龙神激活过程之激活神器
struct U2GS_DragonActiveArti->
{
	uint32	d_id; // 龙神Id
	uint8   index; //
};
// 龙神激活过程之激活神器 返回
struct GS2U_DragonActiveArtiRet<-
{
	uint32	err_code;	
	uint32  d_id;  // 龙神Id
	uint8 	index; // 
};

// 唤醒龙神
struct U2GS_DragonAwake->
{
	uint32	id;
};
// 唤醒龙神返回  
struct GS2U_DragonAwakeRet<-
{
	uint32	err_code;	
	uint32  d_id; // 龙神ID
	uint32  init_star; // 初始星
};

//升级龙神  
struct U2GS_DragonAddLevel->
{
	uint32	id;
	vector<CostList>  costs;
};
// 升级龙神  刷新一次
struct GS2U_DragonAddLevelRet<-
{
	uint32	err_code;	
	bool    is_stage_up;  // 是否升阶
};

// 升星
struct U2GS_DragonAddStar->
{
	uint32	id;
};
// 升星返回  刷新一次
struct GS2U_DragonAddStarRet<-
{
	uint32	err_code;	
};
// 转生
struct U2GS_DragonReincarnation ->
{
  uint32         id;
};
struct GS2U_DragonReincarnationRet <-
{
  uint32         id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 出战
struct U2GS_DragonSetBattle->
{
	uint64  role_id;   // 角色id
	uint32	id; //出战天神id  0 表示卸下
};
// 出战返回
struct GS2U_DragonSetBattleRet<-
{
	uint64  role_id;   // 角色id
	uint32	id;
	uint32	err_code;	
};


// 掠阵技能装配/卸载
struct U2GS_DragonSkillOp->
{
  uint8   op;  // 0 -on 1-off
	uint32	id1; // 主战龙神
	uint32	id2; // 掠阵龙神
};
// 掠阵技能装配/卸载 返回
struct GS2U_DragonSkillOpRet<-
{
	uint32	err_code;	
	uint8   op;  // 0 -on 1-off
	uint32	id1; // 主战龙神
	uint32	id2; // 掠阵龙神
};

// 装备/秘典  觉醒
struct U2GS_DragonEqAwaken->
{
	uint32	id; 
};
// 觉醒返回 刷新一次
struct GS2U_DragonEqAwakenRet<-
{
  uint32	id; 
	uint32	err_code;	
};

// 秘典分解
struct U2GS_DragonEqSplit->
{
	vector<CostList>   costs; 
};
// 秘典分解返回
struct GS2U_DragonEqSplitRet<-
{
	uint32	err_code;	
	vector<AddItem>   adds; 
};

// 突破
struct U2GS_DragonBreak ->
{
	uint32	id;
};
// 突破返回
struct GS2U_DragonBreakRet <-
{
	uint32	id;
	uint32	err_code;	
};

//---------------------------------龙神系统end---------------------------------------------

//---------------------------------新版技能使用start-------------------------------------------

//客户端使用技能同步，仅同步
struct U2GS_UseSkill ->
{
	uint64	attackerid;
    uint64  attacker_role_id;                        // 角色Id，非玩家对象：attacker_role_id=attackerid
	uint32	skillid;//配置技能id
  float	pos_x;
	float	pos_y;
	vector<role_skill_hit> targetList;//被攻击方列表
	
	uint32 timestamp;    // 当前时间戳 秒
};

//客户端触发被动技能
struct U2GS_UseSkillPassive ->
{
	uint64	attackerid;
    uint64  attacker_role_id;                        // 角色Id，非玩家对象：attacker_role_id=attackerid
	uint32	skillid;//配置技能id
    float	pos_x;
	float	pos_y;
	vector<role_skill_hit> targetList;//被攻击方列表
};

//使用技能同步
struct GS2U_UseSkill <-
{
	uint64	attackerid;
    uint64  attacker_role_id;
	uint32	skillid;//配置技能id
	uint8   type;  // 0-?? 1-客户端触发  2-服务器buff触发
  float	pos_x;
	float	pos_y;
	vector<role_skill_hit> targetList;//被攻击方列表
};

//使用技能被否定或者中断
struct GS2U_UseSkillFail <-
{
  uint32  err_code; 
	uint64	attackerid;
    uint64  attacker_role_id;
	uint32	skillid;//配置技能id
};


//注意：skillid 为配置技能id * 100 + 段数
//段数 0-99
//对目标造成伤害
struct U2GS_SkillHit ->
{
	uint64	skillid;//
	uint64	attackerid;//攻击方id
    uint64  attacker_role_id;                        // 角色Id，非玩家对象：attacker_role_id=attackerid
    vector<role_skill_hit> targetList;//被攻击方列表
};
// 

struct Object_Damage
{
	uint64	objectId;
    uint64  role_id;                        // 角色Id，非玩家对象：role_id=objectId
	uint64  objectHp;
	uint8	type;
	uint32	value;
};

struct GS2U_SKillHitRet <-
{	
	uint32	skillid;//配置技能id
	uint64	attackerid;//攻击方id
    uint64  attacker_role_id;
	vector<Object_Damage>  damageList;//攻击结果,实际扣血
};

// buff执行效果
struct GS2U_BuffResult <-
{
	uint64		  objectID;		//对象ID
    uint64  role_id;
	uint64		srcObjectID;		//来源对象ID
    uint64  	srcRoleId;    
	uint		        buffID;			//buff配置ID
	Object_Damage  damage;		//受击者伤害
};



//技能位移同步
struct U2GS_UseSkillShift ->
{
	uint8	type;//1击退，2吸引
	uint64	attackerid;
	uint64	targetid;
    float	pos_x;
	float	pos_y;
};

//技能位移同步
struct GS2U_UseSkillShiftNotify <-
{
	uint8	type;//1击退，2吸引
	uint64	attackerid;
	uint64	targetid;
    float	pos_x;
	float	pos_y;
};

// 服务器同步地图副本状态
struct GS2U_dungeons_map_state <-
{
	uint8   state;			// 地图副本状态：0-未开始、1-准备中、2-进行中、3-等待结算、4-已结算
	uint32  start_time;		// 开始时间
};

// 服务器同步副本鼓舞信息（进副本推送一次，以后前端自己维护）
struct dungeons_inspire
{
	uint64  objectId;	// 目标对象Id，自己或镜像
	vector<uint8>  buy_times;	// 已购买次数数组
};
struct GS2U_dungeons_inspire <-
{
	vector<dungeons_inspire>  list;	// 各个对象的鼓舞信息
};

// 副本鼓舞购买
struct U2GS_dungeons_inspire_buy ->
{
	uint64  objectId;	// 目标对象Id，自己或镜像
	uint8   index;		// 鼓舞类型：1-金币、2-元宝
	uint8   merged_times;	// 前端预判的合并次数，后端验证
};
struct GS2U_dungeons_inspire_buy <-
{
	uint64  objectId;	// 目标对象Id，自己或镜像
	uint8   index;		// 鼓舞类型：1-金币、2-元宝
	uint16  error;		// 0-成功，非0-错误原因
};

// 副本鼓舞购买（一键鼓舞）
struct U2GS_dungeons_inspire_buy_all ->
{
	uint8   index;		// 鼓舞类型：1-金币、2-元宝
	uint8   merged_times;	// 前端预判的合并次数，后端验证
};
struct GS2U_dungeons_inspire_buy_all <-
{
	uint8   index;		// 鼓舞类型：1-金币、2-元宝
	uint16  error;		// 0-成功，非0-错误原因
};

// 副本刷怪波数提示
struct GS2U_dungeons_round <-
{
	uint8  round_index;		// 当前波数
};

// 副本下一波怪刷新信息
struct GS2U_dungeons_round_next <-
{
	uint8	round_index;	// 波数
	uint8	type;		// 1-延迟时间，2-副本时间
	uint32	time;		// 时间
};

// -------------------------------- 服务器副本 END ---------------------------------------------------

struct GS2U_syncPantheonMapInfo <-
{
	uint16		monsterNum;	    // 怪物数量
	uint16		collectionNum;	// 采集物数量
	uint32		collectionTime;	// 上一波采集物刷新时间
};


struct GS2U_guardExpirePush <-
{
	uint64  	role_id; 	// 角色ID
	uint32		guard_id;	//  守护ID
	uint32		time;		// 到期时间
};





//---------------------------------新版地图同步start-------------------------------------------
struct GS2U_PlayerVipChange <-
{
	uint64   playerid;			//
	uint8    vip;		//
};
//---------------------------------新版地图同步start-------------------------------------------

struct item_sp
{
	uint64	id;		// uid
	uint32	cfg_id;	// 配置id
	uint8	bind;	// 绑定
};

// 恭喜获得弹窗
struct GS2U_GetSthDialog <-
{
	uint8	type;	// 0弹窗 1飘字 2带特效的飘字 3延迟弹出
	vector<Dialog_Item>  items;
	vector<Dialog_Coin>  coins;
	vector<EqInfo>    eqs;
	vector<item_sp>   sps;
	uint64            exp;
	uint8 source_from;   // 来源
};

// 极品掉落单独提示
struct GS2U_BestDropDialog <-
{
	vector<itemInfo>  items;
	vector<EqInfo>    eqs;
	uint8 source_from;   // 来源
};

// --------------------------------卡片-----------------------------
// 卡片信息
struct Card
{
	uint32	id;		// 配置表Id
	uint16	star;			// 等级
	uint16	quality_lv;			// 品质等级
};

//  玩家上线同步卡片信息
struct GS2U_CardSync <-
{
	vector<Card>	cards;	// 
};

// 升星  对一个不存在的卡片升星表示激活
struct U2GS_CardAddStar ->
{
	uint32	card_id;			
};
struct GS2U_CardAddStarRet <-
{
  uint32	err_code;			// 0-成功，非0-错误原因
	uint32	card_id;	// 		
	uint16	star;			// 当前星数
};
//  激活返回
struct GS2U_CardAdd <-
{
	Card	card;	// 
};

// 升品
struct U2GS_CardAddQuality ->
{
	uint32	card_id;			
};
struct GS2U_CardAddQualityRet <-
{
  uint32	err_code;			// 0-成功，非0-错误原因
	uint32	card_id;	// 		
	uint16	quality_lv;			// 
};
// ------->羁绊<---------
// 羁绊信息
struct CardFetter
{
  uint16    f_id;					  // 羁绊ID (羁绊配置表ID)
  uint16    f_lv;   
};
// 上线同步已经激活的羁绊信息
struct GS2U_CardFetterUpdate <-
{
 vector<CardFetter> cfs;   
};
// 激活
struct U2GS_CardFetterActive ->
{
  uint16     f_id;	// 羁绊ID (羁绊配置表ID)
  uint16     f_lv;   // 激活到的等级
};
struct GS2U_CardFetterActiveRet <-
{
  uint32     err_code;   // 0-成功，非0-错误原因
  uint16     f_id;	// 羁绊ID (羁绊配置表ID)
  uint16     f_lv;   // 激活到的等级
};

// --------------------------------卡片 end-----------------------------
// 恶魔广场（组队经验本）
struct U2GS_DungeonTeamExpInfo ->
{
	
};
struct DungeonTeamExp
{
	uint32  dungeonID;			// 关卡ID
	uint32	enterTime;			// 上次进入时间（0为还没进入）
	uint8	star;				// 最高通关星数
}
struct GS2U_DungeonTeamExpInfo <-
{
	uint8  maxFightCount;		// 最大挑战次数
	uint8  fightCount;			// 已使用挑战次数
	uint8  buyFightCountDay;	// 今天已购买的次数
	vector<DungeonTeamExp> dungeon_list;
};

// 清楚进副本CD
struct U2GS_clearEnterMapTime ->
{
	uint32	dungeonID;		// 副本关卡ID
};
struct GS2U_clearEnterMapTimeResult <-
{
	uint32	dungeonID;		// 副本关卡ID
	uint32	result;		
};
// ------------------ 组队 -----------------
// 开始副本
struct U2GS_startEnterTeamMap ->
{
	
};
struct team_enter_reason 
{
	uint64		player_id;
	string		name;	// 玩家名
	uint32		reason;
};
struct GS2U_startEnterTeamMapResult <-
{
	uint32		result;
	vector<team_enter_reason> reason_list;
};
// 同步给队伍
struct GS2U_syncEnterTeamMap <- 
{
	
};
// 进地图反馈
struct U2GS_replyEnterTeamMap ->
{
	uint8		agree;	// 1 同意 0 拒绝
};
struct GS2U_replyEnterTeamMapResult <-
{
	uint8		agree;	// 1 同意 0 拒绝
	uint32		result;
};
// 广播给队伍
struct GS2U_syncReplyEnterTeamMap <-
{
	uint64		playerID;	// 玩家ID
	uint8		agree;		// 1 同意 0 拒绝
	uint8		mergeTimes;	// 合并次数
};
// ------------------ 组队 end--------------
// 合并副本挑战次数
struct U2GS_mergeFightCount ->
{
	uint32		dungeonID;
	uint8		mergeTimes;
};
struct GS2U_mergeFightCountResult <-
{
	uint32		dungeonID;
	uint8		mergeTimes;
	uint32		result;
};

// 升级战盟建筑
struct U2GS_uplevelGuildBuilding ->
{
	uint32		buildingID;	// 建筑ID
};
struct GS2U_uplevelGuildBuildingResult <-
{
	uint32		buildingID;	// 建筑ID
	uint32		result;
};

// 获取战盟科技数据
struct U2GS_getGuildScience ->
{
};
struct science
{
	uint32		id;		// ID 
	uint16		level;	// 等级
};
struct GS2U_sendGuildScience <-
{
	vector<science> science_list;
};
// 升级战盟科技
struct U2GS_uplevelGuildScience ->
{
	uint32		id;
	uint16      times; %% 次数
};
struct GS2U_uplevelGuildScience <-
{
	uint32		id;
	uint16      times; %% 次数
	uint32		result;
};


// ------------------------------VIP-------
// Vip 信息同步
struct GS2U_VipInfoSync <-
{
	uint16		lv;     // vip等级
	uint32		exp;    // vip经验  除以10取整
	uint32    expire_time;  // vip过期时间
	uint16    lv_tmp;    // 临时vip等级
	uint32    expire_time_tmp;   // 临时vip过期时间
};

// 某结构的某值
struct vip_update_data
{
	uint8      index;			// 第几个值（从1开始）
	uint32     value;			// 值的包装
};
// Vip更新
struct GS2U_VipInfoUpdate <-
{
    vector<vip_update_data>  datas;
};

//玩家请求公会仓库数据
struct U2GS_requestGuildBagData__1693 ->
{

};

// 同步公会仓库数据到客户端
struct  GS2U_SendGuildBagData__1694 <-
{
	vector<EqInfo> eq_list;
	vector<guild_event> event_list;
};

// 副本合并次数
struct U2GS_getDungeonMergeTimes ->
{
	uint32		dungeonID;		// 副本ID
};
struct GS2U_syncDungeonMergeTimes <-
{
	uint32		dungeonID;		// 副本ID
	uint16		mergeTimes;		// 合并次数
};

// 50级赠送VIP经验
struct GS2U_presentVip <-
{
	uint8	preVipLv;		// 赠送前的vip等级
};
// ----------VIP-------End

// ========赏金===
// 抽奖
struct U2GS_BountyLottery ->
{
};
struct GS2U_BountyLotteryRet <-
{
  uint32   err_code;
  uint16   lv_index;    // 等级索引
  vector<uint8>    hit_index; // 抽中的索引
};

// vip领取赏金任务补偿经验
struct U2GS_BountyExpVipGet ->
{
};
struct GS2U_BountyExpVipGetRet <-
{
  uint32   err_code;
  uint64   exp;
};

// 赏金任务奖励
struct BountyTaskAward 
{
  vector<Dialog_Item>  items;  // 普通道具
  vector<Dialog_Coin>  coins;  // 货币
  vector<EqInfo>    eqs; // 装备
  uint64        exp; // 经验
};

// 赏金任务快速完成
struct U2GS_BountyTaskFastFinish ->
{
  uint8    type;   // 0- 快速  1- 一键
  uint32   task_id; // 任务id
};
struct GS2U_BountyTaskFastFinishRet <-
{
  uint32   err_code;
  uint8    type;   // 0- 快速  1- 一键
  BountyTaskAward award;
};
// ========赏金 END===

// 请求仙盟红包数据
struct U2GS_getGuildEnvelopeInfo ->
{
	
};
struct guildEnvelope 
{
	uint64		en_id;	// 红包ID
	uint8		type;	// 红包类型(1每日首充红包 2每日累计充值红包 3玩家手动发红包 ...)
	uint32		money;	// 红包金额
	uint16		number;	// 红包个数
	uint64		player_id;	// 红包发送者ID
	string 		name;	// 红包发送者
	uint32		headIcon;	// 头像
	uint32		frame;	// 头像框
	uint32		career;	// 职业
	string		msg;	// 内容
	uint32		time;	// 到期时间
	uint8		is_get;	// 是否领取（1：已领取 0：未领取）
};
struct GS2U_sendGuildEnvelopeInfo <-
{
	vector<guildEnvelope> envelope_list;	// 红包列表
	vector<guild_event> event_list;		// 红包事件列表
};
// 请求指定红包的领取记录
struct U2GS_getGuildEnvelopeRecord ->
{
	uint64		en_id;	// 红包ID
};
struct guilEnvelopeRecord 
{
	string		name;	// 玩家名
	vector<rewardStc>	award;	// 获得物品
	uint8		is_max;	// 是否手气最佳（1：是 0：不是）
};
struct GS2U_sendGuildEnvelopeRecord <-
{
	vector<rewardStc> my_award; // 我获得的物品
	vector<guilEnvelopeRecord> record_list;
};
// 领取红包
struct U2GS_get_guild_envelope ->
{
	uint64		en_id;	// 红包ID
};
struct GS2U_get_guild_envelope_result <- 
{
	uint64		en_id;
	uint32		result;
};
// 发红包
struct U2GS_send_guild_envelope ->
{
	uint32		money;		// 金额
	uint16		number;		// 红包个数 
	string		msg;		// 内容
};
struct GS2U_send_guild_envelope_result <-
{
	uint32		result;
};

// ========炎魔试炼==
// 请求进入地图
struct U2GS_YanMoRequestEnterMap ->
{
};

//请求炎魔信息  客户端打开界面
struct U2GS_RequesYanMoInfo ->
{
};
struct GS2U_RequesYanMoInfoRet<-
{
	int32  boss_level; 	//boss等级
	int8   server_type; 		//0 - 本服  1- 连服
	uint8  server_num;		//服务器联服数 0 单服  1以上为对应联服数量 1 2  4  8
	uint32  start_time;   // 活动开启时间
	uint32  end_time;     // 活动结束时间
	uint32 last_exit_time; 			// 最后一次退出时间  用于卡30s限制
	uint32 worldLevel; //世界等级
};

// 炎魔试炼 请求排行榜数据
struct U2GS_RequestYanMoRank ->
{
    uint8  type; // 1-伤害  2-幸运  3-最后一击 4- 结算
};
// 伤害排行信息
struct YanMoHurtInfo
{
	uint16				rank;//排名
	uint64				player_id;
	uint16				  career;//职业
	uint16				head_id;//头像id
	uint16				head_frame;//头像框
	string				player_name;  //
	string				guild_name;
	uint64				battle_value;//战斗力
	uint64				damage;
	string              serverName;
    uint32              nationality_id;        // 区域id
};

// 伤害排行更新专用
struct YanMoHurtUpdate
{
	uint16				rank;//排名
	string				player_name;
	uint64				damage;
	string              serverName;
	uint32              nationality_id;        // 区域id
};

struct YanMoGuildHurtInfo
{
	uint16				rank;
	uint64				guild_id;
	string				server_name;
	string				guild_name;
	uint64				battle_value;
	uint64				damage;
};
struct GS2U_YanMoHurtRankSync <-
{
	uint16				my_rank;//自己的排名，0表示没有上榜
	uint16				my_guild_rank;	//自己的战盟排行
	uint64				my_damage;
	uint64				my_guild_damage;
	uint8        type;  // 0- 客户端主动请求  1- 服务器每5秒推送  2 -结算的那个
	vector<YanMoHurtUpdate> rank_list_up;//排行榜, 更新的时候用,前端请求的时候发空
	vector<YanMoHurtInfo> rank_list;//排行榜,前端请求的时候用，更新的时候发空
	vector<YanMoGuildHurtInfo> guild_rank_list;// 战盟排行
};
// 幸运奖信息
struct YanMoLuckInfo
{
  uint32				time;
	uint64				player_id;
	string				player_name;  //
	string              serverName;
};
struct GS2U_YanMoLuckRankSync <-
{
	vector<YanMoLuckInfo> lucks;//排行榜
};
// 最后一击信息
struct YanMoKillInfoReward
{
	uint32				item_id;
	uint32				num;
};
// 最后一击信息
struct YanMoKillInfo
{
	uint32				time;
	uint64				player_id;
	string				player_name;  //
	string              serverName;
  	vector<YanMoKillInfoReward>  awards;
	vector<CoinInfo> 	coins;
};
struct GS2U_YanMoKillRankSync <-
{
	vector<YanMoKillInfo> ranks;//排行榜
};

// 炎魔刷新的时间 
struct GS2U_YanMoRefreshTime <-
{
	uint32		timestamp;//哪个时间戳
};
// 击杀奖励，弹窗推送
struct GS2U_YanMoRewardNotice <-
{
  uint8   type;   // 1- 击杀将  2-幸运奖
  uint32  boss_id;
  uint16  boss_lv;
	vector<Dialog_Item>  items;
  vector<Dialog_Coin>  coins;
  vector<EqInfo>    eqs;
};

// 炎魔获得阶段奖励  ---- 废弃 -----
struct GS2U_YanMoStageAward <-
{
	uint32		stage; //阶段
};
// 炎魔获得阶段奖励 
struct U2GS_GetYanMoStageAward ->
{
  uint8		stage; // 阶段
};
// 炎魔结算
struct GS2U_YanMoResult <-
{
	uint8				isWin;//0:失败 1:胜利
	vector<Dialog_Item>  items;
  vector<Dialog_Coin>  coins;
  vector<EqInfo>    eqs;
};

// 炎魔战盟结算
struct GS2U_YanMoGuildResult <-
{
	uint8					isWin;	//0:失败 1:胜利
	uint16					rank;	// 排名
	vector<Dialog_Item>		guild_items;
	vector<Dialog_Coin>		guild_coins;
	vector<EqInfo>			guild_eqs;
	vector<Dialog_Item>		personal_items;
	vector<Dialog_Coin>		personal_coins;
	vector<EqInfo>			personal_eqs;
};

// ========炎魔试炼 END===

// 请求背包数据
struct U2GS_RequesBagItemList ->
{
  vector<uint16>   bag_ids;   // 背包Id列表
  bool             is_bind;   // 是否绑定
};

// 打宝类疲劳度
struct demonFatigue
{
	uint8		type;	// 类型 (1：天魔入侵 2：天魔远征 3：VIP天魔  4:剑台除魔  6:战神殿)
	uint16		fatigue; // 疲劳度
	uint16  	extra_fatigue;  // 额外疲劳
};
struct GS2U_sendDemonsFatigue <-
{
	vector<demonFatigue> fatigue_list;
};
struct GS2U_demonFatigueChanged <-
{
	uint8		type;	// 类型 (1：天魔入侵 2：天魔远征 3：VIP天魔  4:剑台除魔  6:战神殿)
	uint16		fatigue; // 疲劳度
	uint16  	extra_fatigue;  // 额外疲劳
};

// -----------------邮件(领奖中心修改)---------------------------------------
// 有新邮件推送
struct GS2U_NewMailArrive__6466 <-
{
	uint16    unread_num;			// 未读邮件数量
	uint8     one_key_op;			// 一键操作标志 0不可 1允许
};
// 客户端请求邮件
struct U2GS_RequestMailList__6467 ->
{
	uint32  timestamp;			// 获得这段时间以后的收到的邮件，获得全部的邮件这个参数填0
};
// 
struct itemInstanceinfo
{
	uint64   id;			      // 实例ID
	uint32   itemID;        // cfgID
	uint8	  bindState;	 // 绑定状态  0 -非绑定   1-绑定
	EqInfo equipment;	// 装备信息
};
// 
struct mailNew
{
	uint64   mailID;			      // 邮件ID
  uint64   senderID;		      // 发送者ID
  string   senderName;	      // 发送者Name
  string   title;				      // 标题
  string   describe;	        // 描述
  uint8    state;		          // 0-未读、1-已读 2-已经领取附件
  uint32   sendTime;		      // 发送时间
  uint32   getATime;		      // 附件领取时间  没有领取的时候为0
  uint8	   multiple;	        // 奖励倍数
	vector<CoinInfo> coinList;	//货币奖励列表
	vector<itemInfo> item_info;	//奖励的道具
	vector<itemInstanceinfo> item_ins_info;	//奖励的道具实例
	uint8 one_key_op;			// 一键操作标志 0不可 1允许
};

// 邮件头
struct mailHead
{
  uint64   mailID;			    // 邮件ID
  uint64   senderID;		    // 发送者ID
  string   title;				// 标题
  uint8    state;		        // 0-未读、1-已读 2-已经领取附件
  uint32   sendTime;		    // 发送时间
  uint32   getATime;		    // 附件领取时间  没有领取的时候为0
  uint8    have_award;			// 0-没有附件 1-有附件
  uint8    one_key_op;			// 一键操作标志 0不可 1允许
};
// 邮件内容
struct mailContent
{
	uint64   mailID;			      // 邮件ID
    string   senderName;	          // 发送者Name
    string   describe;	              // 描述
    uint8	   multiple;	          // 奖励倍数
	vector<CoinInfo> coinList;	      // 货币奖励列表
	vector<itemInfo> item_info;	      // 奖励的道具
	vector<itemInstanceinfo> item_ins_info;	// 奖励的道具实例
};

// 请求邮件头部信息
struct U2GS_RequestMailHead ->
{
};

struct GS2U_RequestMailHeadRet <-
{
  vector<mailHead> head_list;
};

// 请求邮件内容
struct U2GS_RequestMailContent ->
{
	vector<uint64>   id_list;		// 邮件ID列表
};

struct GS2U_RequestMailContentRet <-
{
    vector<mailContent> content_list;
};

struct GS2U_RequestMailListRet__6468 <-
{
  vector<mailNew> mailList;
};

// 邮件操作
struct U2GS_MailOp__6469 ->
{
	uint64   mailID;			      // 邮件ID
	uint8    type;              //  0-阅读 1-领取 2-删除 
};
struct GS2U_MailOpRet__6470 <-
{
  uint32   errCode;           // 不为0 表示操作失败
  uint64   mailID;			      // 邮件ID
	uint8    type;              //  0-阅读 1-领取 2- 删除
};

// 邮件操作
struct U2GS_MailOneKeyOp__6471 ->
{
	uint8    type;              //  0-阅读 1-领取 2-删除 
};
struct GS2U_MailOneKeyOpRet__6472 <-
{
  uint32           errCode;             // 不为0 表示操作失败
  vector<uint64>   mailIDList;	        // 操作成功的邮件
  vector<CoinInfo> coinList;	      // 货币奖励列表
  vector<itemInfo> item_info;	      // 奖励的道具
  vector<itemInstanceinfo> item_ins_info;	// 奖励的道具实例
  uint8            type;                //  0-阅读 1-领取 2- 删除
};

// 服务器检查删除邮件 如果玩家在线  会收到此消息
struct GS2U_MailDeleteNotify__6473 <-
{
  vector<uint64>   mailIDList;	        // 需要删除的邮件
};

// 矮人宝藏
struct U2GS_DungeonPreDepositsInfo ->
{
	
};
struct DungeonPreDeposits
{
	uint32  dungeonID;			// 关卡ID
	uint8	star;				// 最高通关星数
}
struct GS2U_DungeonPreDepositsInfo <-
{
	uint8  maxFightCount;		// 最大挑战次数
	uint8  fightCount;			// 已使用挑战次数
	vector<DungeonPreDeposits> dungeon_list;
};

// --------------------------------圣物 start-----------------------------
// 圣物结构
struct HolyInfo
{
  uint32         holy_id;					  // 圣物id (配置表Id)
  uint16         holy_lv;					  // 等级
  uint32         holy_exp;						// 经验
  uint32         holy_type;						// 圣物类型
  uint16         break_lv;				  // 突破等级  和圣物等级相关
  uint16         star;				      // 星数
  uint16         refine_lv;				  // 精炼等级
  uint8          is_rein;                // 是否转生 0否 1是
};

// 刷新圣物 上线发送
struct GS2U_HolyUpdate <-
{
  vector<HolyInfo>     holys;				  // 
};

// 升级
struct U2GS_HolyAddLv ->
{
  uint32         holy_id;
  vector<CostList>  costs;
};
struct GS2U_HolyAddLvRet <-
{
  uint32         holy_id;
  uint16         holy_lv;
  uint32         holy_exp;						// 经验
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 突破
struct U2GS_HolyAddBreak ->
{
  uint32         holy_id;
};
struct GS2U_HolyAddBreakRet <-
{
  uint32         holy_id;
  uint16         break_lv;				  // 突破等级  和圣物等级相关
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 升星
struct U2GS_HolyAddStar ->
{
  uint32         holy_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_HolyAddStarRet <-
{
  uint32         holy_id;
  uint16         star;				      // 星数
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 精炼
struct U2GS_HolyAddAwaken ->
{
  uint32         holy_id;
  bool    use_spec;  // 是否使用万能碎片
};
struct GS2U_HolyAddAwakenRet <-
{
  uint32         holy_id;
  uint16         refine_lv;				  // 精炼等级
  uint32         err_code;   // 0-成功，非0-错误原因
};
// 转生
struct U2GS_HolyReincarnation ->
{
  uint32         holy_id;
};
struct GS2U_HolyReincarnationRet <-
{
  uint32         holy_id;
  uint32         err_code;   // 0-成功，非0-错误原因
};

// -------------圣灵 <----------------------
// 圣灵技能信息
struct ShenglingSkill
{
  uint8     pos;			//技能镶嵌位置	
  uint32    holy_id; 
  uint8     skill_type;			//技能类型
  uint32    skill_id;  
};
// 圣灵信息
struct Shengling
{
  uint8			 type;		// 类型（1，火 2，水 3，风 4，土）
  uint16         lv;					  // 等级
  uint32         exp;						// 经验
  uint16         pill1;					  // 嗑丹
  uint16         pill2;					  // 
  uint16         pill3;					  //
  uint32         holy_id;  				//装配圣物
};
// 刷新圣灵  或者上线推送
struct GS2U_ShenglingUpdate <-
{
  vector<Shengling>     shenglings;    // 圣灵
};
// 刷新圣灵上装配的技能
struct GS2U_ShenglingSkillUpdate <-
{
  uint8			 type;		// 类型（1，火 2，水 3，风 4，土）
  vector<ShenglingSkill>      skills;    
};

// 请求开启技能格子
struct U2GS_ShenglingSkillBoxOpenReq ->
{
	uint8		type;	// 类型
	uint8		pos;	// 技能格
};

// 请求开启技能格子返回
struct GS2U_ShenglingSkillBoxOpenRet <-
{
	uint32		err_code;	// 错误码
	uint8		type;	// 类型
	uint8		pos;	// 技能格
};

// 圣灵升级
struct U2GS_ShenglingAddLv ->
{
  uint8				type;
  vector<CostList>  costs;
};
struct GS2U_ShenglingAddLvRet <-
{
  uint8				type;
  uint16         lv;					  // 等级
  uint32         exp;						// 经验
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 圣灵技能穿戴/卸载
struct U2GS_ShenglingSkillOp ->
{
  uint8   switch ; // 0-on  1-off
  uint8   pos; 		//技能格
  uint8	  type;		//圣灵类型
  uint32  skillid;  // 技能ID   如果是卸载 可以不使用这个字段
  uint8   skill_type;			//技能类型
  uint32  holyid;    // 来自的圣物
};
struct GS2U_ShenglingSkillOpRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
  uint8          switch; // 0-on  1-off
};

// 嗑丹
struct U2GS_ShenglingEatPill ->
{
  uint8     index;	// 丹药索引
  uint8     pos;	// 丹药位置
  uint16    num;   // 
  uint8	  type;		//圣灵类型
};
struct GS2U_ShenglingEatPillRet <-
{
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 出战/不出战
struct U2GS_HolyEquipOP ->
{
  uint64    role_id;  // 角色id
  uint8     type;	// 0 - 装配  1- 卸载
  uint32    holy_id;   // 
};
struct GS2U_HolyEquipOPRet <-
{
  uint64    role_id;  // 角色id
  uint32    holy_id;   // 
  uint32    err_code;   // 0-成功，非0-错误原因
};

// --------------------------------圣物 end-----------------------------


// --------------------------------世界BOSS start-----------------------------
// 获取世界BOSS面板信息
struct U2GS_GetBossWorldInfo ->
{
};
// 击杀记录
struct BossWorldDeadRecord
{
	string				server_name;    // 所在服务器（有名字，这个为空则表示本服）
	string				name;       // 击败者名字
	uint32				kill_time;  // 击杀时间
};
// Boss信息
struct BossWorldInfo
{
	uint32			map_id;                         // 地图ID 配置id
	uint16			boss_lv;                        // 地图ID 配置id
	uint8			is_dead;                        // 是否被击败，0:否。1:已击败
	uint64          refresh_time;                   // boss刷新时间
	uint8           is_follow;                      // 是否关注 0 否  1 是
	vector<BossWorldDeadRecord>	kill_record;   		// 击败信息列表
	vector<killerInfo> kill_drop_list;         		// 掉落
	uint8           is_pass;                        // 是否通过
	uint8           dead_times;                     // 本轮死亡次数
};
struct GS2U_GetBossWorldInfoResult <-
{
	vector<uint16>				    gets;	  // <疲劳，快速收益剩余次数>
	uint64                          last_restore_time; // 最近一次恢复时间
    uint16                          restore_times  // 恢复次数
	vector<BossWorldInfo>		    info;	// 面板列表
	uint8							enter_multi; // 进入倍数
};


// 进入世界BOSS地图
struct U2GS_EnterBossWorld ->
{
	uint64				map_id;// 地图ID 配置id
};



// 获取世界BOSS当前地图伤害排行榜信息
struct BossWorldRank
{
	uint64				player_id;	// 玩家ID
	uint8				rank;      // 伤害排名
	uint8               team_flag; // 是否组队 0 未组队  1 组队
	string				name;      // 角色名
	uint64				value;     // 伤害值
	string              serverName;//服务器名
	uint32              nationality_id;        // 区域id
};
struct GS2U_BossWorldRankInfo <-
{
	uint8			    is_dead;        // 是否被击败，0:否。1:已击败
	uint16				my_rank;        // 自己的排名，0表示没有上榜
	uint64				my_damage;
	uint64              refresh_time;       // boss刷新时间
	vector<BossWorldRank>	rank_list;
};
struct world_boss_award{
	vector<Dialog_Item>  items;
    vector<Dialog_Coin>  coins;
    vector<EqInfo>    eqs;
}

// Boss死亡结算
struct GS2U_BossWorldResult <-
{
	world_boss_award        kill_award;     // 参与奖励
	world_boss_award        rank_award;     // 第一名奖励
	vector<uint8>			gets;
	uint8					rank;			// 排名
};

// 快速收益
struct U2GS_quick_award->
{
	uint				dungeonID;
};
struct GS2U_quick_award_ret<-
{
	uint32				err_code;
	uint8               times;
	uint8               enter_times; // 个人boss 进入次数
};

// 攻击提示
struct GS2U_BossWorldHurtNotice <-
{
	uint32		hurt_time;	// 上次受击时间
};

// --------------------------------世界BOSS end-----------------------------

//---------------------------日常----------------------------
//日常任务
struct daily_task
{
	pb_uint32 task_id;				//任务id
	pb_uint32 progress;			//任务进度
};


//活跃度任务完成
struct activity_complete
{
	pb_uint32 task_id;				//任务id
	bool normal;				//普通奖励
	bool recharge;				//充值奖励
};

//请求日常任务同步(返回GS2U_DailyTaskSync)
struct U2GS_GetDailyInfo ->
{
};

//请求日常活跃同步(返回GS2U_ActivityTaskSync)
struct U2GS_GetActivityInfo ->
{
};

//任务进度同步(日常任务)
struct GS2U_DailyTaskSync <-
{
	vector<daily_task> daily_progress_list;			//日常任务进度列表
	vector<pb_uint32> daily_complete_list;				//日常任务完成列表
	vector<daily_task> daily_extra_exp;             //任务上一次领奖的进度
};

//任务进度更新(日常任务)
struct GS2U_DailyTaskUpdate <-
{
	vector<daily_task> progress_list;			//日常任务进度列表
	vector<pb_uint32> complete_list;				//日常任务完成列表
	vector<daily_task> daily_extra_exp;             //任务上一次领奖的进度
};

//任务进度同步(日常活跃)
struct GS2U_ActivityTaskSync <-
{
	vector<uint32> accept_list;			//接取的活跃列表
	vector<activity_complete> activity_complete_list;	//日常活跃度完成列表
	uint32 activity_val;							//活跃度
};

//任务进度更新(日常活跃)
struct GS2U_ActivityTaskUpdate <-
{
	activity_complete complete;	//日常活跃度完成列表
	uint32 activity_val;	//活跃度
};

//完成日常任务
struct U2GS_DailyTaskComplete ->
{
	uint32 task_id;			//任务id
};

//完成日常任务结果
struct GS2U_DailyTaskCompleteRet <-
{
	uint32 err_code;				//错误代码
	uint32 task_id;					//任务id
	vector<CoinInfo> coins;			//奖励货币
	vector<itemInfo> items;			//奖励道具
	uint64 exp;						//奖励经验
};

//完成日常活跃
struct U2GS_ActivityTaskComplete ->
{
	uint32 task_id;			//任务id
	uint8 type;				//0:普通奖励，1:充值奖励
};

//完成日常活跃结果
struct GS2U_ActivityTaskCompleteRet <-
{
	uint32 err_code;				//错误代码
	uint32 task_id;					//任务id
	uint8 type;						//0:普通奖励，1:充值奖励
	vector<CoinInfo> coins;			//奖励货币
	vector<itemInfo> items;			//奖励道具
};

// 玩法次数信息
struct ActionInfo
{
	uint32	task_id;		//任务id
	uint32	left_count;		//剩余次数
	uint32	bought_count;	//购买次数
	uint32	add_count;	//增加次数
};
 
// 玩法次数同步
struct GS2U_ActionInfoAllSync <-
{
	vector<ActionInfo>	info_list;	//列表
};
struct GS2U_ActionInfoSync <-
{
	ActionInfo	info;
};

// 玩法免费id推送
struct GS2U_FuncFreeSync <-
{
	vector<uint32> func_id_list;	// 有剩余免费次数就推送
};
 
// 同步玩法特殊状态
struct GS2U_daily_task_sync_special_state <-
{
	vector<key_value> state_list;	// 状态列表 [{日常枚举ID, 是否处于特殊状态(1是 0否)}] 
};

// 报名活动
struct U2GS_activity_sign_up ->
{
	uint32 openaction_id;			// 报名活动id
};

// 报名活动返回
struct GS2U_activity_sign_up_ret <-
{
	uint32 err_code;				// 错误代码
	uint32 openaction_id;			// 报名活动id
};

// 已报名的活动
struct GS2U_activity_sign_up_list <-
{
	vector<uint32> list;
};

//--------------------------

// 最近联系人
struct U2GS_getContactList ->
{
	
};
struct contactInfo
{
	uint64		playerID;		// 玩家ID
	string		name;			// 玩家名字
	uint32 		headID;         // 头像ID
	uint32		vip;			// vip等级
	uint16		level;			// 等级
	uint32		time;			// 最近联系时间
	uint32      offine_time;	// 最近下线时间（在线发0 ）
	uint8		online;			// 是否在线（1：在线， 0：不在线）
	uint32		career;		//职业
	uint8		sex;		// 性别，0-男，1-女
	uint32		frame;  	// 头像框	
};
struct GS2U_sendContactList <-
{
	vector<contactInfo> contact_list;
};

//矮人宝藏结算
struct GS2U_DungeonPreDepositsSettleAccounts <-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint8				isWin;//1:胜利;0:失败
	uint8				star;	// 通关星数
	uint64				exp;
	uint32				intimacy;	// 增加的亲密度
	vector<string>		name_list;	// 好友名列表
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				settleType;//结算类型
	uint8				assistant;	// 是否助战
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
};


// ==================================埋骨之地==============================================
struct DungeonBoneYardInfo
{
	uint32  dungeonID;			// 关卡ID
	uint16	freeTimes;			// 免费次数
	vector<key_value>	  record_list;	// 最佳战绩 key = 1 小怪 2 精英 3 BOSS
}

// 获取信息
struct U2GS_DungeonBoneYardInfo ->
{
};
struct GS2U_DungeonBoneYardInfoRet <-
{
	uint8  	max_count;		// 最大挑战次数
	uint8  	fight_ount;			// 已使用挑战次数
	uint8 	buy_count_day;	// 今日购买的额次数
	vector<DungeonBoneYardInfo>	  dungeon_list;
};

// 扫荡
struct U2GS_BoneYardMopUp ->
{
  uint32  dungeonID;			// 关卡ID
  uint8   call_boss_num; // 召唤Boss数量
};
struct GS2U_BoneYardMopUpRet <-
{
  uint32      err_code;    // 
  uint32  dungeonID;			// 关卡ID
  uint64      exp;    // 经验
	vector<itemInfo>  items;  // 道具
  vector<CoinInfo>  coins;   // 货币
  vector<EqInfo>    eqs;      // 装备
};

// 进入地图
struct U2GS_EnterBondYard ->
{
	uint32  dungeonID;			// 关卡ID
};

// 防御塔
struct BoneYardTower {
  uint8     id;  // 防御塔ID
  uint8     lv;
  uint8     index;   // 塔的位置 
  uint64    monster_uid;   // 怪物uid
};

// 基础数据
struct BoneYardBase {
  uint8    batch;       // 波次
  bool     is_call_boss; // 当前波次是否召唤了Boss
  uint32   soul;        // 斗魂数量
  uint16   escape_num;  // 逃跑数量
  uint64   exp;      // 获得的经验
  vector<BoneYardTower>  towers; // 防御塔信息
  vector<key_value>	  record_list; // 当前战绩
};

// 进入地图后同步基础数据
struct GS2U_BoneYardBaseInfo <-
{
	BoneYardBase base;
};

// 基础数据刷新
struct GS2U_BoneYardBaseUpdate_Batch <-
{
  uint8   batch;       // 波次
  bool    is_call_boss; // 当前波次是否召唤了Boss
};
struct GS2U_BoneYardBaseUpdate_Soul <-
{
  uint32   soul;       // 斗魂数量
};
struct GS2U_BoneYardBaseUpdate_Exp <-
{
  uint64   exp;      // 获得的经验
};
struct GS2U_BoneYardBaseUpdate_Escape <-
{
  uint16   escape_num;       // 逃跑数量
  uint64   uid;              // 逃跑怪物uid
};
struct GS2U_BoneYardBaseUpdate_Tower <-
{
  vector<BoneYardTower>  towers;   // 防御塔信息
};
struct GS2U_BoneYardBaseUpdate_RecordList <-
{
   vector<key_value>	  record_list;   // 当前战绩
};
// 建塔  成功后推送 GS2U_BoneYardBaseUpdate_Tower
struct U2GS_CreateDefTower ->
{
  uint8   id;
  uint8   index;   // 塔的位置 
  float   x; 
  float   y; 
};
struct GS2U_CreateDefTowerRet <-
{
  uint32   err_code;
};

// 升级   成功后推送 GS2U_BoneYardBaseUpdate_Tower
struct U2GS_DefTowerAddLv ->
{
  uint8   id;
  uint8   index;   // 塔的位置 
};
struct GS2U_DefTowerAddLvRet <-
{
  uint32   err_code;
};

// 拆除   成功后推送 GS2U_BoneYardBaseUpdate_Tower
struct U2GS_DefTowerDel ->
{
  uint8   index;   // 塔的位置 
};
struct GS2U_DefTowerDelRet <-
{
  uint32   err_code;
};

// 召唤Boss  成功后会刷新批次 （返回GS2U_BoneYardBaseUpdate_Batch）
struct U2GS_BoneYardCallBoss ->
{
   uint8    batch;       // 波次 （冗余验证使用）
};
struct GS2U_BoneYardCallBossRet <-
{
  uint32   err_code;
};


// 查看获得的道具
struct U2GS_BoneYardShowAwardGeted ->
{
};
struct GS2U_BoneYardShowAwardGetedRet <-
{
  vector<Dialog_Item>  items;  // 普通道具
  vector<Dialog_Coin>  coins;  // 货币
  vector<EqInfo>       eqs;    // 装备
};

// 结算
struct GS2U_BoneYardResult <-
{ 
  uint32  dungeonID;			// 关卡ID
  uint8				is_win;//0:失败 1:胜利
  uint64      exp;
	vector<itemInfo>  items;
  vector<CoinInfo>  coins;
  vector<EqInfo>    eqs;
  uint8 	  max_enter_count;		// 最大进入次数
  uint8	      enter_count;		    // 已进入次数
};

// 直接开始刷怪
struct U2GS_BoneYardStartImmediacy ->
{
};
struct GS2U_BoneYardStartImmediacyRet <-
{
  uint32 err_code;   
};

// 直接结算  用于 客户端退出副本先显示副本结算 
struct U2GS_OverImmediacy ->
{
};
// 跳过等待结算的XX秒 服务器直接结算
struct U2GS_SkipFinishWait ->
{
};
// ==================================埋骨之地End===========================================
//副本阶段目标start

//当前生效阶段目标
struct GS2U_CurMapStage <-
{
	uint32 stage;
}
//已经达成的阶段目标列表
struct GS2U_CurReachStageList <-
{
	vector<uint32> stageList; //已经达成的
	vector<uint32> failedList;//已经失败的
}
//副本阶段目标end




// 玩家属性 不包含地图内buff加成的属性
struct PlayerProp
{
	uint16 index;		// 战斗属性号
	pb_uint64 base_value;		// 基础值
	pb_uint64 total_value;		// 总值
};

struct PlayerPropChanged
{
	uint64 role_id;		// 角色ID
    vector<PlayerProp> props;
};
// 服务器通知玩家属性变化
struct GS2U_PlayerPropChanged <-
{
    vector<PlayerPropChanged> props;
};

// 精灵宝库
struct U2GS_DungeonDepositsExInfo ->
{
	
};
struct dungeonDepositsEx
{
	uint32  dungeonID;			// 关卡ID
	uint8	star;				// 最高通关星数
}
struct GS2U_DungeonDepositsExInfo <-
{
	uint8  	maxFightCount;		// 最大挑战次数
	uint8  	fightCount;			// 已使用挑战次数
	uint8 	buyFightCountDay;	//今日购买的额次数
	vector<dungeonDepositsEx> dungeon_list;
};

// 龙神秘典副本
struct U2GS_DungeonDragonInfo ->
{
	
};
struct dungeonDragon
{
	uint32  dungeonID;			// 关卡ID
	uint8	star;				// 最高通关星数
	uint8	free;				// 是否还有免费次数(1:有 0:没有)
}
struct GS2U_DungeonDragonInfo <-
{
	uint8  	maxFightCount;		// 最大挑战次数
	uint8  	fightCount;			// 已使用挑战次数
	uint8 	buyFightCountDay;	//今日购买的额次数
	vector<dungeonDragon> dungeon_list;
};

//副本结算信息
struct GS2U_DungeonDragonpSettleAccounts <-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	uint8				star;	// 通关星数
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				settleType;//结算类型
	uint8				isConqAward;//是否同时领取征服奖励（暂时为首通奖励）0:不是，1:是
	vector<EqInfo>	  eq_list;		// 奖励装备列表
};

// 进入副本
struct U2GS_enterDungeonDragon ->
{
	uint dungeonID;//关卡ID
};



// 怪物被杀信息 (轰炸关)
struct DungeonMonsterKilled 
{
  uint32 monster_id; // cfgid
  uint16 num;    // 被杀数量
};
struct GS2U_DungeonMonsterKilledInfo <-
{
	vector<DungeonMonsterKilled> info;
};

// 杀怪信息 (比试)
struct GS2U_DungeonKillInfo <-
{
	uint16 num_p;     // 玩家杀怪数量
	uint16 num_f;     // 友方怪杀怪数量
};

// --------------------------------头衔	start-----------------------------
//  玩家上线同步头衔信息
struct role_title
{
	uint64  role_id; 		// 角色ID
	uint16	career;			// 职业
	uint16	intensity_lv;	// 强化等级
	uint16	title_show;		// 头衔是否展示
};	
struct GS2U_RoleTitleSync <-
{
	vector<role_title> role_title_list;  // 角色头衔列表
};

// 头衔升级
struct U2GS_RoleTitleAddLv ->
{
	uint64  role_id; 		// 角色ID
};
struct GS2U_RoleTitleAddLvRet <-
{
	uint64  role_id; 			// 角色ID
	uint16	new_intensity_lv;	// 强化后等级
	uint32	err_code;			// 错误码
};

// 头衔是否穿戴显示
struct U2GS_RoleTitleEquip ->
{
	uint64  role_id; 			// 角色ID
	uint8	title_switch;		// 0-不显示，1-显示
};
struct GS2U_RoleTitleEquipRet <-
{
	uint64  role_id; 			// 角色ID
	uint8	title_switch;		// 0-不显示，1-显示
	uint32	err_code;			// 错误码
};

// --------------------------------头衔 end-----------------------------

// --------------------------------新版信物 start-----------------------------

// 定情信物升级
struct U2GS_RingAddExp ->
{
	uint64	ringID;			// 
	vector<CostList>  costs;
};

// 定情信物升星
struct U2GS_RingAddStar ->
{
	uint64	ringID;			// 
};

// --------------------------------新版信物 end-----------------------------

// --------------------------------地图切换线路协议 start-----------------------------

// 获取当前地图的分线信息
struct U2GS_GetMapLineInfo ->
{
	uint32  map_id;  // 地图配置id
};
struct MapLineInfo
{
	uint8   line;
	uint32   player_num;  // 此线人数  客户端需要根据此字段来得出 空闲还是拥挤的状态
};
struct GS2U_GetMapLineInfoRet <-
{
	uint32  err_code;   //  0表示成功获取到最大线，其他为失败原因
	vector<MapLineInfo>	line_list;  // 当前地图的所有的线路信息
};

// 地图切换线路   前提: 必须要在改地图id里面
struct U2GS_ChangeMapLine ->
{
	uint32  map_id;   // 地图ID 配置id 用于验证
	uint8   line;     // 具体的线路
};
// 切换失败才会返回此消息
struct GS2U_ChangeMapLineRet <-
{
	uint32  err_code;   //  0表示成功，其他为失败原因 
};

// --------------------------------地图切换线路协议 end-----------------------------


// --------------------------------守卫战盟 start-----------------------------
// 获取守卫战盟面板信息
struct U2GS_GetGuildGuardInfo ->
{
};
struct GS2U_GetGuildGuardInfo <-
{
	uint32   next_ac_time;  // 下次开启的时间
};

// 活动开启界面推送
struct GS2U_GuildGuardOpenSync <-
{
};


// 进入守卫战盟地图  应该是写死的地图ID
struct U2GS_EnterGuildGuardMap ->
{
};


// 地图内信息
struct GuildGuardInfo
{
	uint8   is_call_boss;  // 2. 是否已经召唤Boss
	uint32  kill_num;      // 3. 战盟杀怪数量
	uint32  ac_end_time;   // 4. 活动结束时间
	uint64  exp;           // 5. 已经获得的经验
	uint8   jiagu_times1;  // 6. 初级加固已使用次数
	uint8   jiagu_times2;  // 7. 中级加固已使用次数
	uint8   jiagu_times3;  // 8. 高级加固已使用次数
};


struct GS2U_GuildGuardInfoSync <-
{
	GuildGuardInfo   info; 
};

// 某结构的某值
struct gg_update_data
{
	uint8      index;			// 第几个值   GuildGuardInfo 的注释
	uint64     value;			// 值的包装
};
struct GS2U_GuildGuardInfo_Update <-
{
	vector<gg_update_data> update_list; 
};

// 召唤Boss
struct U2GS_GuildGuardCallBoss ->
{
};
struct GS2U_GuildGuardCallBossRet <-
{
	uint32   err_code; 
};

// 加固
struct U2GS_GuildGuardJiaGu ->
{
  uint8   type;
};
struct GS2U_GuildGuardJiaGuRet <-
{
	uint32   err_code; 
};

// TODO  buff球

// 当前地图伤害排行榜信息  前10名
struct GuildGuardRank
{
	uint8	  rank;      // 伤害排名
	string	name;      // 角色名
	uint64	value;     // 伤害值
	uint32  nationality_id;        // 区域id
};
struct GS2U_GuildGuardRankInfo <-
{
	uint16				my_rank;        // 自己的排名，0表示没有上榜
	uint64				my_damage;
	vector<GuildGuardRank>	rank_list;
};

// 结算
struct GS2U_GuildGuardResult <-
{
  bool     is_win;
	uint64	 exp1;    // 击杀怪物获得的经验
	uint64	 exp2;    // 伤害排行获得的经验
	uint64	 exp3;    // 神柱存活获得的经验
};


// 结算排行榜信息
struct GuildGuardRankResult
{
	uint8	  rank;      // 伤害排名
	string	name;      // 角色名
	uint32  head_id;                // 头像Id
	uint32  head_frame;				// 头像框ID
	uint16  career;
	uint64  battle_value;
	uint64	damage;     // 伤害值
	uint32  nationality_id;        // 区域id
};
struct GS2U_GuildGuardRankReslutInfo <-
{
	vector<GuildGuardRankResult>	rank_list;
};

// 守卫战盟活动是否已经结算  用于前端显示红点
struct GS2U_GuildGuardAcIsSettle <-
{
	bool is_settle;
};


// --------------------------------守卫战盟 end-----------------------------

// -------------------------------- 查看玩家 BEGIN -----------------------------------------------

// 查看玩家：装备，参考 GS2U_EqList
struct equipment_view
{
	vector<EqInfo>	eqs;	         // all
	vector<EqPosInfo>	eqps;	         // all
};
// 查看玩家：队伍
struct team_view
{
	uint64  team_id;               	// 队伍Id
	bool    is_leader;              // 队伍队长
};
// 查看玩家：战盟
struct guild_view
{
	uint64  guild_id;               // 战盟Id
	string  guild_name;             // 战盟名字
	uint32  guild_rank;             // 战盟职位
};
// 查看玩家：伴侣
struct wedding_view
{
	uint8   state;          		// 结婚状态
	string  name;    				// 伴侣名字
};

// 查看玩家：分战力
struct battle_value_view
{
	uint16   id;					// 战力Id
	uint64  other_value;			// 他的战力值
};

// 查看玩家：魔戒
struct lord_ring_view
{
	uint8	  pos;			// 部位
	uint32	  cfg_id;		// 魔戒id
};

// 查看玩家：角色
struct role_view
{
	uint64             	role_id;		// 角色ID
	uint32              career; 		// 职业
	uint8               career_lv;      // 转职等级
	uint8               is_leader;      // 是否为领队 1是 0否
	equipment_view  	equipment;		// 穿戴装备
	uint16				honor_lv;		// 头衔等级
	uint32				title_id;		// 称号ID
	uint32  			wing_id;		// 翅膀id
	uint32				mount_id;		// 坐骑id
  	uint32				dragon_id;		// 龙神id
  	vector<PlayerProp>  		property_list;			// 属性列表
	vector<battle_value_view>	battle_value_list;		// 分战力列表
	vector<godOrnamentLayer>	go_list;				// 神饰分阶列表
	vector<lord_ring_view> 		lord_ring_list;    		// 魔戒列表
	vector<uint32>      fashionCfgIDList;	// 可见时装配置ID列表
	uint32  hair_color_id;   // 发色ID
	uint32  skin_color_id;   // 皮肤色ID
	uint32  height;   // 身高百分比
	uint32  fashion_color; // 时装颜色
	uint32  tattoo; // 纹身索引
	uint32  tattoo_color; // 纹身颜色
	vector<WeaponLookInfo>  weapon_list;
	vector<uint32>		guard_liss;		// 守护列表
};

// -------------------------------- 查看玩家 END ---------------------------------------------------

// --------------------------------装扮 start-----------------------------

struct GS2U_DressPlayer <-
{
	uint64  player_id;  			// 玩家Id
	uint32  head_id;				// 佩戴的头像id
	uint32  frame_id;				// 佩戴的头像框id
	uint32  chat_bubble_id;			// 佩戴的聊天气泡id
	uint16  album_lv;				// 相册等级
	uint16  album_exp;				// 相册经验
}

// -------------头像 <----------------------
// 头像结构
struct PlayerHeadInfo
{
  uint32         head_id;					  // 头像id (配置表Id)
  uint16         head_star;				      // 星数
};

// 头像列表
struct GS2U_PlayerHeadUpdate <-
{
  vector<PlayerHeadInfo>     head_list;				  // 激活的头像列表
};

// 头像升星
struct U2GS_PlayerHeadAddStar ->
{
  uint32         head_id;
};
struct GS2U_PlayerHeadAddStarRet <-
{
  uint32         head_id;
  uint16         head_star;	 // 星数
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 客户端修改主角头像
struct U2GS_ChangePlayerHead ->
{
    uint32  headID;         // 头像ID
};
struct GS2U_ChangePlayerHead <-
{
    uint32  headID;         // 头像ID
    uint32  errorCode;      // 0-成功，非0-错误原因
};

// -------------头像框 <----------------------
// 头像框结构
struct HeadFrameInfo
{
  uint32         frame_id;					  // 头像框id (配置表Id)
  uint16         frame_star;				      // 头像框星数
};

// 刷新头像框 上线发送
struct GS2U_HeadFrameUpdate <-
{
  vector<HeadFrameInfo>     frame_list;				  // 激活的头像框列表
};

// 头像框升星
struct U2GS_HeadFrameAddStar ->
{
  uint32         frame_id;
};
struct GS2U_HeadFrameAddStarRet <-
{
  uint32         frame_id;
  uint16         frame_star;			// 头像框星数
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 客户端修改主角头像框
struct U2GS_ChangeHeadFrame ->
{
    uint32  frame_id;         // 头像框ID
};
struct GS2U_ChangeHeadFrame <-
{
    uint32  frame_id;         // 头像框ID
    uint32  errorCode;      // 0-成功，非0-错误原因
};

// -------------> 聊天气泡 <----------------------
// 聊天气泡结构
struct ChatBubbleInfo
{
  uint32         bubble_id;				     	  // 气泡id (配置表Id)
  uint16         bubble_star;				      // 星数
};

// 刷新聊天气泡 上线发送
struct GS2U_ChatBubbleUpdate <-
{
  vector<ChatBubbleInfo>  bubble_list;		// 激活的聊天气泡列表
};

// 聊天气泡升星
struct U2GS_ChatBubbleAddStar ->
{
  uint32         bubble_id;
};
struct GS2U_ChatBubbleAddStarRet <-
{
  uint32         bubble_id;
  uint16         bubble_star;		 // 星数
  uint32         err_code;   // 0-成功，非0-错误原因
};

// 客户端修改聊天气泡
struct U2GS_ChangeChatBubble ->
{
    uint32  bubble_id;         // 气泡id
};
struct GS2U_ChangeChatBubbleRet <-
{
    uint32  bubble_id;     // 气泡id
    uint32  err_code;      // 0-成功，非0-错误原因
};

// -------------> 相册 <----------------------
// 相册升级
struct U2GS_PhotoAlbumAddLv ->
{
  vector<CostList>  costs;
};
struct GS2U_PhotoAlbumAddLvRet <-
{
  uint16         photo_album_lv;			// 相册等级
  uint32         photo_album_exp;			// 相册经验
  uint32         err_code;   // 0-成功，非0-错误原因
};
// --------------------------------装扮 end-----------------------------

//----------------------战盟周环----------------------
//周环奖励
struct GuildTaskAward
{
	vector<Dialog_Item>	items;  // 普通道具
	vector<Dialog_Coin>	coins;  // 货币
	vector<EqInfo>		eqs; // 装备
	uint64				exp; // 经验
}

//领取战盟任务
struct U2GS_AcceptGuildTask ->
{
    uint8           accept_pos;
};

//领取战盟任务返回
struct GS2U_AcceptGuildTaskRet <-
{
	uint32	        err_code;	//错误码
	uint8           accept_pos;
};

//战盟周环同步
struct GS2U_GuildTaskSync <-
{
	uint8	cur_rid;	//当前环id
	vector<uint8>	award_part_list;	//领过奖part
};

//战盟周环快速完成
struct U2GS_QuickCompleteGuildTask ->
{
	uint8	type;		//1:完成当前任务，2:完成当前段所有任务
	uint8	cur_rid;	//当前环id
};

//战盟周环快速完成返回
struct GS2U_QuickCompleteGuildTaskRet ->
{
	uint32	err_code;	//错误码
	GuildTaskAward award;	//奖励
};

//领取周环段奖励
struct U2GS_GetGuildTaskPartReward ->
{
	uint8	part_id;	//段id
};

//领取周环段奖励返回
struct GS2U_GetGuildTaskPartRewardRet <-
{
	uint32	err_code;	//错误码
};

// 战盟任务获取任务列表
struct guild_task_info
{
    uint8           pos;            // 位置
	uint32          task_id;        // 任务id
}
// 推送战盟任务数据
struct GS2U_guild_task_task_info <-
{
	vector<guild_task_info>     task_list;
	uint8                       used_refresh; // 以使用刷新次数
	uint8                       accept_times; // 以接受任务次数
	uint8                       accept_pos;     // 接受任务位置
};
// 刷新任务
struct U2GS_guild_task_refresh_task ->
{
};
struct GS2U_guild_task_refresh_task_ret <-
{
	uint32	                    err_code;	//错误
};

//--------------------战盟周环 end----------------------

//--------------------提交物品任务 end----------------------

struct U2GS_PutItemForTask ->
{
	uint32	task_id;	//任务id
	uint64	item_uid;	//物品uid
	uint32	count;		//数量
};

struct GS2U_PutItemForTaskRet <-
{
	uint32	err_code;	//错误码
	uint32	task_id;	//任务id
	uint32	progress;	//进度
};

//--------------------提交物品任务 end----------------------

//----------------------转职----------------------
//角色转职等级
struct role_career_sync
{
	uint64	role_id;	//角色ID
	uint8	career_lv;	//当前职业等级
};
//同步转职信息
struct GS2U_CareerSync <-
{
	vector<role_career_sync> career_list;	// 所有角色转职等级
};

//剩余前置
struct role_career_condition
{
	uint32		task_id;		// 任务ID
	bool		can_do;			//是否可以开始该任务
};
//转职剩余前置任务同步
struct GS2U_UpCareerConditionSync <-
{
	vector<role_career_condition>	left_pre_list;	//剩余前置任务
};

//角色任务信息
struct role_career_task
{
	uint64				role_id;	//角色ID
	uint8				part;		//龙魂阶段，龙魂水晶阶段，魔源阶段
	uint8				progress;	//激活命星、龙魂进度，龙魂水晶进度，魔源进度
	vector<key_value>	ele_list;	//元素激活情况
	vector<uint32>		left_task;	//剩余未完成任务
}
//接任务后上线、刷新才同步
struct GS2U_UpCareerTaskInfoSync <-
{
	vector<role_career_task> career_task_list;		// 所有角色任务信息
};

//请求接转职任务
struct U2GS_AcceptCareerTask ->
{
};

//请求点亮命星
struct U2GS_ActiveFateStar ->
{
	uint64	role_id;	//角色ID
	uint8	star_id;	//命星id
	uint8	cond_type;	//消耗方案
};

//点亮命星返回
struct GS2U_ActiveFateStarRet <-
{
	uint64	role_id;		//角色ID
	uint8	star_id;		//激活的命星id
	uint32	err_code;		//错误码
};

//请求激活龙魂
struct U2GS_ActiveDragonSpirit ->
{
	uint64	role_id;	//角色ID
	uint8	part_id;	//龙魂阶段
	uint8	spirit_id;	//龙魂id
	uint8	cond_type;	//消耗方案
};

//激活龙魂返回
struct GS2U_ActiveDragonSpiritRet <-
{
	uint64	role_id;		//角色ID
	uint8	part_id;		//龙魂阶段
	uint8	spirit_id;		//龙魂id
	uint32	err_code;		//错误码
};

//请求激活龙魂水晶
struct U2GS_ActiveDragonCristal ->
{
	uint64	role_id;	//角色ID
	uint8	part_id;	//龙魂阶段
	uint8	cristal_id;	//龙魂水晶id
	uint8	cond_type;	//消耗方案
};

//激活龙魂水晶返回
struct GS2U_ActiveDragonCristalRet <-
{
	uint64	role_id;		//角色ID
	uint8	part_id;		//龙魂阶段
	uint8	cristal_id;		//龙魂水晶id
	uint32	err_code;		//错误码
};

//请求激活元素
struct U2GS_ActiveElement ->
{
	uint64	role_id;	//角色ID
	uint8	ele_id;		//元素id
	uint8	ele_lv;		//元素等级
	uint8	cond_type;	//消耗方案
};

//激活元素返回
struct GS2U_ActiveElementRet <-
{
	uint64	role_id;		//角色ID
	uint8	ele_id;			//激活的元素id
	uint8	ele_lv;			//元素等级
	uint32	err_code;		//错误码
};

//请求点亮魔源
struct U2GS_ActiveDemonSource ->
{
	uint64	role_id;	//角色ID
	uint8	part_id;	//魔源阶段
	uint8	source_id;	//源id
	uint8	cond_type;	//消耗方案
};

//点亮魔源返回
struct GS2U_ActiveDemonSourceRet <-
{
	uint64	role_id;		//角色ID
	uint8	part_id;		//魔源阶段
	uint8	source_id;		//源id
	uint32	err_code;		//错误码
};

//请求点亮神火
struct U2GS_ActiveMagicFire ->
{
	uint64	role_id;	//角色ID
	uint8	part_id;	//神火阶段
	uint8	fire_id;	//源id
	uint8	cond_type;	//消耗方案
};

//点亮神火返回
struct GS2U_ActiveMagicFireRet <-
{
	uint64	role_id;		//角色ID
	uint8	part_id;		//神火阶段
	uint8	fire_id;		//源id
	uint32	err_code;		//错误码
};

//请求完成转职
struct U2GS_UpCareerComplete ->
{
	uint64	role_id;		//角色ID
};

//请求完成转职回复
struct GS2U_UpCareerCompleteRet <-
{
	uint64	role_id;		//角色ID
	uint32	err_code;		//错误码
};

//请求锚定命星奖励称号
struct U2GS_UpCareerAddTitle ->
{
	uint64	role_id;		// 完成任务的角色ID
	uint32	task_id;		// 完成的任务ID
};
struct GS2U_UpCareerAddTitleRet ->
{
	uint64	role_id;		// 角色ID
	uint32	task_id;		// 完成的任务ID
	uint8	star_id;		// 命星序号
	uint32	title_id;		// 增加的称号ID
	uint32	err_code;		// 错误码
};

// 同步副本类角色任务红点
struct GS2U_RoleTaskRedPoint -> 
{
	uint32	type;		// 任务类型
	bool	is_red;		// 是否红点
};
//--------------------转职 end----------------------

// --------------------------------预言之书 start-----------------------------
// 预言之书任务结构
struct ProphecyTaskInfo
{
  pb_uint32         task_id;			// 任务ID
  vector<pb_int>    task_progress;		// 任务进度  {[1]=999}|{bossid,...}|{[1]=1}
  uint8          task_complete;		// 0为未完成（领奖）1为完成（领奖）
};
// 预言之书任务结构
struct ProphecyInfo
{
	pb_uint32         book_id;	 // 大类ID
	uint64 		   role_id;	 // 角色ID
	uint8          book_progress;			// 进度 完成任务数
	uint8          book_complete;			// 0为未完成（领奖）、1为完成（领奖）				 
	vector<ProphecyTaskInfo> task_list;		// 任务列表
};

// 刷新任务状态
struct GS2U_ProphecyUpdate <-
{
	vector<ProphecyInfo>   book_list;				  // 所有类列表
};

// 任务领奖
struct U2GS_AcceptingAnAward ->
{
    uint32         book_id;	 // 大类ID
	uint64 		   role_id;	 // 角色ID	
	uint32         task_id;	 // 任务ID 为0时表示领取该大类奖励
};
struct GS2U_AcceptingAnAwardRet <-
{
	uint32         book_id;		// 大类id
	uint64 		   role_id;		// 角色ID
	uint32         task_id;		// 任务ID 为0时表示领取该大类奖励
	uint32         err_code;	// 0-成功，非0-错误原因
};

// 一键领取
struct U2GS_prophecy_one_key_reward_req ->
{
    uint32         book_id;	 // 大类ID
	uint64 		   role_id;	 // 角色ID	
	vector<uint32>         task_list;	 // 任务ID列表 [task_id]
};
struct GS2U_prophecy_one_key_reward_ret <-
{
	uint32         book_id;		// 大类id
	uint64 		   role_id;		// 角色ID
	vector<uint32>         task_list;	 // 任务ID列表 [task_id]
	uint32         err_code;	// 0-成功，非0-错误原因
};

// --------------------------------预言之书 end-----------------------------
//------------------王者1v1 start--------------------------------------
//获取基础信息
struct U2GS_GetOneFightInfo ->
{
	
};
struct GS2U_GetOneFightRet <-
{
	uint8				season;//第几赛季
	uint32				seasonStartTime;//赛季开始的时间戳
	uint32				seasonEndTime;//赛季结束的时间戳
	uint32				activityStartTime;
	uint32				activityStopTime;
	uint16				punishTime;//大于0表示剩余惩罚时间秒，为0表示无惩罚状态
	uint8				office;//段位
	uint32				score;//积分	
	uint8				fightCount;//可用挑战次数
	uint8				buyHistory;//今日已购买次数
	uint8               changedCount;//今日已挑战次数
	uint16              rank;//排名
	bool                isGetDayAward;//每日段位奖励是否已经领取
};

//开始、取消匹配
struct U2GS_ChangeOneFightMatchState ->
{
	uint8				state;//0取消匹配 1进入匹配
};
struct GS2U_ChangeOneFightMatchStateRet <-
{
	uint				result;//0表示成功，其他表示错误原因
	uint8				state;//0取消匹配 1进入匹配
};
// 匹配成功的通知
struct GS2U_OneFightMatchSucceed <-
{	
	uint64  			player_id;  // 对方Id
	uint8				office;		// 对方段位
};
struct GS2U_OneFightOfficeChange<-
{	
	uint8		oldOffice;//原官职	
	uint8		office;//官职
};
//获取1v1任务数据
struct U2GS_GetOneFightRingAttainment ->
{
	
};
struct OneFightRingAttainment
{
	uint				attainmentDataID;//成就配置ID
	uint				value;//当前值（比如进入次数，5代表进入了5次）
	uint8				isAward;//是否已经领取了奖励 0未领取;1已领取
	uint				value2;//当前值2
};
struct GS2U_OneFightRingAttainmentRet<-
{
	vector<OneFightRingAttainment>	infoList;
};

//任务领奖
struct U2GS_GainOneFightRingAttainment ->
{
	uint				attainmentDataID;//成就配置ID
};
struct GS2U_GainOneFightRingAttainmentRet <-
{
	uint				result;
	uint				attainmentDataID;//成就配置ID
};

//领取每日段位奖励
struct U2GS_GainOneFightDailyAward ->
{
}
struct GS2U_GainOneFightDailyAwardRet <-
{
	uint				result;	
};

//对战记录
struct U2GS_GetOneFightHistory ->
{
};
struct OneFightRingInfo
{
	uint32	time; //时间作为索引 秒
	uint8	isWin;  //0胜利，1失败，2平局
	string  playerName;
	string  serverName;
};
struct GS2U_GetOneFightHistoryRet <-
{
	vector<OneFightRingInfo>  historyList;
};

struct GS2U_OneFightSettleResult <-
{
	uint8   isWin;                  //0胜利，1失败，2平局
	uint8   winNum;                  //连胜数
	uint8   score;                  //获得积分
	uint64  playerID;               // 玩家ID
    string  playerName;             // 玩家名
	string  serverName;
	uint16  office;				 // 玩家段位   
	uint32  career;					// 玩家职业
	LookInfoPlayer4UI player_ui;
}

//------------------王者1v1 end----------------------------------------------------------------------------

// 邀请购买情侣试炼次数
struct U2GS_inviteBuyGroupFightCount ->
{
	
};
struct GS2U_inviteBuyGroupFightCountResult <-
{
	uint32		result;	// 反馈
};
struct GS2U_sendInviteBuyGroupFightCount <-
{
	
};

// 请求情侣试炼主界面信息
struct U2GS_getDungeonCoupleInfo ->
{
	
};
// 情侣的信息
struct dungeon_couple_info
{
	uint64		playerID;		// 玩家ID
	string		name;			// 玩家名字
	uint16		level;			// 等级
	uint16		career;			// 职业
	uint32		wing_cfg_id;	// 翅膀ID
	uint32		titleID;		// 称号ID
	uint32		honor_id;		// 头衔ID
	uint8		is_online;		// 是否在线（1：在线 0：不在线）
	equipment_view	equipment;	// 穿戴装备
	uint32		weapon_id;		// 神兵id
	uint8		weapon_vfx;		// 神兵特效
	uint32		weapon_level;	// 神兵阶数
	uint32		weapon_star;	// 神兵星级
	uint32  ancient_holy_eq_id;         // 古神圣装最低品质装备配置id
    uint32  ancient_holy_eq_enhance_level;  // 古神圣装最低强化等
};
struct GS2U_sendDungeonCoupleInfo <-
{
	uint8  	maxFightCount;		// 最大挑战次数
	uint8  	fightCount;			// 已使用挑战次数
	uint8 	buyFightCountDay;	//今日购买的额次数
	dungeon_couple_info couple_info;	// 情侣的信息
};

// 默契大考验发送选中的3张图片
struct GS2U_sendChallengePic <-
{
	vector<uint32>		pic_list;
};
// 玩家选择图片
struct U2GS_playerChoicePic ->
{
	uint32		pic_id;
};
//情侣副本结算信息
struct GS2U_DungeonCoupleSettleAccounts <-
{
	uint32				dungeonID;//根据地图返回相应配置ID
	uint8				isWin;//1:胜利;0:失败
	uint8				isSuc;// 默契挑战是否成功
	uint64				exp;
	uint32				intimacy;	// 增加的亲密度
	vector<string>		name_list;	// 好友名列表
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				settleType;//结算类型
};




//--------------------------------------技能天赋  新----------------------------------------------
// 玩家技能结构
struct SkillBase
{
	pb_uint16				index;			// 技能位
	pb_uint32				skill_id;		// 技能id
	pb_uint16				skill_level;	// 技能等级
	pb_uint16				break_lv;		// 突破等级
	pb_uint16				awaken_lv;		// 觉醒等级
	pb_uint16              exp;            // 当前经验
};

// 上线推送技能信息
struct role_skill
{
    uint64  				role_id;            // 角色Id
	vector<SkillBase>	    skill_list;
	vector<BindSkillBase>	bind_skill_list_by_hand;    // 操作位上的技能-手动技能
	vector<BindSkillBase>	bind_skill_list;    // 操作位上的技能-自动技能
	vector<uint8>	        bind_skills_normal; // 绑定到普攻的技能
};
struct GS2U_SyncPlayerSkillList <-
{
    vector<role_skill>		role_skill_list;    // 角色技能列表
};

// 技能升级
struct U2GS_SkillLevelUp ->
{
	uint64				role_id;		// 角色Id
	uint16				skill_index;	// 技能位
};
struct GS2U_SkillLevelUpRet <-
{
	uint32				err_code;		// 错误码
	uint64				role_id;		// 角色Id
	uint16				skill_index;	// 技能位
	uint16				skill_lv;		// 等级
};

// 技能觉醒突破
struct U2GS_SkillStateUp ->
{
    uint64			role_id;    // 角色Id
	uint16			index;		// 技能位
	uint8			state;		// 状态
};
struct GS2U_SkillStateUpRet <-
{
	uint32			err_code;	// 错误码
    uint64			role_id;    // 角色Id
	uint16			index;		// 技能位
	uint8			state;		// 状态
	uint16			level;		// 等级
};

// 装配技能
struct U2GS_RequestBindSkill ->
{
    uint64				role_id;     // 角色Id
	uint8				type;		 // 技能类型 ： 0自动技能 1手动技能
    vector<BindSkillBase>  bind_list; // 请求绑定的技能
};
struct GS2U_RequestBindSkillRet <-
{
	uint32					err_code;       // 错误码
    uint64					role_id;        // 角色Id
	uint8					type;		 // 技能类型 ： 0自动技能 1手动技能
	vector<BindSkillBase>   new_bind_list;  // 刷新一次所以的绑定信息
};

// 技能重置
struct U2GS_SkillReset ->
{
};
struct GS2U_SkillResetRet <-
{
	uint32			err_code;	// 错误码
};

//--------------------------------------技能天赋  新  END----------------------------------------------
// 玩家分战力
struct battle_value_part
{
	uint64  role_id;				  // 角色id
	vector<key_big_value>  part_list; // key 战力索引 value 我的战力值
};

// 上线同步推送所有  更新的时候推送改变的
struct GS2U_BattleValuePartSync <-
{
	vector<battle_value_part>  list;
};

// -----------------------------------任务成就系统---------------------------
// 通知客户端有任务成就完成
struct GS2U_sendReachAttainment <-
{
	uint32				id;
};

struct attainmentReachInfo
{
	uint32				id;
	uint8				isGet;	// 是否领奖（0:没领奖 1:已领奖）
};
// 玩家请求任务成就达成信息
struct U2GS_getAttainmentReachList ->
{

};
// 给玩家发送已达成的任务成就信息
struct GS2U_sendAttainmentReachList <-
{
	vector<attainmentReachInfo> reachList;
};

// 一键完成成就
struct U2GS_getAttainmentReward ->
{
	vector<int> prize_list;	//领奖列表
};
// 一键完成 成就返回
struct GS2U_getAttainmentRewardRet <-
{
	uint32         err_code;   // 0-成功，非0-错误原因
};

struct attainmentProgress
{
	uint32				id;
	int					progress;
};

// 请求成就任务进度
struct U2GS_getAttainmentProgress ->
{
};

// 发送成就任务进度
struct GS2U_sendAttainmentProgress <-
{

	vector<attainmentProgress> progressList;
};

// -----------------------------------任务成就系统 end-----------------------


// -----------------------天赋---------------------------
//天赋
struct genius
{
	uint8	type;	//类型
	uint8	index;	//索引
	uint8	level;	//等级
};

//同步
struct GS2U_GeniusSync <-
{
	vector<genius> genius_info;	//天赋列表
};

//请求升级天赋
struct U2GS_UpgradeGenius ->
{
	uint8	type;	//类型
	uint8	index;	//索引
};

//请求升级天赋回复
struct GS2U_UpgradeGeniusRet <-
{
	uint32	err_code;	//错误码
	uint8	type;		//类型
	uint8	index;		//索引
	uint8	level;		//等级
};

//请求重置天赋
struct U2GS_ResetGenius ->
{
};

//请求重置天赋回复
struct GS2U_ResetGeniusRet <-
{
	uint32	err_code;	//错误码
};
// ---------------------天赋 end-------------------------

// 推给全图玩家，天魔Boss刷新
struct GS2U_demonBossLife <-
{
	uint32		map_data_id;
	uint32		boss_id;
	uint32		dead_time;
	uint8       index;
};

// 查看装备信息
struct U2GS_ShowEqInfo ->
{
	uint8	  type;				// 0默认，1在跨服寄售行中，2在寄售行，可下架
  uint64  eq_uid;			// 
};
struct GS2U_ShowEqInfoRet <-
{
    uint32  err_code;			// 0-成功，非0-错误原因
    uint64  eq_uid;			// 目标角色ID
    EqInfo  eq_info;	// 成功后有意义，神器信息
	dark_flame_eq df_eq_info; // 暗炎魔装
	ShengWen  shengwen_info;   // 圣纹信息
};
struct GS2U_show_holy_wing_info_ret <-
{
    uint32  err_code;			// 0-成功，非0-错误原因
    uint64  eq_uid;			    // 交易条目id
    holy_wing  eq_info;	        // 圣翼信息
};

// 重复获得物品奖励
// type 1-坐骑 2-翅膀 3-宠物 4-主战龙神 5-精灵龙神 6-龙神武器 7-圣物
struct GS2U_DuplicateReward <-
{
	uint8			type;			//物品类型(1:xx,...)
	uint32			id;				//物品id
	vector<CoinInfo> coin_list;		//获得的货币
	vector<itemInfo> item_list;		//获得的物品
};

// 获取指定功能开启时间
struct U2GS_getFuncOpenTime ->
{
	vector<uint32>	id_list;
};
struct funcOpenTime
{
	pb_uint32		id;		// 功能ID
	uint32		time;	// 开启时间
    uint32		time2;	// 提示时间
};
struct GS2U_sendFuncOpenTime <-
{
	vector<funcOpenTime> open_list;
};

// 挂机设置
struct U2GS_hangAutoSetting ->
{
	uint8		type;		// (1:自动使用 2:自动购买)
	uint8		itemType;	// 物品类型（仅type=1时使用， 3:3倍药水 2:2倍药水 1:1.5倍药水）
	uint8		is_open;	// 1:开  0:关
};
struct GS2U_hangAutoSettingResult <- 
{
	uint8		type;		// (1:自动使用 2:自动购买)
	uint8		itemType;	// 物品类型（仅type=1时使用， 3:3倍药水 2:2倍药水 1:1.5倍药水）
	uint32		result;
};

// 退出游戏
struct U2GS_Logout ->
{
};

// 聊天表情
// 推送激活的表情ID   (在玩家上线或者激活表情的时候发送)
struct GS2U_EmojiList__6474 <-
{
  vector<uint32>   emojiIDList;	        // 激活的表情ID
};

struct U2GS_SendEmoji__6475 ->
{
	uint32    emojiID;              //  表情ID
};
struct GS2U_SendEmojiRet__6476 <-
{
  uint32    errCode;             
	uint32    emojiID;              //  表情ID
};
struct GS2U_EmojiActiveByLevelUp__6478 <-
{           
	vector<uint32>   emojiIDList;	        // 达到等级激活的表情ID
};

struct U2GS_enterDungeonTeamExp__6479 ->
{
	uint32 		dungeonID;//关卡ID
	uint16		mergeTimes;	// 合并次数
};


//--------------------------------------战盟争霸 GuildCraft----------------------------------------------

// 查看活动对战信息
struct U2GS_RequestGCInfo ->
{
};
// 参赛战盟信息
struct gc_team
{
  string name;     // 战盟名字
  string server_name;     // 战盟名字
  uint8  group_id; // 相同组的在一起打  为0表示还没开始匹配
};
struct GS2U_RequestGCInfoRet <-
{
	vector<gc_team>   s;   // 各个区的参赛信息
	vector<gc_team>   a;
	vector<gc_team>   b;
	vector<gc_team>   c;
	vector<gc_team>   d;
	// 0- 今天不开活动
	// 1- 今天开活动 day_second 今天活动开启的秒数
	uint8  state;      
	uint32 day_second;  
};

// 请求下次活动开启时间
struct U2GS_RequestGCNextStartTime ->
{
};
struct GS2U_RequestGCNextStartTimeRet <-
{ 
	uint32 timestamp;  
};


// 查看主宰神殿
struct U2GS_RequestGCResult ->
{
};
// 霸主信息
struct gc_overlord
{
  LookInfoPlayer4UI   ui_info;//显示相关信息
  uint8  rank;        // 军团的rank  66-盟主的伴侣
};
struct GS2U_RequestGCResultRet <-
{
	vector<gc_overlord>   overloads;   // 各个区的参赛信息
	string  guild_name;        // 名字
	string  server_name;        // 名字
	uint32  t1;   // 连霸次数
	uint32  t2;   // 终结连霸次数
	
	uint8  zone;   // 我的战盟所在的区域
	uint8  rank;   // 我的战盟所在的区域的排名
};

// 领取俸禄  奖励直接弹恭喜获得
struct U2GS_GCGetDailyAward ->
{
};
struct GS2U_GCGetDailyAwardRet <-
{
	uint32 err_code;
};

// ---------地图内协议

// 请求进入地图
struct U2GS_RequestEnterGC ->
{
};

// 地图
struct gc_map_team
{
  uint8   color;        // 1-黄  2-蓝
  string  name;        // 名字
  string  server_name;        // 名字
  uint32  point;        // 积分
  uint16  num_person;          // 人数
  uint16  num_flag;          // 占领的战旗数
};
struct GS2U_GCMapInfo <-
{
  uint8     stage;   // 当前阶段
	vector<gc_map_team>   teams;   // 各个区的参赛信息
	uint8      boss1_state; // Boss状态 0 -未刷新 1-刷新 2-死亡
	uint8      boss2_state; 
};

// 地图内数据刷新
struct GS2U_GCMapBossStateUpdate <-
{
   uint8      boss1_state; // Boss状态 0 -未刷新 1-刷新 2-死亡
	 uint8      boss2_state; 
};

struct gc_map_team_update
{
  uint8   color;
  uint8   key;    // 1-积分  2-人数   3-占领的战旗数
  uint32  value;          // 占领的战旗数
};
// 地图内数据刷新
struct GS2U_GCMapTeamUpdate <-
{
   vector<gc_map_team_update>   updates;   // 
};

// 结算时候的排行榜
struct gc_player_rank_settle
{
  uint8   rank;
  string  player_name;       // 玩家名字
  string  guild_name;       // 玩家名字
  string  server_name;        // 
  uint32 	career_id;           // 职业ID
  uint32 	head_id;           // 头像ID
	uint32 	frame;	           // 头像框ID
	uint64 	battle;	           // 战力
  uint32  point;              // 积分
  uint32  nationality_id;        // 区域id
};
struct GS2U_GCMapTeamRankSettle <-
{
   vector<gc_player_rank_settle>   rank;   //    
   uint8   my_rank;    
   uint32  my_point;        
};


// 玩家积分
struct gc_player_rank
{
  uint8   rank;
  string  player_name;       // 玩家名字
  string  guild_name;        // 玩家名字
  string  server_name;        // 
  uint16  flag_num;          // 采集旗子数
  uint16  kill_num;          // 杀敌数
  uint32  point;              // 积分
  uint32  nationality_id;        // 区域id
};
struct GS2U_GCMapTeamRank <-
{
   vector<gc_player_rank>   ranks;   // 
   uint16  my_flag_num;          
   uint8   my_rank;  
   uint16  my_kill_num;         
   uint32  my_point;        
};
// 结算
struct GS2U_GCResult <-
{
	uint8				isWin;//0:失败 1:胜利
	vector<Dialog_Item>  items;
  vector<Dialog_Coin>  coins;
  vector<EqInfo>    eqs;
};

struct GS2U_GCSatetSync <-
{   
  uint8  state;   // 11-第一阶段开始  12-第一阶段结束  21-第二阶段开始  22-第二阶段结束
};

//--------------------------------------战盟争霸 GuildCraft END----------------------------------------------};
// 通用概率公示
struct U2GS_getBrobabilityText ->
{
	uint32       id;    //活动ID
};

// 通用概率公示返回
struct GS2U_getBrobabilityTextRet <-
{
	uint32       id;    //活动ID
	string     bro_text;  // 公示文字
};

// 天神祈福
struct blessInfo
{
	uint32		id;			// 祈福ID 
	uint8		free_count;	// 免费次数
	uint32		bless_time;	// 祈福时间
	uint8		day_count;	// 今日祈福次数
	uint32		bless_count;// 祈福总次数
};

struct U2GS_getBlessData ->
{
	
};
struct GS2U_sendBlessData <-
{
	vector<blessInfo> bless_list;
};

struct U2GS_blessGift ->
{
	uint32		id;			// 祈福ID
	uint8		is_free;	// 是否免费祈福（0：不是 1：是）
};
struct GS2U_blessGiftResult <-
{
	uint32		id;			// 祈福ID
	uint8		is_free;	// 是否免费祈福（0：不是 1：是）
	uint64		exp;		// 获得Exp
	uint64		coin;		// 获得金币
	uint8		crit;		// 是否暴击倍数(0表示未暴击)
	uint32		result;	
};

// ------------------ 0元购 --------------------
// 0元购数据结构
struct FreeBuyData
{
	uint32	id;			// 奖励ID
	uint32	buy_time;	// 购买时间
};

// 请求0元购数据
struct U2GS_FreeBuyDataReq ->
{
};

// 0元购数据同步
struct GS2U_FreeBuyDataSync <-
{
	uint32	func_start_time;		// 零元购功能开启时间
	vector<FreeBuyData>	data_list;	// 数据列表
};

// 购买请求
struct U2GS_FreeShoppingReq ->
{
	uint32	id;		// 奖励ID
};

// 购买请求返回
struct GS2U_FreeShoppingRet <-
{
	uint32	err_code;	// 错误码
	FreeBuyData	data;	// 购买数据
};

// 领取奖励请求
struct U2GS_GetFreeBuyGiftReq ->
{
	uint32	id;		// 奖励ID
};

// 领取奖励返回
struct GS2U_GetFreeBuyGiftRet <-
{
	uint32	err_code;	// 错误码
	uint32	id;			// 奖励ID
};
// ---------------- 0元购 end ------------------




//--------------------------------------XO-ROOM----------------------------------------------

// 查看主界面信息
struct U2GS_RequestXOInfo ->
{
};
struct GS2U_RequestXOInfoRet <-
{
	uint8   server_type;
	uint32  start_time;
	uint32  end_time;
};

// 排行榜
struct xo_rank
{ 
  uint16 rank;
  uint64 player_id;
  string name;
  string guild_name;
  uint16 right_num;  // 答对次数
  uint32 point;
  string serverName;//服务器名
  uint32 nationality_id;   // 区域id

};
struct U2GS_RequestXOUIRank ->
{
};
struct GS2U_RequestXOUIRankRet <-
{
    vector<xo_rank> ranks;
    uint16 my_right_num;  // 答对次数
    uint32 my_point;
    uint16 my_rank;
	string my_server;	//服务器名
};

// 进地图
struct U2GS_RequestXOEnterMap ->
{
};


struct GS2U_XOState <-
{
	uint8   state;			 // 地图副本状态：1-准备阶段、2-等待答题结束(答题中)、3-等待公布答案   4-等待答题 5-题目答完了 等待时间走完
	uint8   question_index;  // 这是第几道题
	string   question;
	uint32  answer;
	uint32  start_time;	 // 开始时间 下一个阶段开始时间
};

// 参赛人数  答题开始前同步
struct GS2U_XOJoinNum <-
{
  uint32 num; 
};

struct xo_player_rank
{ 
  string name;
  string serverName;
  uint32 point;
  uint32 nationality_id;        // 区域id
};
// 每次答题结束的时候同步
struct GS2U_XORankInfoSync <-
{
	vector<xo_player_rank>   ranks;   // 前三名
	uint32      my_point; 
	uint64      my_exp; 
	uint32      actor_num;  // 台上的人数
	bool        is_right;   
	bool        is_viewer;   // 是否是观众
};

struct GS2U_XOIsBet <-
{
	bool	is_bet; // 是否竞猜
	vector<xo_player_rank>   ranks;   // 前三名
	uint32      my_point;
	uint64      my_exp; 
	uint32      actor_num;  // 台上的人数
	bool        is_viewer;   // 是否是观众
};

// 玩家回答题目的统计
struct GS2U_XOAnswerStat <-
{
	uint16      x_num;  // 选X的人数
	uint16      o_num; 
};

// 玩家进入X/O区域
struct U2GS_XOEnterArea ->
{
  uint8     type;  //  1:O 2:X 
};
struct GS2U_XOEnterAreaRet <-
{
  uint32    err_code;
  uint8     type;  
};
// 玩家退出X/O区域
struct U2GS_XOExitArea ->
{
  uint8     type;  // 1:O 2:X 
};
struct GS2U_XOExitAreaRet <-
{
  uint32    err_code;
  uint8     type;  
};
// 答题
struct U2GS_XOReply ->
{
  uint8     answer;  // 1:O 2:X 
};
struct GS2U_XOReplyRet <-
{
  uint32    err_code;
  uint8     answer;  
};
//---------------
//排行信息
struct xo_rank_info
{ 
  uint8 rank; //排名
  string name;//姓名
  string serverName;//服务器名
  uint32 diamond;//钻石
  uint32 nationality_id;   // 区域id

};

// 竞猜结果信息
struct BetInfo
{ 
  uint8 id;   
  uint8 is_beted;//自己是否竞猜 1竞猜 2未竞猜
  uint32 my_bet_rank;//我的竞猜排行
  uint32 my_bet_diamond;//我的竞猜获得的钻石
  vector<xo_rank_info>  ranks;//排行榜
};

// 结算
struct GS2U_XOResult <-
{
  uint32      my_point;   // 我的积分
	uint32      my_rank;      // 我的排名
	uint32      my_right_num;   // 我答对的题目
	string       player_name;   // 第一名玩家的名字
	string       firstServerName;   // 第一名玩家的服务器名字
	vector<Dialog_Item>  items;
  vector<Dialog_Coin>  coins;
  vector<EqInfo>    eqs;
  vector<BetInfo>    bet_infos;
  string       bet_player_name;   // 竞猜获得钻石第一名玩家的名字
};

// 竞猜
struct U2GS_XOBetUI ->
{
};
struct xo_bet
{ 
  uint8 id;
  uint32 reslut;
  uint32 num;
};

struct xo_odds
{ 
  uint8 index;
  uint32 num;
};

struct GS2U_XOBetUIRet <-
{
  vector<xo_bet>     bets;  
  vector<xo_odds>    odds; 
};

struct U2GS_XOBet ->
{
  uint8     id;       // 
  uint8     result;   // 
  uint32     num;   // 
};
struct GS2U_XOBetRet <-
{
  uint32    err_code;
  uint8     id;  
  uint32    num;
};


struct GS2U_XOBetOdds <-
{
  vector<xo_odds>    odds;  
};
//--------------------------------------XO-ROOM END----------------------------------------------

// ----------------------- 基金 ------------------------
// 基金购买结构
struct FundsBuy
{
	uint8	fund_type;	// 基金类型
	uint8	plan;		// 方案
	uint32	buy_time;	// 购买时间
};

// 基金领奖结构
struct FundsAward
{
	uint8	fund_type;	// 基金类型
	uint32	award_id;	// 奖励ID
	uint8	plan;		// 方案
	uint8	isGet; // 已领取免费 1，全部领取完 2
};
// 基金领奖返回结构
struct FundsAwardRet
{
	uint32	award_id;	// 奖励ID
	uint8	isGet; // 已领取免费 1，全部领取完 2
}

// 基金购买情况同步
struct GS2U_FundsBuyInfoSync <-
{
	vector<FundsBuy>	buy_info;	// 基金购买情况
};

// 基金领奖情况同步
struct GS2U_FundsAwardInfoSync <-
{
	vector<FundsAward>	award_info;	// 基金领奖情况
};

// 全民奖励领奖情况同步
struct GS2U_FundsAllAwardInfoSync <-
{
	vector<uint32>	award_list;		// 全民奖励领奖ID列表
};

// 购买基金请求
struct U2GS_FundsBuyReq ->
{
	uint8	fund_type;	// 基金类型
	uint8	plan;		// 方案
};

// 购买基金返回
struct U2GS_FundsBuyRet <-
{
	uint32		err_code;	// 错误码
	FundsBuy	data;		// 购买数据
};

// 基金领奖请求
struct U2GS_FundsAwardReq ->
{
	uint8	fund_type;	// 基金类型
	uint8	plan;		// 方案
	uint32	award_id;	// 奖励ID
};

// 基金领奖返回
struct U2GS_FundsAwardRet <-
{
	uint32		err_code;	// 错误码
	uint8	fund_type;	// 基金类型
	vector<FundsAwardRet>	award_id;	// 领取的奖励ID列表
	uint8	plan;		// 方案
};

// 全民奖励领奖请求
struct U2GS_FundsAllAwardReq ->
{
	vector<uint32>	award_id_list;		// 奖励ID列表
};

// 全民奖励领奖返回
struct GS2U_FundsAllAwardRet <-
{
	uint32	err_code;		// 错误码
	vector<uint32>	award_id_list;	// 奖励ID列表
};

// 基金 每日免费礼包
struct U2GS_FundsDailyGiftReq ->
{
};
struct GS2U_FundsDailyGiftRet <-
{
  uint32  error;                // 错误码
};
// --------------------- 基金 end ----------------------
// ----------------------- 理财 ------------------------
// 理财购买结构
struct FinancingBuy
{
	uint8	type;		// 类型(1:月理财,2:周理财)
	uint8	grade;		// 档位
	uint32	lv;			// 等级
	uint32	buy_time;	// 购买时间
};

// 理财领奖结构
struct FinancingAward
{
	uint8	type;		// 类型(1:月理财,2:周理财)
	uint8	grade;		// 档位
	uint32	award_id;	// 奖励ID
};

// 理财购买情况同步
struct GS2U_FinancingBuyInfoSync <-
{
	vector<FinancingBuy>	buy_info;	// 理财购买情况
};

// 理财领奖情况同步
struct GS2U_FinancingAwardInfoSync <-
{
	vector<FinancingAward>	award_info;	// 理财领奖情况
};

// 购买理财请求
struct U2GS_FinancingBuyReq ->
{
	uint8	type;		// 类型(1:月理财,2:周理财)
};

// 购买理财返回
struct U2GS_FinancingBuyRet <-
{
	uint32			err_code;	// 错误码
	FinancingBuy	data;		// 购买数据
};

// 理财领奖请求
struct U2GS_FinancingAwardReq ->
{
	uint8	type;		// 类型(1:月理财,2:周理财)
	uint8	grade;		// 档位
	uint32	award_id;	// 奖励ID
};

// 理财领奖返回
struct U2GS_FinancingAwardRet <-
{
	uint32			err_code;	// 错误码
	FinancingAward	data;		// 领奖数据
};

// 月理财 每日免费礼包
struct U2GS_MouthFinancingDailyGiftReq ->
{
};
struct GS2U_MouthFinancingDailyGiftRet <-
{
	uint32  error;		// 错误码
};

// --------------------- 理财 end ----------------------


//--------------------------------------战盟拍卖guild_auction----------------------------------------------

// 竞拍物品
struct ga_item
{ 
  uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用
  uint8    ac_id;  // 1-守卫战盟 2-战盟争霸
  uint8    ac_type;	// 0-竞拍，1-个人限购
  uint32   item_id;
  uint8    bind;  // 是否绑定
  uint32   cur_buy;     // 已购买次数
  uint32   max_buy;		// 限购次数
  vector<EqInfo>   eq;      
  bool     bought;  // 是否被一口价买了
  string   player_name;  // 最后竞标的人 
  uint8    times;  // 当前是第X次竞拍 
  
  uint8    curr_type;   // 货币类型
  uint32   init_cost;   // 初始价格
  uint32   add_cost;    // 每次加价
  uint32   max_cost;    // 一口价
  uint32   cost_price;    // 一口价
  uint8    can_bid;     // 是否有购买权限 0-否 1-是
  uint8    bid_state;  // 0-可竞拍 1-有权限可竞拍 2-等待权限时间结束(结束后变为0)
  uint8    source_id;   // 来源标记 不同玩法中的意义不同
};
struct ga_item_refresh
{ 
  uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用    
  bool     bought;  // 是否被一口价买了
  string   player_name;  // 最后竞标的人 
  uint8    times;  // 当前是第X次竞拍 
  uint32   cur_buy;     // 已购买次数
  uint8    bid_state; // 0-可竞拍 1-有权限可竞拍 2-等待权限时间结束(结束后变为0)
};

// 显示红点 1.登录  2.开始竞拍
struct GS2U_GARedDotShow <-
{
  vector<uint8>    ac_ids;  // 1-守卫战盟 2-战盟争霸
};

// 查看主界面信息
struct U2GS_RequestGAInfo ->
{
};
struct ga_ac_info
{ 
  uint8    ac_id;  // 1-守卫战盟 2-战盟争霸
  uint32   player_num;   // 有资格竞拍的人数    
  bool     self_can_profit;   // 自己是否可以获得分红
  uint32   tax;  // 税率 x000 需要除以10000才是百分比
  uint32   end_time;  // 结束时间
  uint32   authority_end_time;  // 分配权限结束时间  
  uint64   authority_player_id; // 有分配权限的玩家
};
struct GS2U_RequestGAInfoRet <-
{
    uint32   err_code;
    vector<ga_item>  info;
    vector<ga_ac_info>  ac_info;
};
 // 关闭竞拍界面 不会发更新消息了
struct U2GS_CloseGAUI ->
{
};

struct GS2U_GAItemRefresh <-
{
    vector<ga_item_refresh>  list;
};

// 出价
struct U2GS_GABid ->
{ 
  uint64   ga_id;  
  uint8    times;  // 当前是第X次竞拍 
};
struct GS2U_GABidRet <-
{
    uint32   err_code;
};

// 有人出价更高、正在竞拍的被人一口价买了
struct GS2U_GABidBeyondMe <-
{
    ga_item_refresh  info;
};

// 一口价购买
struct U2GS_GABuyImmediate ->
{ 
  uint64   ga_id;  
  uint32   amount;	// 数量(仅在个人限购生效)
};
struct GS2U_GABuyImmediateRet <-
{
    uint32   err_code;
};

// 查看拍卖记录
struct U2GS_GAHistory ->
{ 
  uint8   ac_id;   // 活动id
};
struct ga_item_record
{ 
 
  uint32   item_id;
  uint8    bind;  // 是否绑定
  vector<EqInfo>   eq;  
  uint8    type;  // 1-竞猜获得 2-一口价获得
  uint32   time;
  string   player_name;
  uint8    curr_type;   // 货币类型
  uint32   curr;         // 货币数量
};
struct GS2U_GAHistoryRet <-
{
    uint8    ac_id;  // 1-守卫战盟 2-战盟争霸
    vector<ga_item_record>   records;
};


// 查看分红记录
struct U2GS_GAProfitHistory ->
{ 
  uint8   ac_id;   // 活动id
};
struct GS2U_GAProfitHistoryRet <-
{
  uint8    ac_id;  // 1-守卫战盟 2-战盟争霸
  uint32   time;
  vector<key_2value> curr_list; // key 货币类型 value1 总货币 value2 每人获得
  uint16   player_num;         // 参加活动的人数
  bool     self_can_profit;   // 自己是否获得了分红
  uint32   tax;  // 税率 x000 需要除以10000才是百分比
  vector<string>   names;         // 所有的玩家名字
};

struct U2GS_GetGaTotalCurr ->
{
  uint8   ac_id;   // 活动id
};
struct GS2U_GetGaTotalCurrRet <-
{
    uint8   ac_id;   // 活动id
    vector<key_value>   total_curr;         // 总货币
};

struct U2GS_set_bid_authority ->
{
	uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用
	uint8    type; // 0-指定成员 1-全部成员
	vector<uint64> player_id_list;

};
struct GS2U_set_bid_authority_ret <-
{
	uint32   err_code; // 错误码
	uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用
	uint8    type; // 0-指定成员 1-全部成员
	vector<uint64> player_id_list;
};
struct U2GS_get_bid_authority ->
{
	uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用
};
struct GS2U_get_bid_authority_ret <-
{
	uint32   err_code; // 错误码
	uint64   ga_id;   // 竞拍系统维护的一个id 用于更新使用
	uint8    type; // 0-指定成员 1-全部成员
	vector<uint64> player_id_list;
};

struct GS2U_get_authority_red <-
{
    uint8   ac_id;   // 活动id
    uint64  ga_id;   // 竞拍系统维护的一个id 用于更新使用
    uint8   is_operator; // 是否为操作者
    uint8   type; // 1-权限分配 2-获得拍卖权限 3-失去拍卖权限
};

//--------------------------------------战盟拍卖guild_auction END----------------------------------------------
// 助战列表
struct U2GS_getTeamAssistant ->
{
	
};

struct team_assistant_member
{
	uint64		id;				// 玩家ID
	uint8		rank;			// 战盟内排名
	uint32		invite_time;	// 上一次被邀请时间
	LookInfoPlayer4UI ui_info;
};

struct GS2U_send_team_assistant <-
{
	vector<team_assistant_member> member_list;
};

// 邀请助战
struct U2GS_invite_team_assistant ->
{
	uint64		id;			// 玩家ID
};
struct GS2U_invite_team_assistant_result <-
{
	uint64		id;			// 玩家ID
	uint32		result;	
};

// 终身卡领奖
struct U2GS_LifeCardFinish ->
{
	uint8  id;           // 1-终身卡、2-至尊终身卡
	uint8  type;		// 1-特权一、2-特权二
};
struct GS2U_LifeCardFinish <-
{
	uint8  id;           // 1-终身卡、2-至尊终身卡
	uint8  type;		// 1-特权一、2-特权二
	uint32  error;		// 错误码
};

// 终身卡 每日免费礼包
struct U2GS_LifeCardDailyGiftReq ->
{
};
struct GS2U_LifeCardDailyGiftRet <-
{
	uint32  error;		// 错误码
};

// 玩家货币推送
struct currency_pair
{
	uint8   id;				// 货币Id
	uint64  value;			// 货币值
};
// 上线时推送
struct GS2U_currency_list <-
{
	vector<currency_pair>  currencyList;	// 所有货币列表（只发非0值的货币）
};
// 变化时推送
struct GS2U_currency_update <-
{
	currency_pair  currency;	// 新的货币值
};


// 阶段奖励  炎魔试炼  魔龙洞窟
// 当前阶段  已经领了奖励的阶段 
struct GS2U_StageAwardNowStage <-
{
	uint8		stage; // 阶段 N
};
struct U2GS_GetStageAward ->
{
  uint8		stage; // 阶段 N+1
};
struct GS2U_GetStageAwardRet <-
{
	uint32	err_code; // 
	uint8		stage; // 阶段
};

// boss别表
struct GS2U_FireTheBossList <-
{
	vector<uint32>	boss_id; // 
};
// 集火Boss
struct U2GS_FireTheBoss ->
{
	uint32	boss_id; // 
};
// 正在被集火的Boss
struct GS2U_FireTheBoss <-
{
	uint32	boss_id; // 
};

//-----------------------------情侣月卡---------------------------------
// 购买情侣月卡请求
struct U2GS_CPMonthCardBuy ->
{
};

// 购买情侣月卡结果
struct GS2U_CPMonthCardBuy <-
{
	uint32		err_code;	// 错误码
	uint8		target;		// 对象：0购买结果 1获取月卡
};

// 请求赠送
struct U2GS_CPMonthCardRequest ->
{
};

// 请求赠送结果
struct GS2U_CPMonthCardRequest <-
{
	uint32		err_code;	// 错误码
	uint8		target;		// 对象：0请求结果 1cp请求赠送
};

// 回应请求
struct U2GS_CPMonthCardRequestResponse ->
{
	uint8		result;		// 结果：1同意 2拒绝
};

// 回应请求结果
struct GS2U_CPMonthCardRequestResponse <-
{
	uint32		err_code;	// 错误码
	uint8		target;		// 对象：0回应结果 1cp回应赠送
	uint8		result;		// 结果：1同意 2拒绝
};

// 情侣月卡信息同步
struct GS2U_CPMonthCardInfoSync <-
{
	uint32		expire_time;		// 过期时间：小于当前时间为未购买月卡
	uint32		award_info;			// 奖励领取情况：1位表示一次性奖励 2位表示每日奖励
	uint32		expire_time_pair;	// 对方月卡过期时间
};

// 领取奖励
struct U2GS_CPMonthCardAward ->
{
	uint8		award_type;	// 奖励类型：1一次性奖励 2每日奖励
};

// 领取奖励结果
struct GS2U_CPMonthCardAward <-
{
	uint32		err_code;	// 错误码
	uint8		award_type;	// 奖励类型
};
//---------------------------情侣月卡 end-------------------------------
// 获取婚礼期间获得的奖励
struct U2GS_get_wedding_reward_info ->
{
	
};
struct weddingAward
{
	uint32		time;		// 记录时间
	uint8		get_type;	// 获得类型（1：巡游礼盒 2：赠送贺礼 3：食用宴席）
	uint8		award_type;	// 1：货币 2：道具
	uint32		id;			// 道具ID/货币类型
	uint32		num;		// 数量
};
struct GS2U_send_wedding_reward_info <-
{
	vector<weddingAward> 	log_list;	// 获得奖励记录
};

// 获取婚礼地图信息GS2U_WeddingMarryMapInfo
struct U2GS_getWeddingMarryMapInfo ->
{
	
};
//-----------------------------vip引导---------------------------------
struct GS2U_VipGuideAward <-
{
	uint8	type;	// 类型
};
//---------------------------vip引导 end-------------------------------
//-----------------------------次数记录---------------------------------
struct LogTimes
{
	uint16	type;	// 类型
	uint32	times;	// 次数
};

struct GS2U_LogTimesSync <-
{
	vector<LogTimes> list;	// 更新列表
};
//---------------------------次数记录 end-------------------------------
//进入副本(走进入地图那一套)
struct U2GS_EnterDungeonDemonCopyMap ->
{
	uint 	dungeonID;//关卡ID
	uint8	is_clr_cd;	// 是否清除冷却(1:是 0:否)
};

// Buff球刷新提示
struct GS2U_BuffObjApperaVoiceSync <-
{ 
    uint8   type;   // 1. 战盟争霸 2. 守卫战盟  3. 血色争霸  4. 魔龙洞窟
};

//-----------------------------七日奖---------------------------------
// 任务信息
struct SevenTaskInfo
{
	uint32	group;		// 组
	uint32	day;		// 天数
	uint32	page;		// 分页
	uint32	id;			// 任务id
	vector<uint64>	progress;	// 进度
	bool	is_complete;// 完成标志(可领取标志)
	bool	is_get;		// 是否领取
    uint32	time;       // 开始时间
};

// 奖励信息
struct SevenAwardInfo
{
	uint32	group;		// 组
	uint32	id;			// 奖励id
};

// 七日奖信息请求
struct U2GS_SevenGiftInfoReq ->
{
};

// 七日奖信息同步
struct GS2U_SevenGiftInfoSync <-
{
	uint32	create_time;				// 角色创建时间
	uint32	group;						// 当前组
	uint64	pt;							// 当前积分
	vector<SevenTaskInfo>	task_list;	// 任务列表
	vector<SevenAwardInfo>	award_list;	// 奖励列表
};

// 福利购买请求
struct U2GS_SevenGiftBuyReq ->
{
	uint32	group;		// 组
	uint32	day;		// 天数
	uint32	page;		// 分页
	uint32	id;			// 任务id
};

// 福利购买结果
struct GS2U_SevenGiftBuyRet <-
{
	uint32	err_code;	// 错误码
	uint32	group;		// 组
	uint32	day;		// 天数
	uint32	page;		// 分页
	uint32	id;			// 任务id
};

// 领取任务奖励
struct U2GS_SevenTaskAwardReq ->
{
	uint32	group;		// 组
	uint32	day;		// 天数
	uint32	page;		// 分页
	uint32	id;			// 任务id
};

// 领取任务奖励结果
struct GS2U_SevenTaskAwardRet <-
{
	uint32	err_code;	// 错误码
	uint32	group;		// 组
	uint32	day;		// 天数
	uint32	page;		// 分页
	uint32	id;			// 任务id
};

// 领取积分奖励
struct U2GS_SevenPtAwardReq ->
{
	uint32	group;		// 组
	uint32	id;			// 奖励id
};

struct GS2U_SevenPtAwardRet <-
{
	uint32	err_code;	// 错误码
	uint32	group;		// 组
	uint32	id;			// 奖励id
};
//---------------------------七日奖 end-------------------------------


struct GS2U_EnergyUISync <-
{
	uint8	  type;	    // 0-在线恢复满  1-离线获得体力
	uint16	param;		// 离线恢复的值
};

// 小飞鞋传送
struct U2GS_TaskFlyToDest ->
{
	uint32	map_cfg_id;		// 组
	uint32	x;			// 
	uint32	y;			// 
};
struct GS2U_TaskFlyToDestRet <-
{
	uint32	err_code;
};


// 自动清除战盟仓库设置
struct U2GS_GuildDepotAutoClearSet ->
{
    bool   enable;
    uint8  chara; 
    uint8  star; 
    uint8  order; 
};
struct GS2U_GuildDepotAutoClearSet <-
{
	uint32	err_code;
};
// 自动清除战盟仓库设置推送 、请求战盟的时候和被更新的时候推送
struct GS2U_GuildDepotAutoClearStateSync <-
{
	  bool   enable;
    uint8  chara; 
    uint8  star; 
    uint8  order;
};

// 弹劾
struct U2GS_GuildImpeach ->
{
};
struct GS2U_GuildImpeachRet <-
{
	uint32	err_code;
};

//世界服--start---
//推送当前世界服预告状态
struct GS2U_WorldServerForeShowInfo <-
{
	uint8 state;//0：未到预告阶段，1：连服预告，2：连服开启打宝预告：3：打宝开启，4龙城未做完时没有预告，5：龙城预告，6：龙城开启，7龙城争霸未做完时预告，8：龙城争霸预告9：预告结束，常态显示
	uint64 time;//预告还有多少时间开启功能，1,2，5,8阶段有效
	uint32 openProgress;//壁垒强度 2阶段生效	
    string	first_name;		// 排行榜第一名名字
};

//获取当前壁垒强度信息
struct U2GS_GetWorldServerOpenProgressInfo ->
{
};
struct GS2U_WorldServerOpenProgressInfo <-
{
	uint16 myKillNum;
	uint16 myRank;
	uint32 openProgress;//壁垒强度
	uint8  stageReach;//已达成的最大阶段奖励
	uint8  stageAward;//已领取的最大阶段奖励
};
//领取屠魔阶段奖励
struct U2GS_GetWorldServerOpenAward ->
{
	uint8 state;
};
struct GS2U_GetWorldServerOpenAwardResult <-
{
	uint32 errorCode;
	uint8  stageReach;//已达成的最大阶段奖励
	uint8  stageAward;//已领取的最大阶段奖励
};

//获取屠魔排行榜
struct U2GS_GetWorldServerOpenRankList ->
{
};
struct WorldServerOpenRankInfo
{
	uint16	rank;		// 排名
	uint64  playerID;
	string	name;		// 名字
    uint8   sex;
	string  guildName;
	uint64  battleValue;
	uint32  rankValue;
	uint32  head_id;				// 头像id
	uint32  frame_id;				// 头像框id
};
struct GS2U_GetWorldServerOpenRankList <-
{
	vector<WorldServerOpenRankInfo>	rank_list;
};

// 公会信息
struct guild_cluster
{
	uint16		server_id;		// 服务器id
	uint64		guild_id;		// 公会id
	string		guild_name;		// 公会名称
	uint64		master_id;		// 会长id
	uint8		master_sex;		// 会长性别
	string		master_name;	// 会长名称
	uint64		master_bv;		// 会长战力
};

// 获取位面连接信息
struct U2GS_ClusterServerList ->
{
};
struct GS2U_ClusterServerList <-
{
    vector<uint16>  		serverList;      // 当前服务器列表
    vector<uint16>  		serverListNext;  // 下次服务器列表
    uint32          		timeNext;        // 下次时间（0表示时间还未确定）
	vector<guild_cluster>	top_guild;		 // 顶级公会信息
};

//世界服----end----

// 拆解
struct U2GS_Disassemble ->
{
	uint8	  bag_id;	
	uint64	uid;	
	bool    deal_bind;
};
struct GS2U_DisassembleRet <-
{
  uint32  err_code;
};

// 请求活动Boss首杀的信息  (活动Id, 击杀者)
struct U2GS_RequestAcBossFirstKillInfo ->
{
};
struct ac_boss_first_kill
{
	uint32  id;     // 枚举Id  condition id
	vector<string>  names;
	uint32 map_id;
	uint32 boss_id;
};
struct GS2U_RequestAcBossFirstKillInfo <-
{
	vector<ac_boss_first_kill>  info;
};
//-----------------------------战盟篝火---------------------------------
// 进入战盟营地 
struct U2GS_EnterGuildCamp ->
{
};
// 地图内信息
struct CampInfo
{
	uint32			guild_ratio;      // 2. 战盟加成
	uint32			personal_ratio;   // 3. 个人加成
	uint64			exp;              // 4. 获得的经验
	uint32			coin;             // 5. 获得的绑钻  红包获得
	uint32 			treat_point;      // 6. 请客积分
	uint32      t1;               // 7. 消耗绑钻请客次数
	uint32      t2;               // 8. 消耗非绑请客次数
	uint32      award_mask;       // 9. 积分进度领奖情况
	uint32      guild_money;      // 10. 获得的战盟积分
	uint32		guild_t2;      // 11. 战盟非绑请客总次数
	uint8       double_times;    // 12.双倍次数
};
struct CampInfoUpdate
{
	uint8			index;      // CampInfo结构体对应的索引
	uint32		value;      // 
};
struct GS2U_GuildCampInfoSync <-
{
  uint32            start_timestamp;  // 活动开始时间 
  uint32            boss_timestamp;   // boss刷新时间
  uint32            end_timestamp;    // 活动结束时间 
	vector<CampInfo>	info;   // 列表里面最多一个 如果活动没开 则为空
};

struct GS2U_GuildCampInfoUpdate <-
{
	vector<CampInfoUpdate>	updates;   
};
struct GS2U_GuildCampInfoExpUpdate <-
{
	uint64			exp;              // 3. 获得的经验
};

// 喝酒
struct U2GS_GuildCampDrink ->
{
  uint8  type;   // 1-绑钻 2-
};

struct GS2U_GuildCampDrinkRet <- 
{
  uint32 err_code;
  uint8  type;
};

// 领取阶段奖励
struct U2GS_GuildCampGetSatgeAward ->
{
  uint8  stage;
};

struct GS2U_GuildCampGetSatgeAwardRet <- 
{
  uint32 err_code;
  uint8  stage;
};


// 玩家进入区域
struct U2GS_GuildCampEnterArea ->
{
};
struct GS2U_GuildCampEnterAreaRet <-
{
  uint32    err_code;
};
// 玩家退出区域
struct U2GS_GuildCampExitArea ->
{
};
struct GS2U_GuildCampExitAreaRet <-
{
  uint32    err_code;
};
//-----------------------------战盟篝火 END---------------------------------



// 配饰副本
struct U2GS_DungeonOrnamentInfo ->
{
	
};
struct dungeonOrnament
{
	uint32  dungeonID;			// 关卡ID
	uint8	star;				// 最高通关星数
	uint8	free;				// 是否还有免费次数(1:有 0:没有)
}
struct GS2U_DungeonOrnamentInfo <-
{
	uint8  	maxFightCount;		// 最大挑战次数
	uint8  	fightCount;			// 已使用挑战次数
	uint8 	buyFightCountDay;	//今日购买的额次数
	vector<dungeonOrnament> dungeon_list;
};

//副本结算信息
struct GS2U_DungeonOrnamentSettleAccounts <-
{
	uint8				dungeonType;//副本类型，与策划配置MapAI一致
	uint32				dungeonID;//根据地图返回相应配置ID
	uint8				isWin;//1:胜利;0:失败
	uint64				exp;
	uint8				star;	// 通关星数
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<uint64>		artiIDList;
	uint8				settleType;//结算类型
	uint8				isConqAward;// 是否首通 0:不是，1:是
	uint8				isFirst3X;// 是否首次3星 0:不是，1:是
	vector<EqInfo>	  eq_list;		// 奖励装备列表
};

// 进入副本
struct U2GS_enterDungeonOrnament ->
{
	uint dungeonID;//关卡ID
};

// 配饰副本召唤Boss
struct U2GS_OrnamentCallBoss ->
{
};
struct GS2U_OrnamentCallBossRet <-
{
	uint32	err_code;	// 错误码
};

// 配饰副本召唤Boss
struct U2GS_OrnamentSweep ->
{
  uint32 dungeon_id;
  bool  is_call_boss;
};
struct GS2U_OrnamentSweepRet <-
{
	uint32	err_code;	// 错误码
	uint32 dungeon_id;
	uint64				exp;
	vector<CoinInfo>	coinList;//货币列表
	vector<itemInfo>	itemList;
	vector<EqInfo>	  	eq_list;	// 奖励装备列表
};
//---------------------配饰(海神套装)---------------------
// 配饰部位结构
struct ornament_pos
{
	uint8			pos;			// 部位
	uint64			uid;			// 配饰uid
	vector<uint32>	cast_prop;		// 淬炼属性
	vector<uint32>	cast_prop_temp;	// 淬炼属性(保留)
	vector<uint32>	cast_skill;		// 淬炼技能
	vector<uint32>	cast_skill_temp;// 淬炼技能(保留)
};

// 配饰上线同步
struct GS2U_OrnamentSync <-
{
	vector<ornament>		orn_list;		// 配饰列表
	vector<ornament_pos>	orn_pos_list;	// 配饰装备列表
};

// 配饰更新
struct GS2U_OrnamentUpdate <-
{
	vector<ornament>		orn_list;		// 配饰列表
};

// 配饰更新
struct GS2U_OrnamentPosUpdate <-
{
	vector<ornament_pos>	orn_pos_list;	// 配饰装备列表
};

// 配饰强化
struct U2GS_OrnamentInt ->
{
	uint64	uid;	// 配饰uid
};

// 配饰强化结果
struct GS2U_OrnamentIntRet <-
{
	uint32	err_code;	// 错误码
	uint64	uid;		// 配饰uid
	uint32	int_lv;		// 强化等级
};

// 配饰升阶
struct U2GS_OrnamentBreak ->
{
	uint64	uid;	// 配饰uid
};

// 配饰升阶结果
struct GS2U_OrnamentBreakRet <-
{
	uint32	err_code;	// 错误码
	ornament	orn;	// 新配饰
};

// 配饰祝福
struct U2GS_OrnamentCast ->
{
	uint8	pos;	// 部位
	uint8	op;		// 操作(0:祝福, 1:替换)
};

// 配饰祝福结果
struct GS2U_OrnamentCast <-
{
	uint32	err_code;		// 错误码
	uint8	pos;			// 部位
	uint8	op;				// 操作(0:祝福, 1:替换, 2:放弃)
	ornament_pos	orn_pos;// 新配饰部位信息
};

// 配饰穿戴操作
struct U2GS_OrnamentOp ->
{
	uint8	op;			// 操作(0:装备)
	uint64	uid;		// 配饰uid
};

// 配饰穿戴操作结果
struct GS2U_OrnamentOpRet <-
{
	uint32	err_code;	// 错误码
	uint8	op;			// 操作(0:装备, 1:卸下)
	uint64	uid;		// 配饰uid
};

// 配饰一键穿戴操作
struct U2GS_OrnamentOneKeyOp ->
{
	uint8			op;			// 操作(0:装备)
	vector<uint64>	uids;		// 配饰uid列表
};

// 配饰穿戴操作结果
struct GS2U_OrnamentOneKeyOpRet <-
{
	uint32	err_code;	// 错误码
	uint8	op;			// 操作(0:装备, 1:卸下)
	vector<uint64>	uids;	// 配饰uid列表
};

// 配饰分解
struct U2GS_OrnamentFade ->
{
	vector<uint64>	uids;		// 分解的配饰uid
	bool			is_double;	// 是否双倍
};

struct GS2U_OrnamentFadeRet <-
{
	uint32	err_code;		// 错误码
};
//-------------------配饰(海神套装) end-------------------

//---------------------魂器---------------------
// 魂器结构
struct horcrux
{
	uint32	id;		// 魂器id
	uint32	page;	// 阶数
	uint32	point;	// 点数
	uint32	lv;		// 等级
};

// 器灵装配技能
struct horus_skill
{
	uint8	pos;			// 技能孔索引
	uint32	horcrux_id;		// 魂器id
	uint32	skill_id;		// 技能id
};

// 器灵结构
struct horus
{
	uint32				lv;		// 等级
	uint32				exp;	// 经验
	uint16				pill1;	// 磕丹1
	uint16				pill2;	// 磕丹2
	uint16				pill3;	// 磕丹3
	vector<horus_skill>	skills;	// 装配技能
};

// 上线同步
struct GS2U_HorcruxSync <-
{
	vector<horcrux>	horcrux_list;	// 魂器列表
	horus	horus;					// 器灵
};

// 魂器更新
struct GS2U_HorcruxUpdate <-
{
	vector<horcrux>	horcrux_list;	// 魂器列表
};

// 器灵更新
struct GS2U_HorusUpdate <-
{
	horus	horus;					// 器灵
};

// 魂器升级
struct U2GS_HorcruxAddLv ->
{
	uint32	horcrux_id;		// 魂器id
};

// 魂器升级返回
struct GS2U_HorcruxAddLvRet <-
{
	uint32	err_code;		// 错误码
	uint32	horcrux_id;		// 魂器id
	uint32	new_lv;			// 新等级
};

// 魂器点数突破
struct U2GS_HorcruxPointBreak ->
{
	uint32	horcrux_id;		// 魂器id
};

// 魂器点数突破返回
struct GS2U_HorcruxPointBreakRet <-
{
	uint32	err_code;		// 错误码
	uint32	horcrux_id;		// 魂器id
	uint32	new_point;		// 新点数
};

// 魂器阶数突破
struct U2GS_HorcruxPageBreak ->
{
	uint32	horcrux_id;		// 魂器id
};

// 魂器阶数突破返回
struct GS2U_HorcruxPageBreakRet <-
{
	uint32	err_code;		// 错误码
	uint32	horcrux_id;		// 魂器id
	uint32	new_page;		// 新阶数
};

// 器灵升级
struct U2GS_HorusAddLv ->
{
	vector<CostList>	cost_list;	// 消耗品
};

// 器灵升级返回
struct GS2U_HorusAddLvRet <-
{
	uint32	err_code;		// 错误码
	uint32	new_lv;			// 新等级
	uint32	new_exp;		// 新经验
};

// 器灵磕丹
struct U2GS_HorusPill ->
{
	uint8	index;		// 索引
	uint32	amount;		// 数量
};

// 器灵磕丹返回
struct GS2U_HorusPillRet <-
{
	uint32	err_code;	// 错误码
	uint16	pill;		// 磕丹数量
};

// 技能孔开启
struct U2GS_HorusSkillBoxOpen ->
{
	uint8	pos;	// 技能孔索引
};

// 技能孔开启返回
struct GS2U_HorusSkillBoxOpenRet <-
{
	uint32	err_code;	// 错误码
	uint8	pos;		// 技能孔索引
};

// 技能装配
struct U2GS_HorusSkillOp ->
{
	uint8		op;			// 操作: 0-装配,1-卸下
	uint8		pos;		// 技能孔
	uint32		skill_id;	// 技能id
	uint32		horcrux_id;	// 魂器id
};

struct GS2U_HorusSkillOpRet <-
{
	uint32		err_code;	// 错误码
	uint8		op;			// 操作
};



struct sb_100
{
   string		title;			// 标题
   string		desribe;			// 描述
   string		desribe_big;		// 描述
   vector<uint32>	pic_list;	// 活动配置图标
   string		banner_upleft;	// 左上banner
   string		banner_lowleft;	// 左下banner
   string		banner_upright;	// 右上banner
   string		banner_lowright;// 右下banner
};

struct sb_200
{
   uint32 id;  // 活动id
   string text;
   vector<IndexAwardEquip> award_eq; 
   vector<IndexAwardItem> award_item;
};

// switchbase 类型100信息推送
struct GS2U_SwitchBaseType100Sync <
{
	vector<sb_100>	list;	// 活动配置图标
	vector<sb_200>	list_2;	// 活动配置图标
};

struct U2GS_get_type_200_award ->
{
	uint32 id;   // 活动id
};

struct GS2U_get_type_200_award_ret <-
{
	uint32 err_code;   // 错误码 0 成功
};

// 装备替换返回套装石通知
struct GS2U_EqReplaceNotice <
{
	vector<key_value>	ret_cost;	// 
};
//-------------------魂器 end-------------------


//-----------------------------领地战-龙城争霸---------------------------------
// 获取领地信息
struct U2GS_GetManorInfo ->
{
	
};
struct manor
{
	uint32		manor_id;
	uint64		guild_id;   //占领的仙盟ID
	string		guild_name; 
	string    server_name;        // 服务器名
	uint64		guild_battle_value;   //占领的仙盟的战力
	uint8			state;      // 0未开启 1开启
	bool		is_end;			// 是否已结束
}
struct GS2U_GetManorInfoRet <-
{
  uint8   ac_state;        // 活动状态 0-未开启  1-宣战阶段 2-休战阶段 3-争霸阶段
  uint32  def_manor_id;    // 防守的领地
  uint32  atk_manor_id;    // 攻击(宣战)的领地
  vector<manor>   manors;  // 领地信息
  uint32   timestamp;      // 当天时间戳, 活动状态0-无意义 1-宣战结束时间 2-休战结束时间 3-争霸啊结束时间
};

// 获取竞标界面
struct U2GS_GetManorBidInfo ->
{
	uint32    manor_id;
};
struct manor_bid
{
	string    guild_name;   // 匿名仙盟发空""
	string    server_name;        // 服务器名
	uint8     guild_icon;   // 战盟图标
	uint64		money;      // 竞标资金 0代表自动的宣战
	uint8     rank;       // 显示顺序
}
struct GS2U_GetManorBidInfoRet <-
{
  uint32  manor_id;
  vector<manor_bid>  bids;
  uint64  guild_money;    // 本战盟资金
  uint64  guild_money_1;  // 已经宣战的战盟资金
  uint64  guild_money_2;  // 已经宣战的购买战盟资金
};

// 宣战竞标
struct U2GS_ManorBid ->
{
  uint32    manor_id;
  uint64    money;      // 出价
  uint64    money_1;    // 使用钻石购买的 战盟资金
};
struct GS2U_ManorBidRet <-
{
  uint32    err_code;
};

// 查看战报
struct U2GS_GetManorWarResult ->
{
};
struct mwr_pillar_1
{
	uint32  time;         // time / 60 = X ... Y  X分Y秒
	string  guild_name;
	string  server_name;        // 服务器名
};
struct mwr_pillar
{
  uint32  pillar_id;
  string  guild_name;                 // 占领的仙盟
  string  server_name;        // 服务器名
  vector<mwr_pillar_1>  change_list;  // 变更列表
};
struct mwr_guild
{
  uint64  guild_id;
  string  guild_name;
  string  server_name;        // 服务器名
  uint16  player_count;
  uint64  damage;
  vector<uint32>  pillars;    // 占领的神柱ID
};
struct manor_war_report
{
  uint32  manor_id;   
  uint64  guild_id;
  string  guild_name;
  string  server_name;        // 服务器名
  vector<mwr_guild>   guilds;
  vector<mwr_pillar>  pillar;   
};
struct GS2U_GetManorWarResultRet <-
{
  uint32  err_code;
  vector<manor_war_report> rs;
};

// 更换复活营地
struct U2GS_ChangeManorRebornID ->
{
	uint32  id;
};
struct GS2U_ChangeManorRebornIDRet <-
{
	uint32  err_code;
	uint32  new_id;
};
// ------------------------------------------------------------------------------------
// 进入地图
struct U2GS_EnterManorWar ->
{
  uint32  manor_id;
};
struct m_inspire
{
  uint8  id;
  uint8  times;
};
struct mb_pillar
{
  uint32   pillar_id;
  string  guild_name; // 占领战盟
  string  server_name;        // 服务器名
};

// 进图地图后同步信息
struct GS2U_EnterManorSyncInfo <-
{
  uint32   battle_start_time;      // 战斗开始时间
  uint32   end_time;      // 活动结束时间
  uint32   kill_num;
  vector<uint32>  my_pillars;    // 占领的龙柱
  vector<mb_pillar>  pillars;    // 龙柱信息
  uint32   point;    // 我的积分
  vector<m_inspire> inspire;   // 鼓舞信息
};

// 我的杀敌数
struct GS2U_ManorKillNumSync <-
{
  uint32   kill_num;
};
// 龙柱信息广播
struct GS2U_ManorPillarSync <-
{
  vector<mb_pillar>  pillars; 
};
// 我的积分
struct GS2U_ManorPointSync <-
{
  uint32   point;
  uint8    reason;   // 0-不关心 1-每X秒加的需要飘字 
};

// 玩家离开安全区
struct U2GS_ManorExitSafeArea ->
{
};

struct U2GS_GetManorSocreSampleRank ->
{
};
// 界面上的前三名
struct GS2U_ManorScoreRankSample <-
{
  vector<sample_rank>  ranks; 
};
// 获取战盟的积分排行
struct U2GS_GetManorSocreRank ->
{
};
struct manor_rank
{
  uint8   rank;
  string  name;
  uint64  battle_value;
  uint32  kill_num;
  uint64  hurt;
  uint32  point;
  uint32  nationality_id;        // 区域id
};
struct GS2U_ManorScoreRank <-
{
  vector<manor_rank>  ranks; 
  uint8   rank;
  string  name;
  uint64  battle_value;
  uint32  kill_num;
  uint64  hurt;
  uint32  point;  
};
// 地图内获取战况
struct U2GS_GetManorBattleInfo ->
{
};

struct manor_battle
{
  uint32  manor_id;
  uint8   tp;     // 0-进攻  1-防御
  string  guild_name; // 领先战盟
  string  server_name;        // 服务器名
  uint8   point;      // 领先战盟的积分
  vector<mb_pillar>  pillar;
};
struct manor_guild_name
{
  string  guild_name; // 领先战盟
  string  server_name;        // 服务器名
};
struct GS2U_GetManorBattleInfoRet <-
{
  vector<manor_battle> info;
  vector<manor_guild_name>  guild_list;
  uint8   reborn_id;    // 复活点
};
// 战盟鼓舞
struct U2GS_ManorInspire ->
{
  uint8 tp;
};
struct GS2U_ManorInspireRet <-
{
  uint32  err_code; 
};
// 战盟内广播鼓舞信息
struct GS2U_ManorInspireSync <-
{
  vector<m_inspire> inspire;
};

// 活动结束 服务器推送， 然后再由客户端请求结算信息
struct GS2U_ManorActiveEnd <-
{
};
// 客户端发起请求结算信息
struct U2GS_ManorGetSettleAccount ->
{
};
struct manor_settle 
{
  uint32  manor_id;       // 领地ID
  string  guild_name;       // 战盟名字
  string  server_name;        // 服务器名
  vector<uint32>  pillars;  // 占领龙柱
  uint16  point;            // 积分
};
struct GS2U_ManorGetSettleAccountRet <-
{
  string  guild_name;     // 3级领地的占领信息
  string  player_name;
  string  server_name;        // 服务器名
  vector<manor_settle>  manors;
  // 前端根据以下字段显示奖励
  uint32  my_manor_id;    // 本盟占领的领地
  uint32  my_manor_id_1;    // 按照此领地Id发奖
  uint32  my_point_rank;  // 我的积分排名
};

struct GS2U_ManorEndAhead <-
{
	uint32	manor_id;	// 领地id
	bool	is_win;		// 是否胜利
};

struct GS2U_ManorWarMonsterRefresh <-
{
	uint				refreshTime;//下次刷怪物的时间戳
};


struct GS2U_ManorWarPlayerRelation <-
{
	uint				manorWarID;         // 当前所在的领地ID
	uint				fightManorWarID;    // 玩家仙盟的攻击领地ID
	uint				defenceManorWarID;  // 玩家仙盟的防守领地ID
};

// 龙城霸主
// 打开龙城霸主界面
struct U2GS_GetManorResult ->
{
};
struct manor_overlord
{
  LookInfoPlayer4UI   ui_info;//显示相关信息
  uint8  rank;        // 军团的rank  66-盟主的伴侣
};
struct GS2U_GetManorResultRet <-
{
	vector<manor_overlord>   overloads;   
	string  guild_name;         // 名字
	string  player_name;        // 盟主名字
	string  server_name;        // 服务器名
};
// 领取每日奖励  服务器弹恭喜获得
struct U2GS_ManorGetDailyAward ->
{
};
struct GS2U_ManorGetDailyAwardRet <-
{
	uint32 err_code;
};

// 领地战通知
struct GS2U_ManorNotify <-
{
	uint8 tp; // 0-被人出价超过了  1-活动开启推送(开始竞拍领地机会)
};


// 什么东西被摧毁了
struct GS2U_ManorSthDead <-
{
	uint32  monster_id;   // 配置表ID
	uint32  map_data_id;  // 
	string  player_name;
	string  guild_name;
	string  server_name;
};

//领地怪物（城门、神柱）血量比例、集火状态
struct U2GS_ManorWarSetOnFire ->
{
	uint64				monsterID;//建筑（怪物）ID
};
struct ManorWarObject
{
	uint64				monsterID;//建筑（怪物）ID  
	uint32				monsterDataID;
	uint8				hpPercent;// 血量百分比
	uint8				onFire;//是否集火 0:否 1:是
	uint64				guildID;//建筑所属仙盟ID
	uint8               group; // 归属阵营 2-防守 3-进攻
	string              guild_name; // 所属战盟名
	uint8               param; // 参数
};
struct GS2U_ManorWarObject <-
{
	vector<ManorWarObject>	door_list;
	vector<ManorWarObject>	pillar_list;
	vector<ManorWarObject>	flag_list;
};

// 开启战车
struct U2GS_ManorWarChariots ->
{
	uint8       type;   // 1 战车 2 奇美拉
	uint64		chariot_id; // 1-战车id 2-无效
};
struct GS2U_ManorWarChariotsRet <-
{
	uint8       type;   // 1 战车 2 奇美拉
	uint64		chariot_id; // 1-战车id 2-无效
	uint32      err_code;
};
// 取消战车
struct U2GS_ManorWarCancelChariots ->
{
};
struct GS2U_ManorWarCancelChariotsRet <-
{
	uint32 err_code;
};

//-----------------------------领地战-龙城争霸 END---------------------------------

// 拍卖商品数据
struct auction_goods
{
    uint64  goods_id;                     // 商品Id
    uint8   sold;                         // 商品是否已售出（0或1）
    uint32  bid_num;                      // 当前竞价次数
    uint64  bid_player_id;                // 当前竞价玩家Id（0表示没有竞价者）
    string  bid_player_name;              // 当前竞价玩家名字
    string  bid_server_name;              // 当前竞价服务器名字
    uint32  item_cfg_id;                  // 物品配置Id
    uint16  item_amount;                  // 物品数量
    uint8   item_bind;                    // 物品绑定
    vector<EqInfo>  equipment_list;       // 装备数据（非装备为空）
    uint8   currency_key;                 // 货币类型
    uint32  currency_init;                // 初始单价
    uint32  currency_add;                 // 加价单价
    uint32  currency_buy;                 // 购买单价
    uint8   limit;                        // 商品是否限购（0或1）
    uint32  limit_amount;                 // 限购商品已购数量
};
// 拍卖商品更新
struct auction_goods_update
{
    uint16  group_id;                     // 拍卖Id
    uint64  goods_id;                     // 商品Id
    uint8   sold;                         // 商品是否已售出（0或1）
    uint32  bid_num;                      // 当前竞价次数
    uint64  bid_player_id;                // 当前竞价玩家Id（0表示没有竞价者）
    string  bid_player_name;              // 当前竞价玩家名字
    string  bid_server_name;              // 当前竞价服务器名字
    uint32  limit_amount;                 // 限购商品已购数量
    uint32  player_bonus;                 // 玩家预计分红
};
// 拍卖商品成交记录
struct auction_goods_history
{
    uint8   sold;                         // 商品是否一口价（0或1）
    string  player_name;                  // 玩家名字
    string  server_name;                  // 服务器名字
    uint32  item_cfg_id;                  // 物品配置Id
    uint16  item_amount;                  // 物品数量
    uint8   item_bind;                    // 物品绑定
    vector<EqInfo>  equipment_list;       // 装备数据（非装备为空）
    uint8   currency_key;                 // 货币类型
    uint32  currency_value;               // 成交总价
    uint32  time;                         // 成交时间
};

// 前端请求拍卖数据
struct U2GS_auction_group ->
{
    uint16  group_id;                     // 拍卖Id
};
struct GS2U_auction_group <-
{
    uint16  group_id;                     // 拍卖Id	
    uint32  error;                        // 错误码，为0时后面值才有效
    uint8   state;                        // 拍卖状态：0-未开启、1-已开启、2-已关闭
    uint32  open_time;                    // 打开时间
    uint32  close_time;                   // 关闭时间
    vector<auction_goods>  goods_list;    // 商品数据列表
    uint8   player_bid;                   // 玩家能否竞价（0或1）
    uint32  player_bonus;                 // 玩家预计分红
	uint8   has_bonus;                    // 自己是否有分红（0或1）
};
struct U2GS_auction_group_notify ->
{
};
struct GS2U_auction_group_notify <-
{
    uint16  group_id;                     // 拍卖Id	
    uint8   state;                        // 拍卖状态：0-未开启、1-已开启、2-已关闭
    uint32  open_time;                    // 打开时间
    uint32  close_time;                   // 关闭时间
};

// 前端请求竞价商品
struct U2GS_auction_goods_bid ->
{
    uint16  group_id;                     // 拍卖Id
    uint64  goods_id;                     // 商品Id
    uint32  new_bid_num;                  // 新的竞价次数（当前竞价次数+1）
    uint32  extra_gold;                   // 补齐的钻石
};
struct GS2U_auction_goods_bid <-
{
    uint32  error;                        // 错误码
    vector<auction_goods_update>  goods_update_list;    // 商品更新（成功失败都需要更新商品）
};

// 前端请求购买商品
struct U2GS_auction_goods_buy ->
{
    uint16  group_id;                     // 拍卖Id
    uint64  goods_id;                     // 商品Id
    uint16  item_amount;                  // 物品数量（限购商品有效）
    uint32  extra_gold;                   // 补齐的钻石
};
struct GS2U_auction_goods_buy <-
{
    uint32  error;                        // 错误码
    vector<auction_goods_update>  goods_update_list;    // 商品更新（成功失败都需要更新商品）
};

// 前端请求拍卖成交记录
struct U2GS_auction_history ->
{
    uint16  group_id;                     // 拍卖Id
};
struct GS2U_auction_history <-
{
    uint16  group_id;                     // 拍卖Id
    uint32  error;                        // 错误码
    vector<auction_goods_history>  goods_history_list;    // 商品成交记录列表
};

// 前端请求拍卖分红记录
struct U2GS_auction_bonus ->
{
    uint16  group_id;                     // 拍卖Id
};
struct GS2U_auction_bonus <-
{
    uint16  group_id;                     // 拍卖Id
    uint32  error;                        // 错误码
	uint8   state;                        // 拍卖状态：0-未开启、1-已开启、2-已关闭
    uint32  total_bonus;                  // 分红总数
    uint32  player_bonus;                 // 分红人均
	uint8   has_bonus;                    // 自己是否有分红（0或1）
    uint32  time;                         // 分红时间
    vector<string>  player_name_list;     // 玩家名字列表
    uint32  tax_rate;                     // 税率万分比
};

//------------------------活动玩法(恶魔之海)------------------------------
// 获取活动玩法信息
struct U2GS_GetAcPlayUI ->
{
    uint32  ac_id;    // sb表ID
    uint32  q_id;     // q表ID
};
struct ac_play_drop_record
{
    uint32  timestamp;
    string  player_name;
    string  item_name;
    uint8   tp;       // tp: 1-param为itemid  2-param为uid
    uint64  param;    // 
};
struct GS2U_GetAcPlayUIRet <-
{
    vector<ac_play_drop_record>  records;
};

// 购买次数  
// 次数同步  设置玩家动态变量  值为到期时间  如果值为0或者大于当前时间   表示可以进入  反之不能进入 需要购买
struct U2GS_AcPlayBuyTimes ->
{
    uint32  ac_id;    // sb表ID
    uint32  q_id;     // q表ID
};
struct GS2U_AcPlayBuyTimesRet <-
{
    uint32  err_code;
};

// 进入地图
struct U2GS_AcPlayEnterMap ->
{
    uint32  ac_id;    // sb表ID
    uint32  q_id;     // q表ID
};


struct ac_play_cost
{
  uint8   tp;   // 1-道具 2-货币
  uint32  cfg_id;
  uint32  num;
};

// 地图内信息同步
struct GS2U_GetAcMapInfoSync <-
{
    uint32    map_cfg_id;   // 地图配置表ID
    uint32    time_exp;     // 每X秒获得一次经验
    vector<ac_play_cost>	 to_next_cost;	 // 传送的消耗
    uint8     vip_lv;   // vip达到等级直接传送
    uint8     now_layer;   // 当前在的层
    uint8     total_layer;   // 总层
    uint8     dead_ret_layer;   // 死亡返回层数
    uint64    total_exp;        // 获得总经验
};
struct ac_play_boss
{
  uint8   index;     // 
  uint32  boss_id;   // monsterBase配置表Id
  uint32  level;    // 
  uint32  x;         // 使用的时候除以100
  uint32  y;
  uint32  timestamp;  // 复活时间  小于当前时间或者为0 表示已经刷新
};
// 左侧显示Boss信息 同步和刷新使用该协议
struct GS2U_AcPlayBossListUpdate <-
{
    vector<ac_play_boss>	 boss_list;	 // 
};

// 经验获得更新
struct GS2U_GetAcMapExpUpdate <-
{
    uint64    total_exp;    // 获得总经验
};

// 进入下一层
struct U2GS_AcPlayEnterNextLayer ->
{
    uint32  ac_id;    // sb表ID
    uint32  q_id;     // q表ID
    uint8   now_layer;   // 当前所在的层
};

// 结算信息
struct GS2U_AcPlaySettleAccounts <-
{
	uint64				    exp;
	vector<CoinInfo>	coin_list;  
	vector<itemInfo>	item_list;
	vector<EqInfo>	  eq_list;	  
};
//------------------------活动玩法(恶魔之海) END------------------------------

//------------------------活动玩法(寒风森林)------------------------------
struct blzForestExchange
{
	uint32 index; // 索引
	vector<indexTypeItem> item_new; // 奖励物品
	uint32 discount; // 整体折扣万分比
	vector<key_2value> cost_list; // 消耗列表
	vector<key_2value> limit; // 限制
};

// 获取活动玩法信息
struct U2GS_GetBlzForestUI ->
{
    uint32  id;    // 活动入口ID
};
struct GS2U_GetBlzForestUIRet <-
{
	uint8           free_num;     // 每日免费次数  
	vector<consWay> buy_cost;
	vector<indexTypeItem> award_show;
  vector<ac_play_drop_record>  records;
  vector<blzForestExchange> exchange_list; // 兑换列表
  vector<key_value> change_list; // 已兑换列表 [{Index, Times}]
};

// 购买次数  
// 次数同步  设置玩家动态变量  值为到期时间  如果值为0或者大于当前时间   表示可以进入  反之不能进入 需要购买
struct U2GS_BlzForestBuyTimes ->
{
    uint32  id;    // 活动入口ID
};
struct GS2U_BlzForestBuyTimesRet <-
{
    uint32  err_code;
};

// 进入地图
struct U2GS_BlzForestEnterMap ->
{
    uint32  id;    // 活动入口ID
};

// 地图内信息同步
struct GS2U_GetBlzForestMapInfoSync <-
{
    uint32    map_cfg_id;   // 地图配置表ID
    uint32    time_exp;     // 每X秒获得一次经验
    vector<ac_play_cost>	 to_next_cost;	 // 传送的消耗
    uint8     vip_lv;   // vip达到等级直接传送
    uint8     now_layer;   // 当前在的层
    uint8     total_layer;   // 总层
    uint8     dead_ret_layer;   // 死亡返回层数
    uint64    total_exp;        // 获得总经验
};

// 左侧显示Boss信息 同步和刷新使用该协议
struct GS2U_BlzForestBossListUpdate <-
{
    vector<ac_play_boss>	 boss_list;	 // 
};

// 经验获得更新
struct GS2U_GetBlzForestMapExpUpdate <-
{
    uint64    total_exp;    // 获得总经验
};

// 进入下一层
struct U2GS_BlzForestEnterNextLayer ->
{
    uint32  id;    // 活动入口ID
    uint8   now_layer;   // 当前所在的层
};

// 结算信息
struct GS2U_BlzForestSettleAccounts <-
{
	uint64				    exp;
	vector<CoinInfo>	coin_list;  
	vector<itemInfo>	item_list;
	vector<EqInfo>	  eq_list;	  
};

struct U2GS_BlzForestExchangeReq ->
{
    uint32  id;    // 活动入口ID
    uint32 index;  // 兑换索引
    uint32 times;  // 兑换次数
};
struct GS2U_BlzForestExchangeRet <-
{
	  uint32  id;    // 活动入口ID
    uint32 index;  // 兑换索引
    uint32 times;  // 兑换次数
    uint32  err_code;
};
//------------------------活动玩法(寒风森林) END------------------------------

//---------------------神兵---------------------
// 神兵锻造结构
struct weapon_make
{
	uint32	weapon_id;		// 神兵id
	uint32	progress;		// 进度
	uint32	free_num;		// 使用的免费次数(已使用的)
	uint32	recharge_num;	// 充值打造次数(已使用的)
};

// 神兵结构
struct weapon
{
	uint32				weapon_id;	// 神兵id
	uint32				reopen;		// 解封
	uint32				level;		// 阶数
	vector<key_value>	star;		// 星级 [{部件id, 星级}, ...]
	uint64				g_attr_uid;	// 成长属性uid
};

// 兵魂装配技能
struct ws_skill
{
	uint8	pos;		// 技能孔索引
	uint32	weapon_id;	// 神兵id
	uint32	skill_id;	// 技能id
};

// 兵魂结构
struct weapon_soul
{
	uint64				role_id;// 角色id
	uint32				level;	// 等级
	uint32				exp;	// 经验
	vector<ws_skill>	skills;	// 装配技能
};

// 神兵羁绊
struct weapon_fetter
{
	uint16	id;		// 羁绊id
	uint16	level;	// 羁绊等级
};

// 上线同步
struct GS2U_WeaponSync <-
{
	vector<weapon_make>	wm_list;// 神兵打造列表
	vector<weapon>	w_list;		// 神兵列表
	vector<weapon_soul>	ws_list;// 兵魂列表
	vector<weapon_fetter> wf_list// 神兵羁绊列表
};

// 神兵打造更新
struct GS2U_WeaponMakeUpdate <-
{
	vector<weapon_make>	wm_list;// 神兵打造列表
};

// 神兵更新
struct GS2U_WeaponUpdate <-
{
	vector<weapon>	w_list;		// 神兵列表
};

// 兵魂更新
struct GS2U_WeaponSoulUpdate <-
{
	vector<weapon_soul>	ws_list;	// 兵魂列表
};

// 神兵羁绊更新
struct GS2U_WeaponFetterUpdate <-
{
	vector<weapon_fetter>	wf_list;	// 神兵羁绊列表
};

// 角色装备神兵更新
struct GS2U_WeaponRoleUpdate <-
{
	uint64	role_id;			// 角色id
	vector<weapon>	w_list;		// 神兵列表
};

// 神兵打造
struct U2GS_WeaponMakeReq ->
{
	uint32	weapon_id;	// 神兵id
	uint32	chara;		// 打造品质
};

// 神兵打造返回
struct GS2U_WeaponMakeRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
	uint32	chara;		// 打造品质
};

// 神兵激活
struct U2GS_WeaponActiveReq ->
{
	uint32	weapon_id;	// 神兵id
};

// 神兵激活返回
struct GS2U_WeaponActiveRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
};

// 神兵解封
struct U2GS_WeaponReopenReq ->
{
	uint32	weapon_id;	// 神兵id
};

// 神兵解封返回
struct GS2U_WeaponReopenRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
	uint32	new_reopen;	// 新的解封等级
};

// 神兵升阶
struct U2GS_WeaponAddLevelReq ->
{
	uint32	weapon_id;		// 神兵id
};

// 神兵升阶返回
struct GS2U_WeaponAddLevelRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
	uint32	new_level;	// 新等级
};

// 神兵升星
struct U2GS_WeaponAddStarReq ->
{
	uint32	weapon_id;		// 神兵id
	uint8	part_id;		// 部位
};

// 神兵升星返回
struct GS2U_WeaponAddStarRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
	uint8	part_id;	// 部位
	uint32	new_star;	// 新星级
};

// 神兵装配
struct U2GS_WeaponEquipReq ->
{
	uint32	weapon_id;	// 神兵id
	uint8	op;			// 0:穿戴 1:卸下
};

// 神兵装配返回
struct GS2U_WeaponEquipRet <-
{
	uint32	err_code;	// 错误码
	uint32	weapon_id;	// 神兵id
	uint8	op;			// 0:穿戴 1:卸下
};

// 兵魂升级
struct U2GS_WeaponSoulAddLevelReq ->
{
	uint64				role_id;	//角色id
	vector<CostList>	cost_list;	// 消耗品
};

// 兵魂升级返回
struct GS2U_WeaponSoulAddLevelRet <-
{
	uint64	role_id;		// 角色id
	uint32	err_code;		// 错误码
	uint32	new_level;		// 新等级
	uint32	new_exp;		// 新经验
};

// 兵魂磕丹
struct U2GS_WeaponSoulPillReq ->
{
	uint64	role_id;	// 角色id
	uint8	index;		// 索引
	uint32	amount;		// 数量
};

// 兵魂磕丹返回
struct GS2U_WeaponSoulPillRet <-
{
	uint64	role_id;	// 角色id
	uint32	err_code;	// 错误码
	uint16	pill;		// 磕丹数量
};

// 兵魂技能孔开启
struct U2GS_WeaponSoulSkillBoxOpenReq ->
{
	uint64	role_id;	// 角色id
	uint8	pos;		// 技能孔索引
};

// 兵魂技能孔开启返回
struct GS2U_WeaponSoulSkillBoxOpenRet <-
{
	uint64	role_id;	// 角色id
	uint32	err_code;	// 错误码
	uint8	pos;		// 技能孔索引
};

// 兵魂技能装配
struct U2GS_WeaponSoulSkillOpReq ->
{
	uint64		role_id;	// 角色id
	uint8		op;			// 操作: 0-装配,1-卸下
	uint8		pos;		// 技能孔
	uint32		skill_id;	// 技能id
	uint32		weapon_id;	// 神兵id
};

// 兵魂技能装配返回
struct GS2U_WeaponSoulSkillOpRet <-
{
	uint64		role_id;	// 角色id
	uint32		err_code;	// 错误码
	uint8		op;			// 操作
};

// 是否显示神兵外显
struct U2GS_WeaponShow ->
{
	uint64		role_id;	// 角色id
	uint8		is_show;	// 是否显示 1是 0否
};
// 是否显示神兵外显返回
struct GS2U_WeaponShowRet <-
{
	uint64		role_id;	// 角色id
	uint8		is_show;	// 是否显示 1是 0否
	uint32		err_code;	// 错误码
};

// 激活神兵羁绊
struct U2GS_WeaponActiveFetter ->
{
	uint16		id;			// 套装ID
	uint16		level;		// 套装等级
};
// 激活神兵羁绊返回
struct GS2U_WeaponActiveFetterRet <-
{
	uint32		err_code;	// 错误码
	uint16		id;			// 套装ID
	uint16		level;		// 套装等级
};
//-------------------神兵 end-------------------

//---------------------成长属性---------------------
// 成长属性结构
struct g_attr
{
	uint64				uid;		// 成长属性uid
	uint32				gid;		// 成长属性id
	vector<key_value>	cond_list;	// 条件 [{类型, 达成次数}, ...]
	vector<key_value>	attr_list;	// 属性列表 [{属性id, 属性值}, ...] (最终结果)
};

// 上线同步
struct GS2U_GrowthAttrSync <-
{
	vector<g_attr>	g_attr_list;	// 成长属性列表
};

// 神兵打造更新
struct GS2U_GrowthAttrUpdate <-
{
	vector<g_attr>	g_attr_list;	// 成长属性列表
};
//-------------------成长属性 end-------------------

struct GS2U_PlayerSkillCdChange <-
{
	uint64   role_id;
	uint16   index;
	int32    change_cd;
};

// 玩家扣除护盾值
struct GS2U_DamageShieldValue <-
{
	Object_Damage damage;
};

// 分享领奖
struct U2GS_ShareReward ->
{
    uint8   type;                         // 1-FB分享、2-Kakao分享
};
struct GS2U_ShareReward <-
{
    uint8   type;                         // 1-FB分享、2-Kakao分享
    uint32  errorCode;		              // 0-成功，非0-错误原因
};

// 台湾版本战盟显示Line号
struct U2GS_SetGuildLine ->
{
    string  line;
};
struct GS2U_SetGuildLineRet <-
{
    uint32  err_code;		          // 0-成功，非0-错误原因
};
struct U2GS_GetGuildLine ->
{
};
struct GS2U_GetGuildLineRet <-
{
    string  line;		          
};

struct DemonHunterUIParam
{
	string server_name;
	string name;
	uint8 sex;
	uint32 param; // 积分、击杀数等
};

// 请求猎魔主界面信息
struct U2GS_GetDemonHunterUI ->
{
};
struct GS2U_GetDemonHunterUIRet <-
{
	uint16  my_rank;
	uint32  my_score;
	uint16  guild_rank;
	uint32  guild_score;
	vector<DemonHunterUIParam>	personal_top3;
	vector<DemonHunterUIParam>	guild_top3;
};

//好评有礼
struct U2GS_PraiseReward ->
{
    uint8  type;    // 0 好评有礼 1 社区关注
    uint8  operation; //1 领奖 2 增加弹窗次数
}
struct GS2U_PraiseReward <-
{
    uint8  type;    // 0 好评有礼 1 社区关注
    uint8 operation; // 1 领奖 2 增加弹窗次数
    uint32  err_code;    // 0-成功，非0-错误原因
}

// ------------------- 活动玩法参加次数相关 -------------------
struct GameplayJoinHistory
{
	uint32	func_id;		// 功能id
	uint32	order;			// 场次
	uint32	end_time;		// 结束时间
};

// 玩法参加所有历史数据
struct GS2U_GameplayJoinHistoryAll <-
{
	vector<GameplayJoinHistory>	history;	// 历史数据
};

// 玩法参加历史数据更新
struct GS2U_GameplayJoinHistoryUpdate <-
{
	vector<GameplayJoinHistory>	history;	// 历史数据
};
// ----------------- 活动玩法参加次数相关 end -----------------
// -------------------------直购基金-------------------------
struct DailyAward
{
	uint8 day;     // 第几天 0天表激活立即获得得奖励
	vector<RebateAwardCurrency>  currencyList;		// 奖励货币列表
	vector<RebateAwardItem>      itemList;        	// 奖励道具列表
};

struct DirectBuyFund
{
	uint8  group_id;								// 价格分组ID
	uint16 buy_id;                  				// 直购基金ID
	string name;                					// 基金名字
	uint8  type_group;								// 类分组ID
	uint32 rebate;                                  // 返利比
	uint8  state;                                   // 0 -当日未领 1-当日已领 2-未购买
	uint8  awardDay;                                // 已领取的天数
	uint32 openActionID;							// 功能开启id
	vector<DailyAward> dailyAwardList               // 奖励
};

struct GS2U_DirectBuyFundInfoRet <-
{
	
	vector<DirectBuyFund> infoList;
};

struct U2GS_DirectBuyFundDailyAward ->
{
	uint8  group_id;								// 价格分组ID
	uint16 buy_id;                  				// 直购基金ID
	uint8  day;
};

struct GS2U_DirectBuyFundUpdateInfo <-
{
    DirectBuyFund info;
};

struct GS2U_DirectBuyFundDailyAwardRet <-
{
    uint32  err_code;    // 0-成功，非0-错误原因
    DirectBuyFund info;
};

struct U2GS_DirectBuyFundDailyAwardOneKey ->
{
};

struct GS2U_DirectBuyFundDailyAwardOneKeyRet <-
{
    uint32  err_code;    // 0-成功，非0-错误原因
    vector<DirectBuyFund> infoList;
};
// -------------------------直购基金 end-------------------------

//-------------------------------账号绑定start------------------
struct U2GS_AccountBindingAward ->
{
};

struct GS2U_AccountBindingAwardRet <-
{
    uint32  err_code;    // 0-成功，非0-错误原因
};
// -----------------------------账号绑定end---------------------

// 聊天翻译
struct U2GS_ChatTranslate ->
{
    uint32  requestID;		// 请求ID
    string  requestText;	// 请求文字
};
struct GS2U_ChatTranslate <-
{
    uint32  errorCode;      // 错误码
    uint32  requestID;		// 请求ID
    string  translatedText;	// 翻译后文字
};
//------------------------------ 区域修改start------------------
struct U2GS_ModifyNationality ->
{
    uint32 nationality_id;   // 区域id
};

struct GS2U_ModifyNationalityRet <-
{
    uint32  err_code;    // 0-成功，非0-错误原因
};
// -----------------------------区域修改end---------------------
struct UpdatePushData
{
	uint16 id; // id 999 免打扰时间 其他同push表id
    uint16 param1;   // type=1 挂机收益 开1/关0  type=2 体力满 开1/关0  type=5 活动 开1/关0 id=999 开始时间
    uint16 param2; //   type=5 openActionID   type=999 结束时间
    uint16 param3; // type=5 order
};

struct U2GS_UpdatePushShedule ->
{
    UpdatePushData info;
};

struct GS2U_PushShedule <-
{
    vector<UpdatePushData> infoList;
};

// e好礼领奖
struct U2GS_e_download_award ->
{
};
struct GS2U_e_download_award_ret <-
{
    uint32  err_code;    // 0-成功，非0-错误原因
};

struct DemonJoinNum
{
    uint8 type;  // 1 恶魔入侵 2 恶魔深渊 3 恶魔巢穴 4 诅咒禁地 5 神魔战场 6 神魔幻域
    uint32 zday_num;  // 昨日参与人数
    uint32 qday_num;  // 前日参与人数
};
struct GS2U_DemonJoinNumPush <-
{
	vector<DemonJoinNum> infoList;
};
//---------------------小助手---------------------
struct U2GS_HelperBuy ->
{
};
struct GS2U_HelperBuyRet <-
{
	uint32	err_code;	// 错误码
};

struct U2GS_HelperMopUp ->
{
    uint8   type;         // 1-关卡类副本  2-竞技场
    uint32  dungeonID;    // 关卡ID（关卡类副本有效）
    uint8   mode;         // 1-免费扫荡  2-绑钻扫荡
    uint8   times;        // 扫荡次数
    uint8   callBossNum;  // 召唤Boss数量（埋骨之地有效）
};

struct GS2U_HelperMopUpRet <-
{
	uint32  err_code;               // 0-成功，非0-错误原因
	uint32  dungeonID;				// 关卡ID 竞技场-0
	uint64	exp;					// 经验
	uint8	times;					// 次数
	vector<NewCoinInfo>  coinList;	// 奖励货币列表
	vector<NewitemInfo>  itemList;	// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
	uint8  double_times;            // 双倍次数
};
struct U2GS_HelperDailyAward ->
{
};
struct GS2U_HelperDailyAwardRet <-
{
	uint32  errorCode;		     // 0-成功，非0-错误原因
};

// 一键扫荡
struct U2GS_OneKeyMopUp ->
{
    uint8   type;         // 1-材料副本  2-竞技场 3-深渊之海 4-龙神秘典
    uint32  dungeonID;    // 非竞技场有效
    uint16   times;        // 扫荡次数
    uint8   callBossNum;  // 召唤Boss数量（埋骨之地有效） 深渊之海数量大于0 表示召唤了BOSS
};

struct AIHostSettingInfo {
  uint8 hostid
  vector<uint16>           setting_int;
  vector<uint16>           setting_bool;
}
struct U2GS_UpdateAIHostSetting ->
{
  vector<AIHostSettingInfo>   setting;
}
struct U2GS_SaveAIHostSetting ->
{
  vector<AIHostSettingInfo>   setting;
}
struct GS2U_SaveAIHostSetting <-
{
  vector<AIHostSettingInfo>   setting;
}
//-------------------小助手 end-------------------

---------------------风暴龙城 start -----------------------------------------
// 龙城边境
struct dragon_city_border
{
    uint16  server_id;
    string  server_name;
};

// 风暴龙城信息
struct U2GS_dragon_city_info ->
{
};
struct GS2U_dragon_city_info <-
{
    uint32  error_code;
    vector<dragon_city_border>  border_list;
};

// 进入风暴龙城
struct U2GS_dragon_city_enter ->
{
};
// 进入龙城边境
struct U2GS_dragon_city_border_enter ->
{
    uint16  server_id;
    uint32	index;			//传送阵id，没有填0
};

// 龙城雕像
struct dragon_city_statue
{
    uint32  manor_id;                   // 领地Id
    uint8   manor_level;                // 领地等级
    uint16  server_id;                  // 服务器Id
    string  server_name;
    uint64  guild_id;                   // 战盟Id
    string  guild_name;
    uint64  chairman_id;                // 盟主Id
    LookInfoPlayer4UI  chairman_ui;
    uint32  title_id;                   // 称号Id
    uint32  mount_id;                   // 坐骑Id
    uint32  guard_id;                   // 守护Id
    uint32  up_num;                     // 赞数量
    uint32  down_num;                   // 踩数量
};
// 龙城雕像历史
struct dragon_city_statue_history
{
    uint32  time;                       // 领地时间
    uint16  server_id;                  // 服务器Id
    string  server_name;
    uint64  guild_id;                   // 战盟Id
    string  guild_name;
    uint64  chairman_id;                // 盟主Id
    LookInfoPlayer4UI  chairman_ui;
    uint32  title_id;                   // 称号Id
    uint32  mount_id;                   // 坐骑Id
    uint32  guard_id;                   // 守护Id
};

// 龙城雕像信息
struct U2GS_dragon_city_statue_info ->
{
};
struct GS2U_dragon_city_statue_info <-
{
    uint32  error_code;
    vector<dragon_city_statue>  statue_list;
};

// 龙城雕像历史信息
struct U2GS_dragon_city_statue_history_info ->
{
};
struct GS2U_dragon_city_statue_history_info <-
{
    uint32  error_code;
    vector<dragon_city_statue_history>  history_list;
};

// 龙城雕像点赞
struct U2GS_dragon_city_updown ->
{
    uint32  manor_id;                   // 领地Id
    bool    is_up;                      // 是否点赞，不是赞就是踩
    uint32  text_id;                    // 弹幕文字Id
};
struct GS2U_dragon_city_updown <-
{
    uint32  manor_id;                   // 领地Id
    uint32  error_code;
    uint32  up_num;                     // 赞数量
    uint32  down_num;                   // 踩数量
};

// 龙城雕像弹幕信息
struct dragon_city_text
{
    uint32  index;                      // 弹幕序号（唯一编号）
    uint16  server_id;                  // 服务器Id
    string  server_name;    
    uint64  player_id;                  // 玩家Id
    string  player_name;    
    bool    is_up;                      // 是否点赞，不是赞就是踩
    uint32  text_id;                    // 弹幕文字Id
    uint32  time;                       // 弹幕时间
};
struct U2GS_dragon_city_text_info ->
{
    uint32  manor_id;                   // 领地Id
    uint32  last_index;                 // 上次弹幕结束序号，以避免重复，第一次传0值
};
struct GS2U_dragon_city_text_info <-
{
    uint32  manor_id;                   // 领地Id
    uint32  error_code;
    vector<dragon_city_text>  text_list;
};

// 推给客户端玩家进入地图的服务器ID
struct GS2U_player_enter_server_id <-
{
    uint16  server_id;                  // 服务器Id
    uint8 is_union;              // 是否同盟服务器地图 1 同盟 2非同盟
};

---------------------风暴龙城 end -----------------------------------------
//---------------------边境入侵---------------------
struct server_info
{
	string server_name;
	uint32 server_id;
	uint16 score;
	uint16 rank;
	vector<uint32> buffIDList;
	uint8 is_union; // 0 不可 1 可
	uint32 union_server_id; // 结盟服务器ID 无0
};
struct war_event
{
	uint32 timestamp;
	string text;
};

struct GS2U_BorderBossRankSync <-
{
	uint64					damage;		// 自己的伤害
	uint16					rank;		// 自己的排名
	vector<demonRankInfo>	rank_list;	// 伤害排行
};

struct U2GS_border_war_req_info ->
{
};

struct GS2U_border_war_info_ret <-
{
    vector<server_info> serverInfo; // 服务器信息
    vector<uint32> alive_boss; // 本服存活BOSSID
    vector<war_event> big_event; // 大事件
};

struct GS2U_border_war_season_info <-
{
    uint16 season; // 当前赛季
    uint32 season_start_time; //当前赛季开始时间
    uint32 season_end_time;   //当前赛季结束时间
    uint16 world_lv;     // 赛季开始时的世界等级
    uint16 weekly_season; // 周BP的赛季
    uint8  type;          // 赛季类型 1-体验赛季  2-正式赛季
    uint16 bp_fix_rate;   // 令牌BP修正率
};

struct border_war_bp
{
	uint8 type; // 类型 1 征战令牌 2 荣誉证书
	uint8 is_high; // 是否高级 0 否 1 是
	vector<uint32> has_award; // 已领列表
};

struct U2GS_border_war_bp_info_req ->
{
};
struct GS2U_border_war_bp_info <-
{
	uint32 honorLv;   //荣誉证书等级
	uint32 honorExp;  //荣誉证书经验
	uint32 conquerLv; //征战令牌等级
	uint32 conquerExp;//征战令牌经验
	vector<border_war_bp> info;
    uint32 next_week_reset_time;  //周重置时间
};
struct U2GS_border_war_bp_award ->
{
	uint8 type; // 类型 1 征战令牌 2 荣誉证书
	uint32 score;   //领取对应的等级
};
struct GS2U_border_war_bp_award_ret <-
{
	uint8 type; // 类型 1 征战令牌 2 荣誉证书
    uint32  err_code;               // 错误码
};
struct U2GS_border_war_bp_score_buy ->
{
	uint8 type; // 类型 1-征服点 2-荣誉点 3 征战令牌进阶 4 荣誉证书进阶
	uint16 times; // 购买次数
};
struct GS2U_border_war_bp_score_buy_ret <-
{
	uint8 type; // 类型 1-征服点 2-荣誉点 3 征战令牌进阶 4 荣誉证书进阶
	uint16 times; // 购买次数
	uint32 lv;   // 购买成功后的等级
	uint32 exp;  // 购买成功后的经验
    uint32  err_code;               // 错误码
};

// 升级令牌或升级荣誉证书
struct U2GS_border_war_bp_add_lv ->
{
	uint8 type; // 类型 1 征战令牌 2 荣誉证书
};
struct GS2U_border_war_bp_add_lv_ret <-
{
	uint8 type; // 类型 1 征战令牌 2 荣誉证书
	uint32  err_code;               // 错误码
	uint32 lv;   // 升级成功后的等级
	uint32 exp;  // 升级成功后的经验
};

// 任务进度信息
struct border_war_bp_task_info
{
	uint32 id;           // 任务id
	uint32 progress;     // 进度 （玩家达到的次数、积分、排名）
};

// 上线同步令牌任务信息
struct GS2U_border_war_bp_send_task_info <-
{
	vector<border_war_bp_task_info> task_info_list; //任务进度信息列表  所有未完成的任务
	vector<uint32> already_awarded_id; // 所有已完成的任务（自动领奖，已完成即已领奖）
};

// 更新令牌经验和任务完成情况
struct GS2U_border_war_bp_conquer_exp_update <-
{
	uint32 lv;  // 更新后的令牌等级
	uint32 exp;  // 更新后的令牌经验
	vector<uint32> awarded_id; // 完成的任务id（只发更新的）
	vector<border_war_bp_task_info> task_info_list; //任务进度信息列表（只发更新的）
};

// 任务重置  即重置进度和任务完成情况
struct GS2U_border_war_bp_task_reset <-
{
};

struct GS2U_SyncBorderWarCurse <-
{
	uint32		value;		// 当前诅咒值
};
struct inviteUnionListInfo
{
	string serverName;
	uint32 server_id;
	uint16 rank;
	string playerName;
};
struct GS2U_InviteUnionList <-
{
	vector<inviteUnionListInfo> info_list;
};
struct U2GS_RequesetUnion ->
{
	uint32 server_id;
};
struct GS2U_RequesetUnionRet <-
{
    uint32  err_code;               // 错误码
};
struct U2GS_InviteUnionReply ->
{
	uint32 server_id;
	uint8 reply; // 0 拒绝 1 接受
};
struct GS2U_InviteUnionReplyRet <-
{
    uint32  err_code;               // 错误码
};
struct U2GS_GetServerRankAward ->
{
};
struct GS2U_GetServerRankAwardRet <-
{
    uint32  err_code;               // 错误码
};
struct bossSummaryInfo
{
	uint32 boss_id;
	uint32 boss_level;
	uint8 is_alive; //0 死亡 1 存活
};
struct serverBossSummaryInfo
{
	string serverName;
	uint32 server_id;
	uint8 relation; // 0 本盟 1 同盟 2 敌对
    vector<bossSummaryInfo> info_list;
};
struct U2GS_ServerBossSummaryInfo ->
{
};
struct GS2U_ServerBossSummaryInfoRet <-
{
    vector<serverBossSummaryInfo> info_list;
};
struct borderServerReport
{
	uint32 server_id;
	string serverName;
	uint16 rank;
	uint8  relation; // 0 本服 1 同盟 2 敌对
	uint16 total_score;
	int change_score;
	uint16 kill_num;
	vector<key_value> boss_kill; //[{boss_id,times}]
};
struct borderPlayerReport
{
	uint16 rank;
	string serverName;
	string playerName;
	uint8  sex;
	uint16 param; // type=1 战功 type =2 击杀数
};
struct GS2U_BorderWarReport <-
{
    vector<borderServerReport> server_rank_info;
    vector<borderPlayerReport> score_rank_info;
    vector<borderPlayerReport> kill_rank_info;
};

// 边境召集 发送召集请求
struct U2GS_BorderConveneReq ->
{
	uint32		map_data_id;	// 地图id
	float		posX;			// 坐标x
	float		posY;			// 坐标y
};
// 边境召集返回
struct GS2U_BorderConveneRet <-
{
	uint32		err_code;		// 错误码
};

// 发送召集通知
struct GS2U_BorderConveneNotice <-
{
	uint32		server_id;		// 服务器id
	string		name;			// 召集人名
	uint32		military_rank;	// 军衔
	uint32		map_data_id;	// 地图id
	float		posX;			// 坐标x
	float		posY;			// 坐标y
};

struct U2GS_BorderWarBossKillMsgReq ->
{
	uint32 server_id;
	uint32 boss_id;
};
struct GS2U_BorderWarBossKillMsgRet <-
{
	vector<war_event> kill_msg; // 击杀记录
};

// 龙城边境拓展信息
struct dragon_city_border_more
{
    uint16  server_id;
    uint16  group_id;
    uint16  local_person_num; // 本服参与人数
    uint16  guild_member_num; // 本盟参与人数
};

struct GS2U_dragon_city_info_more <-
{
    uint32  error_code;
    vector<dragon_city_border_more>  more_list;
};
//---------------------边境入侵end------------------

// ========================== 边境夺宝 ==========================
// 请求活动信息
struct U2GS_GetDemonsBorderUI ->
{
};
struct GS2U_GetDemonsBorderUIRet <-
{
	uint32		start_time;		// 开始时间
	uint32		end_time;		// 结束时间
	uint32		score;			// 领地积分
};

// 推送活动状态
struct GS2U_DemonsBorderState <-
{
	uint8		state;			// 1-即将开始 2-进行中
	uint32		start_time;		// 开始时间
};

// 进入地图
struct U2GS_EnterDemonsBorder ->
{
};

// 退出地图
struct U2GS_ExitDemonsBorder ->
{
};

// 同步boss信息
struct DemonsBorderBoss
{
	uint32		boss_id;		// boss配置id
	uint32		level;			// 等级
	float		x;				// 坐标x
	float		y;				// 坐标y
	bool		is_born;		// 是否已刷新
	uint32		revive_time;	// 复活时间, 0表示已复活
};
struct GS2U_DemonsBorderBossListSync <-
{
	vector<DemonsBorderBoss>	boss_list;	// boss列表
};
struct GS2U_BorderWarBossListSync <-
{
	vector<DemonsBorderBoss>	boss_list;	// boss列表 边境入侵
};

struct GS2U_DemonsBorderBossListUpdate <-
{
	vector<DemonsBorderBoss>	boss_list;	// boss列表
};

// 伤害排行榜同步
struct GS2U_DemonsBorderRankSync <-
{
	uint64					damage;		// 自己的伤害
	uint16					rank;		// 自己的排名
	vector<demonRankInfo>	rank_list;	// 伤害排行
};

// 结算
struct GS2U_DemonsBorderSettleAccounts <-
{
	uint32				multiple;
	vector<CoinInfo>	coin_list;
	vector<itemInfo>	item_list;
	vector<EqInfo>		eq_list;
};

// ======================== 边境夺宝 end ========================

// ========================== 圣战遗迹 ==========================
// 圣坛信息
struct ChancelInfo
{
	uint32		map_data_id;	// 地图配置id
	uint32		server_id;		// 服务器id
	uint8		state;			// 状态 0-空闲中，不可攻击 1-争夺中，可攻击 2-已死亡，不可攻击
	uint32		start_time;		// 开始时间
	uint32		end_time;		// 结束时间
};

// boss信息
struct HolyWarBoss
{
	uint32				map_data_id;	// 地图配置id
	uint32				boss_id;		// boss配置id
	uint32				level;			// 等级
	uint32				dead_time;		// 死亡时间, 0表示已复活
	uint32				revive_time;	// 复活时间, 0表示已复活
	bool				is_attention;	// 是否关注
};

// 宝箱信息
struct HolyWarBox
{
	uint32		map_data_id;	// 地图配置id
	uint16		box_id;			// 宝箱配置id
	uint16		left_num;		// 剩余宝箱数量
	uint32		refresh_time;	// 上一波宝箱刷新时间
};

// 请求活动信息
struct U2GS_GetHolyWarUI ->
{
};
struct GS2U_GetHolyWarUIRet <-
{
	vector<ChancelInfo>	chancel_list;	// 圣坛信息
	vector<HolyWarBoss>	boss_list;		// boss列表
	vector<HolyWarBox>	box_list;		// 宝箱信息
	vector<uint32>		attentions;		// 关注列表(boss_id)
	uint8				times;			// 奖励获得次数
	uint8				curse;			// 诅咒值
};

// 进入地图
struct U2GS_EnterHolyWar ->
{
	uint32		map_data_id;	// 地图配置id
};

// 跨层传送
struct U2GS_HolyWarTransLayer ->
{
	uint32		map_data_id;	// 地图配置id
	uint32     	index; // 传送阵id，没有填0
};

// 奖励限定情况同步
struct GS2U_HolyWarLimitSync <-
{
	uint8		times;			// 奖励获得次数
	uint8		curse;			// 诅咒值
};

// 同步boss/宝箱信息
struct GS2U_HolyWarInfoSync <-
{
	vector<HolyWarBoss>	boss_list;		// boss列表
	vector<HolyWarBox>	box_list;		// 宝箱列表
	vector<ChancelInfo>	chancel_list;	// 圣坛信息
};
struct GS2U_HolyWarInfoUpdate <-
{
	vector<HolyWarBoss>	boss_list;		// boss列表
	vector<HolyWarBox>	box_list;		// 宝箱列表
	vector<ChancelInfo>	chancel_list;	// 圣坛信息
};

// 伤害排行榜同步
struct GS2U_HolyWarRankSync <-
{
	uint64					damage;		// 自己的伤害
	uint16					rank;		// 自己的排名
	vector<demonRankInfo>	rank_list;	// 伤害排行
};

// ======================== 圣战遗迹 end ========================

// 一键转移 道具 背包到仓库 仓库到背包
struct U2GS_one_click_transfer ->
{
    uint16  type;                   // 1 背包到仓库 2 仓库到背包
};
struct GS2U_one_click_transfer_ret <-
{
    uint32  err_code;              // 错误码
};

struct holy_shield_skill{
	uint32 skill_id;
	uint16 level;
}


//圣盾信息
struct GS2U_HolyShieldInfo <-
{
	uint16   level;   //等级
	uint16   level_exp;
	uint16   stage;  // 阶级
	uint16   stage_exp;
	vector<PillAttr> click_attr;  //单次升阶累计属性
	vector<holy_shield_skill>    skill_list;
};

//圣盾 升级
struct U2GS_HolyShieldUpLevel ->
{
	  vector<CostList>	cost_list;  // 消耗列表
};

struct GS2U_HolyShieldUpLevelRet <-
{
	uint8   error_code   // ErrorCode
};

//圣盾 升阶
struct U2GS_HolyShieldUpStage ->
{
	uint8 is_use_currency; // 1 使用，0 不用

};
struct GS2U_HolyShieldUpStageRet <-
{
	uint8   error_code  // ErrorCode
};

//圣盾 技能升级
struct U2GS_HolyShieldUpSkillLevel ->
{
	uint16 skill_id; // 技能ID
};

struct GS2U_HolyShieldUpSkillLevelRet <-
{
	uint8   error_code   //  ErrorCode
};

//圣盾 分解
struct U2GS_HolyShieldDecompose ->
{
	vector<CostList>	cost_list; // 消耗列表
};

struct GS2U_HolyShieldDecomposelRet <-
{
	uint8   error_code   //  ErrorCode
};

//------------------------abyss fight 深渊角斗------------------------------
struct U2GS_GetAbyssFightUI ->
{
};

struct GS2U_GetAbyssFightUIRet <-
{
    uint32  ac_start_timestamp; // 得到当前最近的一场活动的开启和结束时间
    uint32  ac_end_timestamp;     
    uint16  my_rank;            // 玩家当前排名 用于客户端显示奖励预览
    uint16  my_time;            // 最佳通关时长
    uint8   my_grade;           // 最佳评级
	uint32	join_time;			// 参与次数
};

// 请求房间列表
struct U2GS_GetAFRoomList ->
{
};
struct af_room
{
    uint64  room_id;
    
    string  player_name;
    string  server_name;
    uint32  player_lv;
    uint32	headid;	      //
    uint32	head_frame;	  // 头像框
    uint32	career;	  // 
    
    uint8   now_members;  //当前人数
    uint16  min_lv;         // 0 -无限制
    uint16  max_lv;         // 0 -无限制
    uint64  min_battle_value;   // 0 -无限制
};
struct GS2U_GetAFRoomList <-
{
    vector<af_room>   rooms;
};

// 创建房间
struct U2GS_AFCreateRoom ->
{
};
struct GS2U_AFCreateRoomRet <-
{
    uint32  err_code;   // 进入副本条件检查的错误码
};

// 获取所在房间信息
struct U2GS_GetAFRoomDetail ->
{
};
struct af_room_player
{
    uint64  player_id;
	uint32	join_time;	// 参与次数
    LookInfoPlayer4UI   ui_info;//显示相关信息
    uint8   state;      //   0-未准备  1- 准备
};
// 房间详细信息 加入房间 或者创建房间的时候同步
struct GS2U_AFRoomDetail <-
{
    uint16  min_lv;
    uint16  max_lv;
    uint64  min_battle_value;
    uint64  room_id;   // room_id 为房主id
    vector<af_room_player>   members;
};

// 玩家进入房间 将自己的信息推送给其他人
struct GS2U_AFRoomPlayerUpdate <-
{
    af_room_player   member;
};



// 设置房间
struct U2GS_AFRoomSet ->
{
    uint16  min_lv;
    uint16  max_lv;
    uint64  min_battle_value;
};
struct GS2U_AFRoomSetRet <-
{
    uint32  err_code;   
};
// 将设置的信息广播
struct GS2U_AFRoomSetSync <-
{
    uint16  min_lv;
    uint16  max_lv;
    uint64  min_battle_value;
};

// 加入/离开房间
struct U2GS_AFRoomOp ->
{
    uint8  op;   // 1-加入房间  2-离开房间
    uint64 room_id;
};
struct GS2U_AFRoomOpRet <-
{
    uint8  op;   // 1-加入房间  2-离开房间
    uint32  err_code;   
};

// 房主操作
struct U2GS_AFRoomOwnerOp ->
{
    uint8  op;   // 1-转移房主  2-踢人  3-提醒准备   4-开始进入地图  5-邀请
    uint64 player_id;
};
struct GS2U_AFRoomOwnerOpRet <-
{
    uint8  op;   
    uint64 player_id;
    uint32  err_code;   
};

// 邀请通知
struct GS2U_AFInviteNofity <-
{
	
	uint64			room_id; 
	uint8			  member_num;
	uint32			time;
	TeamInviterInfo leaderInfo;
};
struct U2GS_AFInviteHandle ->
{
	uint64	  room_id;
	uint8	  op;    // 1同意邀请   2拒绝邀请
};

struct GS2U_AFInviteHandleRet <-
{
	uint32    err_code;
	uint8	  op;    // 1同意邀请   2拒绝邀请
	string    name;  // 玩家名
};

// 成员操作
struct U2GS_AFRoomMemberOp ->
{
    uint8  op;   // 1-准备  2-取消准备  3-申请房主   4-催促队长
}; 
struct GS2U_AFRoomMemberOpRet <-
{
    uint8  op;   // 1-准备  2-取消准备  3-申请房主   4-催促队长
    uint32  err_code;   
};

// 房间内状态同步
// 房间设置同步、房主改变同步、玩家离开同步、玩家加入同步、玩家准备状态同步
struct GS2U_AFRoomMemberInfoSync <-
{
    uint8   tp;       // 1-进入准备  2-取消准备  3-离开房间  4-成为房主  5-队友申请成为房主  6-被房主催促准备  7-被队员催促开始  8-XX被踢出房间
    uint64  player_id;
};

struct U2GS_AFGetRoomInvateList ->
{
};
struct GS2U_AFGetRoomInvateListRet <-
{
	vector<InvitePlayer> friendList;      // 可邀请好友人员列表
	vector<InvitePlayer> guildList;       // 可邀请仙盟人员列表
	vector<InvitePlayer> nearbyList;      // 附近人员列表
};

// TODO 有人申请成为房主
// TODO 提醒玩家准备


// 副本未结束 主动退出
struct U2GS_AFExitMap ->
{
};

struct af_rank
{
    string  player_name;
    string  server_name;
    uint8   rank;     
    uint64  damage;   
};

// 结算信息
struct GS2U_AFSettleAccounts <-
{
  uint8   is_win;            // 是否成功
  
  uint16  my_time;            // 通关时长
  uint8   my_grade;           // 评级
  uint8   is_best;            // 是否最佳
  
  uint8  my_rank;            // 我的排名
  vector<af_rank>  rank_list;
  
	uint64				    exp;
	vector<CoinInfo>	coin_list;  
	vector<itemInfo>	item_list;
	vector<EqInfo>	  eq_list;	  
};


// 
struct U2GS_AFOpenBox ->
{
    uint8	op;		// 1-免费  2-道具
	uint64	box_id;	// 箱子id
};
struct GS2U_AFOpenBoxRet <-
{
    uint8   op;   // 1-免费  2-道具
	uint64	box_id;	// 箱子id
    uint32  err_code;   
};

//------------------------abyss fight 深渊角斗 END------------------------------

// ====================== 星座 ==================================
// 星座星魂信息
struct constellation_star_soul {
    uint16 position;        // 星魂位置
    uint64 equipment_id;    // 装备id
    uint32 level;           // 星魂强化等级
	uint32 awaken_lv;		// 觉醒等级
	uint32 bless_lv;		// 幸运祝福等级
	uint32 bless_pro_lv;	// 星魂祝福等级
};
// 守护信息
struct constellation_guard {
    uint16 position;        // 守护位置
    uint64 guard_id;        // 守护id
};
// 技能信息
struct constellation_skill {
    uint16 position;        // 技能位置
    uint32      id;         //星座id
    uint32 skill_id;        // 技能id
};
// 星石信息
struct constellation_gem {
    uint8 position;        // 星石位置
	uint64 uid;            // 星石实例id
	uint32 cfg_id;	       // 配置id
};
//星石技能
struct constellation_gem_skill {
    uint32 skill_id;        // 技能id
	uint16 skill_level;     // 技能等级
	uint8 state;            // 状态：0-未激活 1-已激活
};

// 星座基础信息
struct constellation_info {
    uint32 id;                                  //星座id
    uint32 star;                                // 星座星级
    vector<constellation_star_soul> star_soul;  // 星座星魂
    vector<constellation_guard> guard;          // 星座守护
	vector<constellation_gem> gem;              // 星石
	constellation_gem_skill     gem_skill;      // 星石技能 
};
// 发送星座信息
struct GS2U_constellation_info <-
{
	vector<constellation_info>      constellation_list;      // 星座信息
    vector<constellation_skill>     constellation_skill;    // 星座技能信息 
};
// 星魂更新
struct GS2U_constellation_update_star_soul <-
{
	uint32      id;                                 //星座id
    constellation_star_soul      star_soul;         // 星魂
};
// 守护更新
struct GS2U_constellation_update_guard <-
{
	uint32      id;                         // 星座id
    constellation_guard      guard;         // 守护
};
// 技能更新
struct GS2U_constellation_update_skill <-
{
    constellation_skill      skill;          // 技能
};
// 星级更新
struct GS2U_constellation_update_star <-
{
    uint32      id;                         // 星座id
    uint32      star;                       // 星级
};


// 升星
struct U2GS_constellation_up_star ->
{
    uint32      id;                         // 星座id
};
struct GS2U_constellation_up_star_ret <-
{
    uint32      id;                 // 星座id
    uint32  err_code;               // 错误码
};
// 装配星魂装备
struct U2GS_constellation_equip_star_soul_equipment ->
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
    uint64      equipment_id;               // 装备id
};
struct GS2U_constellation_equip_star_soul_equipmen_ret <-
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
    uint64      equipment_id;               // 装备id
    uint32      err_code;               // 错误码
};
// 卸下星魂装备
struct U2GS_constellation_remove_star_soul_equipment ->
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
};
struct GS2U_constellation_remove_star_soul_equipment_ret <-
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
    uint32      err_code;                       // 错误码
};
// 强化星魂
struct U2GS_constellation_enhance_star_soul ->
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
};
struct GS2U_constellation_enhance_star_soul_ret <-
{
    uint32      id;                         // 星座id
    uint16      star_soul_position_id;      // 星魂位置id
    uint32  err_code;                       // 错误码
};
// 觉醒
struct U2GS_constellation_eq_awaken ->
{
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
struct GS2U_constellation_eq_awaken_ret <-
{
	uint32		err_code;		// 错误码
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
// 幸运祝福
struct U2GS_constellation_eq_bless ->
{
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
struct GS2U_constellation_eq_bless_ret <-
{
	uint32		err_code;		// 错误码
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
// 星魂祝福
struct U2GS_constellation_eq_bless_pro ->
{
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
struct GS2U_constellation_eq_bless_pro_ret <-
{
	uint32		err_code;		// 错误码
	uint32		id;				// 星座id
	uint32		pos;			// 装备位置
};
// 星魂装备分解
struct U2GS_constellation_breakdown_star_soul_equipment ->
{
     vector<uint64>	uid_list;     // 分解消耗
};
struct GS2U_constellation_breakdown_star_soul_equipment_ret <-
{
    uint32      err_code;                       // 错误码
};
// 上阵守护上阵
struct U2GS_constellation_battle_guard ->
{
    uint32      id;                         // 星座id
    uint16      guard_position_id;          // 守护位置id
    uint32      guard_id;                   // 守护id
};
struct GS2U_constellation_battle_guard_ret <-
{
    uint32      id;                         // 星座id
    uint16      guard_position_id;          // 守护位置id
    uint32      guard_id;                   // 守护id
    uint32      err_code;                   // 错误码
};
// 下阵守护
struct U2GS_constellation_remove_guard ->
{
    uint32      id;                         // 星座id
    uint16      guard_position_id;          // 守护位置id
};
struct GS2U_constellation_remove_guard_ret <-
{
    uint32      id;                         // 星座id
    uint16      guard_position_id;          // 守护位置id
    uint32      err_code;                   // 错误码
};
//  解锁技能孔
struct U2GS_constellation_unlock_skill_position ->
{
    uint16      skill_position_id;          // 技能位置id
};
struct GS2U_constellation_unlock_skill_position_ret <-
{
    uint16      skill_position_id;          // 技能位置id
    uint32      err_code;                   // 错误码
};
// 装配技能
struct U2GS_constellation_equip_skill ->
{
    uint16      skill_position_id;          // 技能位置id
    uint32      id;                         // 星座id
    uint16      skill_index;                // 技能索引
    uint32      skill_id;                   // 技能id
};
struct GS2U_constellation_equip_skill_ret <-
{
    uint16      skill_position_id;          // 技能位置id
    uint32      id;                         // 星座id
    uint32      skill_id;                   // 技能id
    uint32      err_code;                   // 错误码
};
// 卸载技能
struct U2GS_constellation_remove_skill ->
{
    uint16      skill_position_id;          // 技能位置id
};
struct GS2U_constellation_remove_skill_ret <-
{
    uint16      skill_position_id;          // 技能位置id
    uint32      err_code;                   // 错误码
};
// 一键上阵守护
struct U2GS_constellation_battle_guard_one ->
{
    uint32      id;                             // 星座id
    vector<constellation_guard>  guard_list;     // 守护列表
};
struct GS2U_constellation_battle_guard_one_ret <-
{
    uint32      id;                         // 星座id
    uint32      err_code;                   // 错误码
};
// 一键装备
struct U2GS_constellation_equip_star_soul_equipment_one ->
{
    uint32      id;                             // 星座id
    vector<uint64>  equipment_id_list;          // 装备id [uint64]
};
struct GS2U_U2GS_constellation_equip_star_soul_equipment_one_ret <-
{
    uint32      id;                         // 星座id
    uint32  err_code;               // 错误码
};

// 玩家所有装备信息
struct GS2U_constellation_equipment_info <-
{
    vector<constellation_equipment>      equipment_list;          // 装备信息列表
};
// 装备更新
struct GS2U_constellation_equipment_update <-
{
    vector<constellation_equipment>      equipment_list;          // 装备信息列表
};

//星石更新
struct GS2U_constellation_update_gem <-
{
	uint32 id;            // 星座id
	vector<constellation_gem> gem;     // 星石
};

//升级星石
struct U2GS_constellation_gem_add_lv ->
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
	vector<key_value> cost_list; // 消耗列表 [{ItemID, Num}] 
};
struct GS2U_constellation_gem_add_lv_ret <-
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
	vector<key_value> cost_list; // 消耗列表 [{ItemID, Num}] 
	uint32 err_code;      // 错误码
};

//镶嵌星石
struct U2GS_constellation_gem_embed ->
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
	uint64 gem_id;        // 星石实例id
};
struct GS2U_constellation_gem_embed_ret <-
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
	uint64 gem_id;        // 星石实例id
	uint32 err_code;      // 错误码
};

//卸下星石
struct U2GS_constellation_gem_remove ->
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
};
struct GS2U_constellation_gem_remove_ret <-
{
	uint32 id;            // 星座id
	uint8 position;       // 星石位置
	uint32 err_code;      // 错误码
};

//一键镶嵌星石
struct U2GS_constellation_gem_embed_one_key ->
{
	uint32 id;            // 星座id
	vector<uint64> gem_id_list;   // 星石id列表
};
struct GS2U_constellation_gem_embed_one_key_ret <-
{
	uint32 id;            // 星座id
	uint32 err_code;      // 错误码
};

//更新星石技能
struct GS2U_constellation_gem_skill_update <-
{
	uint32      id;                         // 星座id
	constellation_gem_skill         skill;  // 星石技能
};

//升级星石技能（激活就能升级）
struct U2GS_constellation_gem_skill_add_lv ->
{
	uint32 id;                     // 星座id
    uint32      skill_id;          // 技能id
};
struct GS2U_constellation_gem_skill_add_lv_ret <-
{
	uint32 id;                              // 星座id
    uint32      skill_id;                   // 技能id
    uint32      err_code;                   // 错误码
};

//重置星石技能(等级返回1级)
struct U2GS_constellation_gem_skill_reset ->
{
	uint32 id;                     // 星座id
    uint32      skill_id;          // 技能id
};
struct GS2U_constellation_gem_skill_reset_ret <-
{
	uint32 id;                              // 星座id
    uint32      skill_id;                   // 技能id
    uint32      err_code;                   // 错误码
};

// ====================== 星座 end ==============================

// ======================== 古神圣装 start ==============================================
struct GS2U_ancient_holy_equipment_info <-
{
    vector<ancient_holy_equipment>     info_list       // 装备信息列表
};
// 穿戴信息
struct ancient_holy_eq_position {
    uint16              position;                   // 位置
    uint64              equipment_id;               // 装备id
    uint8               is_locked;                  // 基础属性 0 解锁 1 锁定
    vector<key_value>      refresh_awaken_attr;        // 刷新的觉醒属性 key代表类型,value代表id, 类型1 属性 2 技能
    vector<key_value>      awaken_attr;                // 觉醒属性 key代表类型,value代表id, 类型1 属性 2 技能
    uint16              enhancement_level;           // 强化等级
};
struct GS2U_ancient_holy_eq_position_info <-
{
    vector<ancient_holy_eq_position>     info_list       // 穿戴信息列表
};
// 穿戴
struct U2GS_ancient_holy_eq_equip ->
{
    vector<uint64>       equipment_id_list;          // 装备id列表
};
struct GS2U_ancient_holy_eq_equip_ret <-
{
    uint32      err_code;                           // 错误码
};
// 强化
struct U2GS_ancient_holy_eq_enhance ->
{
    uint16              position;                  // 位置
};
struct GS2U_ancient_holy_eq_enhance_ret <-
{
    uint16              position;                   // 位置
    uint32              err_code;                   // 错误码
};
// 更新强化等级
struct GS2U_ancient_holy_eq_pos_update_enhancement_level <-
{
    uint16              position;                    // 位置
    uint16              enhancement_level;           // 强化等级
};

// 觉醒
struct U2GS_ancient_holy_eq_awaken ->
{
    uint16       position;                  // 位置
    uint8        operation;                  // 操作 1 刷新属性 2 替换属性
};
struct GS2U_ancient_holy_eq_awaken_ret <-
{
    uint16      position;                   // 位置
    uint8       operation;                   // 操作 1 刷新属性 2 替换属性
    uint32      err_code;                   // 错误码
};
// 更新穿戴装备
struct GS2U_ancient_holy_eq_pos_update_equipment <-
{
    uint16              position;                   // 位置
    uint64              equipment_id;               // 装备id
};
// 更新觉醒属性
struct GS2U_ancient_holy_eq_pos_update_awaken <-
{
    uint16              position;                   // 位置
    vector<key_value>      awaken_attr;                // 觉醒属性 key代表类型,value代表id, 类型1 属性 2 技能
};
// 更新刷新觉醒属性
struct GS2U_ancient_holy_eq_pos_update_refresh_awaken <-
{
    uint16              position;                   // 位置
    vector<key_value>      refresh_awaken_attr;        // 刷新的觉醒属性 key代表类型,value代表id, 类型1 属性 2 技能
};
// 分解
struct U2GS_ancient_holy_eq_breakdown_equipment ->
{
    vector<uint64>	uid_list;     // 分解消耗
};
struct GS2U_ancient_holy_eq_breakdown_equipment_ret <-
{
    uint32      err_code;                       // 错误码
};
// 优先显示古神圣装开关
struct U2GS_ancient_holy_eq_display ->
{
};
struct GS2U_ancient_holy_eq_display_ret <-
{
    uint32      err_code;                       // 错误码
};
// ======================== 古神圣装 end ================================================

// 地图玩家人数
struct U2GS_getExorcismPlayerCountMsg ->
{
    uint32  map_data_id; // 地图配置id
};
// 玩家人数回复
struct GS2U_getExorcismPlayerCountMsg <-
{
	uint32		map_data_id; // 地图配置id
	uint32     err_code;   //  0表示成功获取到最大线，其他为失败原因
	vector<MapLineInfo>	line_list;  // 当前地图的所有的线路信息
};

// ======================== 龙神骑士 start ==============================================
struct guildMemberRank
{
	pb_uint16 rank;
	string name;
	uint64 playerid;
	pb_uint32 career;
	pb_uint32 headID;
	pb_uint32 frameID;
	pb_uint64 battleValue;
	pb_uint32 titleID;
};

struct guildRank
{
	pb_uint16 rank;
	string guildName;
	string chiefName;
	uint64 totalBattleValue;
	pb_uint16 now_member_num;
	pb_uint16 max_member_num;
};

struct top3Info
{
	uint8 rank; // 只有前三名
	string guildName;
	vector<guildMemberRank>  member_list;
	playerModelUI top1_model;
};
struct sectionAward
{
	uint8 start_rank; //分段起始排名
	pb_uint32 titleID;
	pb_uint32 titleItem;
	vector<IndexAwardItem>	award_item;	// 奖励物品 Index无用
	vector<IndexAwardEquip>	award_eq;		// 奖励装备
};

struct GS2U_dragon_honor_info_ret <-
{
	uint16 myGuildRankShow; // 0- 未上榜 显示20+ 
	uint16 myGuildRank; // 0-未上榜
	uint16 nowMyGuildRank; // 0-未上榜
	uint16 myRank;
	pb_uint32 myTitleID;  // 0-无
	uint32 lastSettleTime;    // 上一次结算时间
	vector<guildMemberRank>  my_member_list;
	vector<top3Info>  info_list;
	vector<guildRank>  rank_list; // 前20
};

struct U2GS_dragon_honor_daily ->
{
	uint32 id;		// 活动入口id
};
struct GS2U_dragon_honor_daily_ret <-
{
	uint32 id;
	uint32 err;
};

struct GS2U_dragon_honor_info_more <-
{
	string describe;
	string banner1;
	string banner2;	
	string banner3;
	string banner4;
	string banner5;
	string banner6;	
	string banner7;
	string banner8;
	pb_uint32 guildRankTime;
	pb_uint32 memberRankTime;
	vector<key_value>  reward_pic;
	vector<key_value>  member_section; // 排名分段
	vector<sectionAward>  section_award_1; // 战盟排名1 分段奖励
	vector<sectionAward>  section_award_2; // 战盟排名2 分段奖励
	vector<sectionAward>  section_award_3; // 战盟排名3 分段奖励
	vector<sectionAward>  section_award_4; // 战盟排名4 分段奖励
	vector<sectionAward>  section_award_5; // 战盟排名5 分段奖励
};
// 结算称号改变气泡
struct GS2U_dragon_honor_rank_change <-
{
};

// 公会骑士团请求
struct U2GS_guild_knight_info ->
{
};

// 公会骑士团返回
struct GS2U_guild_knight_info_ret <-
{
	uint16 index;          // 当前序号
	uint16 myGuildRankShow; // 0- 未上榜 显示20+ 
	uint16 myGuildRank; // 0-未上榜
	uint16 nowMyGuildRank; // 0-未上榜
	uint16 myRank;
	uint16 myLastRank;
	pb_uint32 myTitleID;  // 0-无
	vector<guildMemberRank>  my_member_list;
	vector<top3Info>  info_list;
	vector<guildRank>  rank_list; // 前20
	uint16 max_index;        // 最大序号
	uint32 next_guild_time;  // 下一次公会结算时间
	uint32 next_member_time; // 下一次成员结算时间
	uint32 start_time;       // 开始时间
};

// 公会骑士团轮次同步
struct GS2U_guild_knight_index_sync <-
{
	uint16 index;          // 当前序号
	uint16 max_index;        // 最大序号
	uint32 open_time;       // 本轮开始时间
};

// ======================== 龙神骑士 end ================================================

// ======================== 神位和神力天赋 start =========================================================
// 神力天赋信息
struct divine_talent {
    uint16                      id;                // 天赋id
    uint16                      star;              // 星级
    uint16                     point;             // 天赋点数
};
// 神力天赋总信息
struct GS2U_divine_talent_info <-
{
    vector<divine_talent>       info_list;      // 神力天赋信息列表
    uint16                      used_point;     // 已使用天赋点
    uint32                      reset_times;    // 重置次数
};

// 加点
struct U2GS_divine_talent_add_point ->
{
    uint16                      id;             // 天赋id
    uint16                      point;          // 加点数量
};
struct GS2U_divine_talent_add_point_ret <-
{
    uint16                      id;             // 天赋id
    uint16                      point;          // 加点数量
    uint32                      err_code;       // 错误码
};
// 更新天赋点数
struct GS2U_divine_update_talent_point <-
{
    uint16                      id;             // 天赋id
    uint16                      point;          // 加点数量
    uint16                      used_point;     // 已使用点数
};
// 升星
struct U2GS_divine_talent_add_star ->
{
    uint16                      id;             // 天赋id
    uint16                      star;           // 升星数量 需要提升的星数
};
struct GS2U_divine_talent_add_star_ret <-
{
    uint16                      id;             // 天赋id
    uint16                      star;           // 加点数量
    uint32                      err_code;       // 错误码
};
// 更新天赋星数
struct GS2U_divine_update_talent_star <-
{
    uint16                      id;             // 天赋id
    uint16                      star;           // 星数
};
// 重置加点
struct U2GS_divine_talent_reset ->
{
};
struct GS2U_divine_talent_reset_ret <-
{
    uint32                      err_code;       // 错误码
};


// 神位玩家信息
struct divine_god_show {
    uint64                      playerId;           // 玩家id
    uint32			            headID;             // 头像id
	uint32			            frame;              // 头像框
	uint32			            career;             // 职业
    string                      server_name;        // 入口服名称
    string                      player_name;        // 玩家名称
    uint8                       gender;             // 性别
    string                      guild_name;         // 战盟名称
};

// 神位信息
struct divine_god_show_info {
    uint16                          type;               // 神系
    uint16                          level;              // 神位
    vector<divine_god_show>         show_list;          // 神位玩家列表
};

// 获取神位玩家
struct U2GS_divine_god_show ->
{
};
struct GS2U_divine_god_show_ret <-
{
    vector<divine_god_show_info>     info_list;          // 神位玩家列表
};


// 玩家自己的神位信息
struct GS2U_divine_god <-
{
    uint16                      type;               // 神系
    uint16                      level;              // 神位
    uint16                      used_change_times;  // 重置周期内的转换次数
};

// 转换神系
struct U2GS_divine_talent_change_type ->
{
    uint16                      type;               // 目标神系
};
struct GS2U_divine_talent_change_type_ret <-
{
    uint16                      type;               // 目标神系
    uint32                      err_code;           // 错误码
};

// ======================== 神位和神力天赋 end ===========================================================
// ======================== 篝火BOSS start ===========================================================
// 玩家伤害详细排行信息
struct bonfirePlayerHurtDetail
{
	uint16				rank;//排名
	uint64				player_id;
	uint16				career;//职业
	uint16				head_id;//头像id
	uint16				head_frame;//头像框
	uint8               guild_postion; //战盟职位
	string				player_name;  //
	uint64				battle_value;//战斗力
	uint64				damage;
};
// 战盟伤害排行信息
struct bonfireGuildHurt
{
	uint16				rank;//排名
	uint64				guild_id;
	string				guild_name;
	uint64				damage;
	string              serverName;
};

// 战盟详细伤害排行信息
struct bonfireGuildHurtDetail
{
	uint16				rank;//排名
	string				guild_name;
	string              chairman_name;
	uint64				damage;
	string              serverName;
};

// boss刷新通知
struct GS2U_bornfire_boss_refresh_sync <-
{
};
// 本战盟玩家伤害排名
struct GS2U_bonfire_player_rank_sync <-
{
	uint16				my_rank;//自己的排名，0表示没有上榜
	uint64				my_damage;
	vector<demonRankInfo> rank_list;//排行榜
};

// 全服战盟伤害排名
struct GS2U_bonfire_guild_rank_sync <-
{
	uint16				my_rank;//本盟排名
	uint64				my_damage;//本盟伤害
	vector<bonfireGuildHurt> rank_list;//排行榜
};

struct U2GS_bonfire_detail_rank_req ->
{
    uint8               type;               // 1-玩家排行 2-战盟排行
};
// 详细玩家伤害排名
struct GS2U_bonfire_player_rank_detail <-
{
	vector<bonfirePlayerHurtDetail> rank_list;//排行榜
};
// 详细战盟伤害排名
struct GS2U_bonfire_guild_rank_detail <-
{
	vector<bonfireGuildHurtDetail> rank_list;//排行榜
};
struct GS2U_bonfire_end <-
{
	uint16				my_rank;//自己的排名，0表示没有上榜
	uint16				my_guild_rank;//战盟排名，0表示没有上榜
	uint64				my_damage;
	uint64				my_guild_damage;
	vector<bonfirePlayerHurtDetail> rank_list;//排行榜
	vector<itemInfo>	item_list;
	vector<EqInfo>		eq_list;
};
// 请求活动时间
struct U2GS_bonfire_time_req ->
{
};
// BOSS喊话
struct GS2U_bonfire_boss_say <-
{
	uint32 index;//喊话编号
};
// 阶段BOSS事件结束通知
struct GS2U_bonfire_boss_event_end <-
{
};

// 选择开放时间
struct U2GS_bonfire_set_time ->
{
    uint8               id;
};
struct GS2U_bonfire_set_time_ret <-
{
    uint8               id;
    uint32              err_code;           // 错误码
};
// ======================== 篝火BOSS end ===========================================================
// ========================== 成神玩法 ==========================
// 进入神力战场副本
struct U2GS_EnterDungeonGod ->
{
	uint32		dungeon_id;		// 副本id
};

// 退出神力战场
struct U2GS_ExitDungeonGod ->
{
};

// 神力战场副本信息
struct U2GS_DungeonGodInfo ->
{
};
struct GS2U_DungeonGodInfo <-
{
	uint32  	max_wave;			// 最大波数
	uint32  	max_score;			// 最高积分
};

// 结算信息
struct GS2U_DungeonGodSettleAccounts <-
{
	uint8				isWin;		// 1:胜利;0:失败
	uint32				wave;		// 波数
	uint32				score;		// 积分
	uint64				exp;		// 经验
	vector<CoinInfo>	coinList;	// 货币列表
	vector<itemInfo>	itemList;	// 道具列表
	uint8				settleType;	// 结算类型
	uint8				isNewScore;	// 是否新记录
	vector<EqInfo>		eq_list;	// 奖励装备列表
};


// 主神争夺玩家信息
struct GodFightPlayer
{
	uint64     			player_id;		// 玩家id
	string				name;			// 角色名
	uint8				sex;			// 性别
	uint32				career;			// 职业
	uint32				head_id;		// 头像id
	uint32				head_frame;		// 头像框
	string				server_name;	// 服务器名
	string				guild_name;		// 战盟名
	vector<EqLookInfo>	eq_list;		// 装备列表
	uint32				wing_id;		// 佩戴的翅膀id
	uint32				weapon_id;		// 神兵id
	uint8				weapon_vfx;		// 神兵特效
	uint32				weapon_level;	// 神兵阶数
	uint32				weapon_star;	// 神兵星级
	uint32              ancient_eq_id;	// 古神圣装最低品质装备配置id
    uint32              ancient_eq_elv;	// 古神圣装最低强化等级
	uint64				battle_value;	// 战力
	uint32				god_type;		// 系别
	uint8				rank;			// 排名
	uint32				score;			// 积分
};

// 主神争夺轮次信息
struct GodFightRound
{
	uint64			fight_id;		// 轮次id
	uint32			type;			// 系别
	uint8			round;			// 轮次(1-4为循环赛,5为总决赛)
	uint8			group;			// 分组(1:A组,2:B组)
	uint64			player1;		// 玩家1
	uint64			player2;		// 玩家2
	uint32			start_time;		// 开战时间
	uint32			end_time;		// 结束时间
	uint64			winner;			// 胜者
};

// 主神信息
struct GodFightTop
{
	uint32			type;			// 系别
	topPlayer		topMsg;			// 外观信息
};

// 获取主神争夺信息
struct U2GS_GetGodFightInfo ->
{
	uint32					type;		// 神系(为0时请求所有)
};
struct GS2U_GetGodFightInfoRet <-
{
	uint32					type;		// 神系(为0时代表所有)
	uint32					next_start;	// 下一场时间
	vector<GodFightPlayer>	players;	// 参战玩家信息(8个玩家)
	vector<GodFightRound>	rounds;		// 轮次信息(包括循环赛,加时赛和总决赛)
};

// 进入主神争夺
struct U2GS_EnterGodFight ->
{
	uint64		fight_id;		// 轮次id
	uint8		is_viewer;		// 是否观战
};

// 主神争夺对战信息
struct GS2U_GodFightInfo <-
{
	uint64		fight_id;				// 轮次id
	uint8		is_viewer;				// 是否观战
	vector<GodFightPlayer>	players;	// 对战玩家信息
	uint8		state;					// 对战状态
	uint32		end_time;				// 结束时间
};

// 获取主神信息
struct U2GS_GodFightTopsReq ->
{
	uint32				type;	// 神系
};
struct GS2U_GodFightTopsRet <-
{
	vector<GodFightTop>	tops;		// 所有系的主神
	vector<GodFightTop>	last_tops;	// 上一轮的主神
};

// 活动状态同步
struct GS2U_GodFightAcStateSync <-
{
	uint8			state;				// 阶段
	uint32			next_time;			// 下一阶段时间
};

// 主神争夺结算
struct GS2U_GodFightSettleAccounts <-
{
	uint8					round;		// 轮次(1-4为循环赛,5为总决赛)
	uint64					winner;		// 胜者玩家id
	vector<GodFightPlayer>	players;	// 对战玩家信息
	vector<uint32>			fight_score;// 比分(胜,负)
	uint64					exp;		// 经验
	vector<CoinInfo>		coinList;	// 货币列表
	vector<itemInfo>		itemList;	// 道具列表
	uint8					settleType;	// 结算类型
	uint8					isDirectWin;// 是否直接胜利
	uint8					isFinal;	// 是否最后一场
	uint32					next_time;	// 下一场时间
};

// ======================== 成神玩法 end ========================


// ========================== 星空圣墟 ==========================
// boss信息
struct HolyRuinsBoss
{
	uint32				map_data_id;	// 地图配置id
	uint32				boss_id;		// boss配置id
	uint32				level;			// 等级
	uint32				dead_time;		// 死亡时间, 0表示已复活
	uint32				revive_time;	// 复活时间, 0表示已复活
	bool				is_attention;	// 是否关注
};

// 采集物信息
struct HolyRuinsCollection
{
	uint32		map_data_id;		// 地图配置id
	uint16		collection_id;		// 采集物配置id
	uint16		left_num;			// 剩余采集物数量
	uint32		next_refresh_time;	// 下一波采集物刷新时间
	bool		is_attention;		// 是否关注
};

// 请求活动信息
struct U2GS_GetHolyRuinsUI ->
{
};
struct GS2U_GetHolyRuinsUIRet <-
{
	vector<HolyRuinsBoss>		boss_list;		// boss列表
	vector<HolyRuinsCollection>	collection_list;// 采集物信息
};

// 进入地图
struct U2GS_EnterHolyRuins ->
{
	uint32		map_data_id;	// 地图配置id
};

// 奖励限定情况同步
struct GS2U_HolyRuinsLimitSync <-
{
	uint16						times;			// 高级采集物次数
	uint8						curse;			// 诅咒值
};

// 同步boss/采集物信息
struct GS2U_HolyRuinsInfoSync <-
{
	vector<HolyRuinsBoss>		boss_list;		// boss列表
	vector<HolyRuinsCollection>	collection_list;// 采集物列表
};
struct GS2U_HolyRuinsInfoUpdate <-
{
	vector<HolyRuinsBoss>		boss_list;		// boss列表
	vector<HolyRuinsCollection>	collection_list;// 采集物列表
};

// 伤害排行榜同步
struct GS2U_HolyRuinsRankSync <-
{
	uint64					damage;		// 自己的伤害
	uint16					rank;		// 自己的排名
	vector<demonRankInfo>	rank_list;	// 伤害排行
};

// ======================== 星空圣墟 end ========================
// ======================== 协助 start ===========================================================
// 协助者伤害信息
struct helper_damage {
	uint64 playerID;
	string playerName;
	uint16 rank;
	uint64 damage;
};

struct helper_info {
	uint64  playerID;
	string  playerName;
	uint32  playerLv;
	uint8   playerSex;
	uint16  vip;
    uint32	headid;	      // 头像
    uint32	head_frame;	  // 头像框
    uint32	career;	  // 
};

// 协助请求信息
struct helper_msg {
	uint64  help_id; //协助请求id
	uint64  playerID;    // 请求者id
    uint32  map_data_id; // 地图配置id
    uint32  map_ai;
    uint32  boss_data_id; // boss配置id
    uint32  monster_lv;
    float x;
    float y;
	helper_info player_info;
};

struct help_red_stc
{
	uint64 help_id;
	uint64 player_id;
	uint32 map_data_id;
	uint16 open_aciton_id;	
};

// 商船协助请求信息
struct ship_helper_msg {
	uint64  help_id; 						// 协助请求id
	uint64  playerID;    					// 请求者id
	uint64  plunder_id;						// 掠夺者id
	uint8   ship_type;                      // 商船类型
	string  plunder_guild_name; 			// 掠夺者战盟名称
	string  plunder_name;					// 掠夺者名字
	uint8   plunder_sex;					// 掠夺者性别
	uint64  plunder_battlev;				// 掠夺者战力
	vector<rewardStc>   plunder_list; 		// 被掠夺奖励
    vector<rewardStc>   retake_list; 		// 已夺回奖励
	helper_info player_info;
};

// 商船协助成功信息
struct ship_help_succ
{
	uint64  msg_id; 						// 消息id
	uint8   ship_type;						// 商船类型
	uint8   index;                    		// 序号
	string  plunder_name;					// 掠夺者名字
	uint8   plunder_sex;					// 掠夺者性别
	vector<rewardStc>   reward_list; 		// 夺回奖励
	helper_info player_info;
};

// 发起协助
struct U2GS_requestHelp ->
{
    uint32  map_data_id; // 地图配置id
    uint64  boss_id;     // boss实例ID
};
struct GS2U_requestHelpRet <-
{
    uint32  err;
};

// 发起通用协助
struct U2GS_requestHelpCommon ->
{
    uint32 openActionID; // 功能开启id
    uint64 param1;		 // 商船-袭击者id
    uint64 param2;		 // 商船-商船id

};
struct GS2U_requestHelpCommonRet <-
{
    uint32 err;
    uint32 openActionID;
    uint64 param1;
    uint64 param2;
};

// 响应协助
struct U2GS_respondHelp ->
{
	uint64 help_id; //协助请求id
};
struct GS2U_respondHelpRet <-
{
    uint32  err;
};

// 响应通用协助
struct U2GS_respondHelpCommon ->
{
	uint64 help_id; //协助请求id
};
struct GS2U_respondHelpCommonRet <-
{
    uint32  err;
};

// 请求协助奖励
struct U2GS_getHelpBoxAward ->
{
	uint64 id; //消息id
};
struct GS2U_getHelpBoxAwardRet <-
{
    uint32  err;
};

// 请求协助奖励消息信息
struct U2GS_getHelpBoxMsg ->
{
	uint64 id; //消息id
};
struct GS2U_getHelpBoxMsgRet <-
{
    uint32  err;
    helper_info player_info;  // 求助者信息
    uint16 index;    //感谢语编号
};

// 协助者伤害列表
struct U2GS_getHelpDamageInfo ->
{
};
struct GS2U_getHelpDamageInfoRet <-
{
	vector<helper_damage>	list;  // 协助者伤害列表
};

struct GS2U_myHelpDamage <-
{
	uint64 damage; //我造成的协助伤害
};

// 获取协助请求列表
struct U2GS_getHelpRequst ->
{
};

struct GS2U_getHelpRequstRet <-
{
	uint32 err;
	vector<helper_msg>	list;  // 协助请求列表
	vector<ship_helper_msg>	ship_list;  // 商船协助请求列表
};

// 请求心意宝箱显示内容
struct U2GS_getHelpBoxContent ->
{
};
struct GS2U_getHelpBoxContentRet <-
{
	vector<helper_info>	player_info_list;  // 协助者列表
};

// 取消协助
struct U2GS_cancelHelp ->
{
	uint8 type; // 1-协助者中止帮助 2-求助者取消帮助
};
struct GS2U_cancelHelpRet <-
{
	 uint32  err;
};
struct GS2U_helpState <-
{
	uint8 state; //0 非协助者 1协助者 2 求助者
	string name; // 
};

// 收到感谢
struct GS2U_receiveTksMsg <-
{
	vector<uint64>	id_list;
};

// 对区域内boss造成伤害的玩家
struct GS2U_damagePlayerList <-
{
	vector<uint64>	id_list; 
};

// 协助成功
struct GS2U_helpSuccess <-
{
	uint32 err; // 0 成功 弹窗 其他值为错误码 飘字 以下字段无效
	uint16 percent; // 加成
	uint16 score; //获得积分
	uint32 monsterID;
	uint16 monsterLv;
	string playerName; //帮助的玩家
};

// 通知收到新的协助请求
struct GS2U_receiveNewHelpReq <-
{
	uint64 help_id;
	uint32 map_data_id;
	uint16 open_aciton_id;
};

struct GS2U_HelpRedSync <-
{
	vector<help_red_stc> red_list;
};

// 通知协助消息已经没了
struct GS2U_clearNewHelpReq <-
{
	uint64  help_id;
};

// 协助者进入地图通知求助者
struct GS2U_playerStartHelpU <-
{
	string playerName;
};

// 商船协助成功信息
struct GS2U_shipHelpFinishMsg <-
{
	vector<ship_help_succ>	msg_list; 
};

// 通用求助者领取协助消息奖励
struct U2GS_helpCommonReward ->
{
	uint64  msg_id; 						// 消息id
	uint16  index;    						// 感谢语编号
};
struct GS2U_helpCommonRewardRet <-
{
	 uint32  err;
};
// ======================== 协助 end ===========================================================

// ========================== 血脉 ==========================
// 血脉技能信息
struct BloodSkill
{
	uint32				order;		// 技能序号
	uint32				level;		// 等级
};

// 血脉信息
struct Bloodline
{
	uint32				blood_id;	// 血脉id
	uint32				level;		// 等级
	uint32				exp;		// 经验
	vector<BloodSkill>	skills;		// 技能
};

// 同步血脉信息
struct GS2U_BloodInfoSync <-
{
	vector<Bloodline>	bloods;		// 血脉信息
};

// 激活血脉请求
struct U2GS_ActiveBloodlineReq ->
{
	uint32				blood_id;	// 血脉id
};

// 激活血脉返回
struct GS2U_ActiveBloodlineRet <-
{
	uint32				err_code;	// 错误码
	uint32				blood_id;	// 血脉id
};

// 血脉升级请求
struct U2GS_BloodlineAddExpReq ->
{
	uint32				blood_id;	// 血脉id
	vector<CostList>	costs;		// 消耗列表
};

// 血脉升级返回
struct GS2U_BloodlineAddExpRet <-
{
	uint32				err_code;	// 错误码
	uint32				blood_id;	// 血脉id
};

// 血脉技能升级请求
struct U2GS_BloodSkillAddLevelReq ->
{
	uint32				blood_id;	// 血脉id
	uint32				order;		// 序号
};

// 血脉技能升级返回
struct GS2U_BloodSkillAddLevelRet <-
{
	uint32				err_code;	// 错误码
	uint32				blood_id;	// 血脉id
	uint32				order;		// 序号
};
// ======================== 血脉 end ========================

// ======================== 圣甲  ========================
// 圣甲宝石信息
struct ShengJiaGem
{
	uint16	stage; 					//圣甲阶级   
	vector<GemPosInfo>  gem_list; 	//阶级宝石镶嵌信息
};
// 圣甲信息
struct GS2U_ShengJiaInfo <-
{
	uint16   level;      // 圣甲等级
	vector<ShengJiaGem> gem_list;  //所有宝石列表
};

//圣甲 升级
struct U2GS_ShengJiaLevelUp ->
{
};
struct GS2U_ShengJiaUpStarRet <-
{
	uint8	level; 			//圣甲等级   
	uint32   error_code;  	// ErrorCode
};

//圣甲 镶嵌宝石
struct U2GS_ShengJiaGemEquip ->
{
	uint16	stage; 			//圣甲阶级   
	uint16	pos;    		//装配位置
	uint64	gem_uid;  		//宝石的实例ID  传0则为卸下宝石
};
struct GS2U_ShengJiaGemEquipRet <-
{
	uint16	stage; 			//圣甲阶级   
	uint16	pos;    		//装配位置
	uint64	gem_uid;  		//宝石的实例ID
	uint32   error_code;  	// ErrorCode
};

// ======================== 圣甲 end ========================

// ======================== 圣翼 start ===========================================================
// 位置信息
struct pos_value {
    uint16                      pos;                    // 位置
    uint64                      value;                  // uid
};

// 圣翼列表
struct GS2U_holy_wing_list <-
{
    vector<holy_wing>      wh_list;                     // 圣翼列表
};
// 圣翼增加
struct GS2U_add_holy_wing <-
{
    vector<holy_wing>      wh_list;                     // 增加的圣翼列表
};
// 圣翼删除
struct GS2U_delete_holy_wing <-
{
    vector<uint64>      wh_id_list;                     // 删除的圣翼id列表
};

// 圣翼信息
struct holy_wing_info {
    uint16                      level_id;               // level_id  圣翼级别
    uint64                      equipment_id;           // 圣翼id  0表示未装配
    uint16                      intensify_lv;           // 强化等级
    uint16                      refine_lv;              // 精炼等级
    uint32                      refine_exp;             // 精炼经验
    uint16                      awaken_lv;              // 觉醒等级
    uint8                       awaken_skill;           // 觉醒技能配置索引 0表示没有技能
    vector<pos_value>           rune_pos;               // 符文镶嵌信息 pos 位置 value 符文id 0表示未装配
};

// 圣翼技能
struct holy_wing_skill{
    uint32                      skill_id;               // 圣翼技能id
    uint16                      level;                  // 圣翼技能等级
    uint32                      exp;                    // 圣翼技能经验
};
// 圣翼技能列表 包括被动技能
struct GS2U_holy_wing_skill_list <-
{
    vector<holy_wing_skill>      initiative_list;       // 主动技能列表
    vector<holy_wing_skill>      passive_list;          // 被动技能列表
};

// 圣翼技能位信息
struct GS2U_holy_wing_skill_pos <-
{
    vector<pos_value>           initiative_skill_pos;   // 主动装配列表
    uint16                      initiative_pos;         // 主动技能槽 （只包含扩展的）
    uint16                      used_initiative_pos;    // 已使用的技能槽数量
    vector<pos_value>           passive_skill_pos;      // 被动装配列表
    uint16                      passive_pos;            // 被动技能槽（只包含扩展的）
    uint16                      used_passive_pos;       // 已使用的技能槽数量
};


// 圣翼总信息
struct GS2U_holy_wing_info <-
{
    uint8                       type;                   // 圣翼类型
    vector<holy_wing_info>      info_list;              // 圣翼级别信息列表
    vector<key_value>           wings_bonus;            // 翅膀加点
    uint32                      show_id;                // 外显id 0表示未设置
};

// 激活圣翼
struct U2GS_holy_wing_choose ->
{
    uint16                      type;                   // 圣翼类型
};
struct GS2U_holy_wing_choose_ret <-
{
    uint8                       type;                   // 圣翼类型
    uint32                      err_code;               // 错误码
};
// 更新类型
struct GS2U_update_holy_wing_type <-
{
    uint8                       type;                   // 圣翼类型
};

// 装配/替换/卸下圣翼
struct U2GS_holy_wing_equip ->
{
    uint64                      equipment_id;           // 圣翼id 0表示卸下
    uint16                      level_id;               // 圣翼级别id
};
struct GS2U_holy_wing_equip_ret <-
{
    uint64                      equipment_id;           // 圣翼id
    uint16                      level_id;               // 圣翼级别id
    uint8                       op;                     // 1 装配 2 替换  3 卸下 0 其他
    uint32                      err_code;               // 错误码
};
// 更新装配的圣翼
struct GS2U_update_holy_wing_equipment_id <-
{
    uint16                      level_id;               // 圣翼级别id
    uint64                      equipment_id;           // 圣翼id
};

// 圣翼强化
struct U2GS_holy_wing_intensify ->
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      add_lv;                 // 增加的等级
};
struct GS2U_holy_wing_intensify_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      add_lv;                 // 增加的等级
    uint32                      err_code;               // 错误码
};
// 更新圣翼的强化等级
struct GS2U_update_holy_wing_intensify_lv <-
{
    uint16                      level_id;               // 圣翼级别id
    uint64                      intensify_lv;           // 强化等级
};

// 圣翼精炼
struct U2GS_holy_wing_refine ->
{
    uint16                      level_id;               // 圣翼级别id
    vector<uint64>              item_list;              // 消耗的道具列表
};
struct GS2U_holy_wing_refine_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint32                      err_code;               // 错误码
};
// 更新圣翼的精炼等级
struct GS2U_update_holy_wing_refine <-
{
    uint16                      level_id;               // 圣翼级别id
    uint64                      refine_lv;              // 精炼等级
    uint64                      refine_exp;             // 精炼经验
};

// 圣翼觉醒
struct U2GS_holy_wing_awaken ->
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      add_lv;                 // 增加的等级
};
struct GS2U_holy_wing_awaken_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      add_lv;                 // 增加的等级
    uint32                      err_code;               // 错误码
};
// 更新圣翼的觉醒等级
struct GS2U_update_holy_wing_awaken_lv <-
{
    uint16                      level_id;               // 圣翼级别id
    uint64                      awaken_lv;              // 觉醒等级
};

// 圣翼觉醒技能选择
struct U2GS_holy_wing_awaken_skill ->
{
    uint16                      level_id;               // 圣翼级别id
    uint8                       skill_index;            // 技能索引
};
struct GS2U_holy_wing_awaken_skill_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint8                       skill_index;            // 技能索引
    uint32                      err_code;               // 错误码
};

// 圣翼符文装配/替换/卸载
struct U2GS_holy_wing_rune_equip ->
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      pos;                    // 孔位置
    uint64                      rune_id;                // 圣翼符文id  0表示卸下
};
struct GS2U_holy_wing_rune_equip_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      pos;                    // 孔位置
    uint64                      rune_id;                // 圣翼符文id
    uint8                       op;                     // 1 装配 2 替换  3 卸下 0 其他
    uint32                      err_code;               // 错误码
};
// 更新圣翼装配的符文
struct GS2U_update_holy_wing_rune_equip <-
{
    uint16                      level_id;               // 圣翼级别id
    uint16                      pos;                    // 孔位置
    uint64                      rune_id;                // 圣翼符文id
};

// 符文升级
struct U2GS_holy_wing_rune_lv ->
{
    uint64                      rune_id;                // 圣翼符文uid
};
struct GS2U_holy_wing_rune_lv_ret <-
{
    uint64                      rune_id;                // 圣翼符文uid
    uint32                      err_code;               // 错误码
};

// 圣翼技能升级
struct U2GS_holy_wing_skill_lv ->
{
    uint32                      skill_id;               // 圣翼技能id
    vector<CostList>            cost_list;                 // 增加的等级
};
struct GS2U_holy_wing_skill_lv_ret <-
{
    uint32                      skill_id;               // 圣翼技能id
    uint32                      err_code;               // 错误码
};
// 更新圣翼技能 添加 升级
struct GS2U_update_holy_wing_skill <-
{
    holy_wing_skill             skill;                  // 圣翼技能
};

// 圣翼解锁技能槽
struct U2GS_holy_wing_skill_unlock ->
{
     uint8                       type;                  // 1 主动技能槽 2被动技能槽
     uint16                      add_num;               // 解锁的数量
};
struct GS2U_holy_wing_skill_unlock_ret <-
{
    uint8                       type;                   // 1 主动技能槽 2被动技能槽
    uint16                      add_num;                // 解锁的数量
    uint32                      err_code;               // 错误码
};
// 更新圣翼技能槽数量
struct GS2U_update_holy_wing_skill_pos <-
{
    uint8                       type;                   // 1 主动技能槽 2被动技能槽
    uint16                      pos_num;                // 技能槽数量
};

// 圣翼装配技能
struct U2GS_holy_wing_skill_equip ->
{
    uint8                       type;                   // 1 主动技能槽 2被动技能槽
    uint16                      index;                  // 位置
    uint32                      skillId;                // 技能id
};
struct GS2U_holy_wing_skill_equip_ret <-
{
    uint8                       type;                   // 1 主动技能槽 2被动技能槽
    uint16                      index;                  // 位置
    uint32                      skillId;                // 技能id
    uint32                      err_code;               // 错误码
};
// 更新圣翼技能装配
struct GS2U_update_holy_wing_skill_equip <-
{
    uint8                       type;                   // 1 主动技能槽 2被动技能槽
    uint16                      index;                  // 位置
    uint32                      skillId;                // 技能id
};

// 圣翼翅膀加成
struct U2GS_holy_wing_bouns ->
{
    uint16                      point_index;            // 需要选择的点的索引
    uint8                       bouns_index;            // 选择的加成索引
};
struct GS2U_holy_wing_bouns_ret <-
{
    uint16                      point_index;            // 需要选择的点的索引
    uint8                       bouns_index;            // 选择的加成索引
    uint32                      err_code;               // 错误码
};

// 解锁圣翼级别
struct U2GS_holy_wing_unlock ->
{
    uint16                      level_id;               // 圣翼级别id
};
struct GS2U_holy_wing_unlock_ret <-
{
    uint16                      level_id;               // 圣翼级别id
    uint32                      err_code;               // 错误码
};
// 圣翼外显装配
struct U2GS_holy_wing_show ->
{
    uint32                      cfg_id;                 // 圣翼道具id
};
struct GS2U_holy_wing_show_ret <-
{
    uint32                      cfg_id;                 // 圣翼道具id
    uint32                      err_code;               // 错误码
};

// 圣翼合成
struct U2GS_synthesize_holy_wing ->
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	vector<uint64> base_cost;   // 基础消耗
	vector<uint64> suc_cost;    // 成功率消耗
	vector<uint64> type_cost;   // 类型偏向消耗
};

struct GS2U_synthesize_holy_wing_ret <-
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	uint32		cfg_id;	    // 合成道具id
	uint32      suc_times;  // 累计合成成功次数
	uint32		result;		// 反馈ID
};

struct GS2U_synthesize_holy_wing_suc_times <-
{
	vector<uint16>  suc_times_list;  // 圣翼合成成功次数列表
};

// ======================== 圣翼 end =============================================================

// ========================== 元素试炼 ==========================
// 区域信息
struct EtArea
{
	uint32				map_data_id;	// 地图id
	uint32				area_id;		// 区域id
	uint8				state;			// 状态
	uint8				character;		// 品质
	uint32				refresh_time;	// 上次刷新时间
	uint64				owner_id;		// 归属玩家id
	string				owner_name;		// 归属玩家名
};

// 请求活动信息
struct U2GS_GetElementTrialUI ->
{
};
struct GS2U_GetElementTrialUIRet <-
{
	vector<EtArea>	area_list;		// boss列表
	uint32			buy_curse;		// 购买的诅咒值
	uint32			day_buy_times;	// 当天购买的次数
	uint32			used_curse;		// 当前诅咒值
};

// 进入地图
struct U2GS_EnterElementTrial ->
{
	uint32		map_data_id;	// 地图配置id
};

// 诅咒值同步
struct GS2U_ElementTrialCurseSync <-
{
	uint32		buy_curse;		// 购买的诅咒值
	uint32		day_buy_times;	// 当天购买的次数
	uint32		used_curse;		// 当前诅咒值
	uint32		enter_time;		// 进入时间
	uint32		curse_time;		// 上次计算诅咒值的时间
	
};

// 区域信息同步
struct GS2U_ElementTrialAreaSync <-
{
	EtArea		area;			// 区域信息
};

// 购买诅咒值
struct U2GS_ElementTrialBuyCurse ->
{
	uint32		buy_times;		// 购买次数
};
struct GS2U_ElementTrialBuyCurseRet <-
{
	uint32		err_code;		// 错误码
	uint32		buy_times;		// 购买次数
	uint32		buy_curse;		// 购买的总诅咒值
	uint32		day_buy_times;	// 当天购买的次数
	uint32		used_curse;		// 当前使用的诅咒值
};

// 获得积分
struct GS2U_ElementTrialScoreDrop <-
{
	uint32		score;			// 积分
};

// 结算
struct GS2U_ElementTrialSettle <-
{
	uint32		total_score;		// 累计获得积分
};

// ======================== 元素试炼 end ========================


// ======================== 圣纹  ========================
// 圣纹单个位置信息
struct ShengWenPos
{
	uint8		pos;		  // 部位ID 
	uint64		uid;		  // uid   为-1则未解锁，为0则解锁未装配
	uint32		cfg_id;		  // cfg_id	
	uint16    	intensify_lv; // 强化等级
	uint16    	gongming_lv;  // 共鸣等级
};

// 圣纹位置列表（一键装配时使用）
struct ShengWenPosUid
{
	uint8 		pos;		// 位置
	uint64 		uid;		// 圣纹实例ID
};

// 所有圣纹相关信息
struct GS2U_ShengWenInfo <-
{
	vector<key_value>	awaken_list;		// 圣纹觉醒等级：key为类别，value为觉醒等级
	vector<key_2value>  suitlist;			// 套装效果：key为套装种类 value1为套装件数 value为套装阶级
	vector<ShengWenPos>	equ_list;   		// 灵纹装配列表
	vector<ShengWen>	shengwen_list;		// 所有圣纹列表   
};

//圣纹解锁
struct U2GS_ShengWenUnLock ->
{
	uint8 pos;			// 位置
};

struct GS2U_ShengWenUnLockRet <-
{
	uint8 pos;			// 位置
	uint32 error_code;	// 错误码
};


//圣纹装配
struct U2GS_ShengWenEquipOn ->
{
	uint8 pos;			// 位置
	uint64 uid;			// 圣纹UID  0为卸下
};

struct GS2U_ShengWenEquipOnRet <-
{
	uint8 pos;			// 位置
	uint64 uid;			// 圣纹UID
	uint32 error_code;	// 错误码
};

//圣纹一键装配
struct U2GS_ShengWenOneKeyEquipOn ->
{
	vector<ShengWenPosUid> uidlist;			// 圣纹信息列表
};

struct GS2U_ShengWenOneKeyEquipOnRet <-
{
	uint32 error_code;	// 错误码
};

//圣纹强化
struct U2GS_ShengWenIntensify ->
{
	uint8 pos;			// 位置
};

struct GS2U_ShengWenIntensifyRet <-
{
	uint8 pos;			// 位置
	uint32 error_code;	// 错误码
};

//圣纹觉醒
struct U2GS_ShengWenAwaken ->
{
	uint8 type;			// 类型
	uint16 num;         // 数量
};

struct GS2U_ShengWenAwakenRet <-
{
	uint8 type;			// 类型
	uint32 error_code;	// 错误码
};

//圣纹共鸣
struct U2GS_ShengWenGongMing ->
{
	uint8 pos;			// 位置
};

struct GS2U_ShengWenGongMingRet <-
{
	uint8 pos;			// 位置
	uint32 error_code;	// 错误码
};

//圣纹分解
struct U2GS_ShengWenResolve ->
{
	vector<uint64>   uids;   // 要分解的圣纹UID们
};

struct GS2U_ShengWenResolveRet <-
{
	uint32 error_code;				// 错误码
};

// 圣纹刷新
struct GS2U_ShengwenUpdate <- 
{
	vector<ShengWen>	shengwen_list;		// 所有圣纹列表   
};

// 圣纹位置刷新
struct GS2U_ShengWenPosUpdate <- 
{
	vector<ShengWenPos>  posInfoList;		// 圣纹位置信息
};

// 圣纹觉醒刷新
struct GS2U_ShengWenAwakenUpdate <- 
{
	vector<key_value>  awakenList;    //圣纹觉醒情况 
};

//圣纹套装效果刷新
struct GS2U_ShengWenSuitUpdate <- 
{
	vector<key_2value>  suitlist;	// 套装效果：key为套装种类 value1为套装件数 value为套装阶级
};

// ======================== 圣纹 end ========================

// ========================== 暗炎首领 ==========================
// 击杀记录
struct DarkLordKill
{
	string				server_name;	// 服务器名
	string				player_name;	// 玩家名
	uint32				kill_time;		// 击杀时间
};

// boss信息
struct DarkLordBoss
{
	uint32				map_data_id;	// 地图配置id
	uint32				boss_id;		// boss配置id
	uint32				refresh_time;	// 刷新时间
	bool				is_attention;	// 是否关注
	vector<DarkLordKill>kill_history;	// 击杀记录
};

// 请求活动信息
struct U2GS_GetDarkLordUI ->
{
};
struct GS2U_GetDarkLordUIRet <-
{
	vector<DarkLordBoss>	boss_list;		// boss列表
	uint32					add_times;		// 增加的次数
	uint32					used_times;		// 使用的次数
};

// 进入地图
struct U2GS_EnterDarkLord ->
{
	uint32		map_data_id;	// 地图配置id
};

// 次数同步
struct GS2U_DarkLordTimesSync <-
{
	uint32		add_times;		// 增加的次数
	uint32		used_times;		// 使用的次数
};

// boss信息同步
struct GS2U_DarkLordInfoSync <-
{
	vector<DarkLordBoss>	boss_list;		// boss列表
};
struct GS2U_DarkLordInfoUpdate <-
{
	vector<DarkLordBoss>	boss_list;		// boss列表
};

// 伤害排行榜同步
struct GS2U_DarkLordRankSync <-
{
	uint64					damage;		// 自己的伤害
	uint16					rank;		// 自己的排名
	vector<demonRankInfo>	rank_list;	// 伤害排行
};

// 攻击提示
struct GS2U_DarkLordHurtNotice <-
{
	uint32		hurt_time;	// 上次受击时间
};

// ======================== 暗炎首领 end ========================

// ========================= 暗炎魔装 start ===========================
// 推送装备信息
struct GS2U_dark_flame_push_eq_info <-
{
   vector<dark_flame_eq>        eq_list;    //装备列表
};

// 装配信息
struct dark_flame_pos
{
    uint8               pos;            // 装备uid
    uint64              uid;            // 装备uid  未装配0
    vector<key_value>   forge;          // 魔锻属性
    vector<key_value>   forge_cache;    // 魔锻缓存属性
};
// 推送装配信息
struct GS2U_dark_flame_push_pos_info <-
{
   vector<dark_flame_pos>        pos_list;    //装配列表
};

// 装配
struct U2GS_dark_flame_pos_equip ->
{
    vector<uint64>      eq_uid_list;             // 装备uid列表
};
// 装配返回
struct GS2U_dark_flame_pos_equip_ret <-
{
	vector<pos_value>   pos_list;         // pos uid 位置装配列表
    uint32              err_code;        // 错误码
};

// 魔锻
struct U2GS_dark_flame_pos_forge ->
{
    uint16      pos;            // 位置
    uint8       type;           // 1 获取到属性 2 替换属性 3 放弃属性
};

// 魔锻返回
struct GS2U_dark_flame_pos_forge_ret <-
{
    uint16      pos;            // 位置
    uint8       type;           // 1 获取到属性 2 替换属性 3 放弃属性
    uint32      err_code;       // 错误码
};

// 分解
struct U2GS_dark_flame_eq_break_down ->
{
 vector<uint64>     eq_uid_list;              // 装备uid列表
};

// 分解返回
struct GS2U_dark_flame_eq_break_down_ret <-
{
 uint32     err_code;            // 错误码
};

// 魔锻大师
struct dark_flame_grandmaster
{
    uint8           type;           // 类型id
    uint16          level;          // 等级
    uint32          times;          // 次数
};
// 推送魔锻大师信息
struct GS2U_dark_flame_push_grandmaster_info <-
{
   vector<dark_flame_grandmaster>        grandmaster_list;    //魔锻大师列表
};

// ========================= 暗炎魔装 end =============================


// ========================== 恶魔悬赏令 ==========================
// 悬赏信息
struct DemonRewardInfo
{
	uint32				type;		// 类型
	uint32				score;		// 积分
	uint32				day_score;	// 每日积分
	uint8				is_token;	// 是否已购买高级悬赏令
	vector<uint32>		rewards;	// 已领奖部分
};

// 请求悬赏信息
struct U2GS_GetDemonRewardInfo ->
{
	uint32					type;		// 类型
};
struct GS2U_GetDemonRewardInfoRet <-
{
	vector<DemonRewardInfo>	info_list;	// 信息列表
};

// 领奖
struct U2GS_GetDemonReward ->
{
	uint32			type;		// 类型
	uint32			reward_id;	// 奖励id
};
struct GS2U_GetDemonRewardRet <-
{
	uint32			err_code;	// 错误码
	uint32			type;		// 类型
	uint32			reward_id;	// 奖励id
};

// 购买高级令牌
struct U2GS_BuyDemonRewardToken ->
{
	uint32			type;		// 类型
};
struct GS2U_BuyDemonRewardTokenRet <-
{
	uint32			err_code;	// 错误码
	uint32			type;		// 类型
};
// ======================== 恶魔悬赏令 end ========================

//一键领取章节宝箱
struct U2GS_GetChapterAward ->
{
	uint				chapterID;//章节ID
};
struct GS2U_GetChapterAward <-
{
	uint32				errorCode;//错误码
};

// ========================================== 在线时长奖励 start =============================================

struct rewardIndex
{
   uint8		index;			// 索引
   uint16        iD				// 个人等级区间
   uint8		poolID			// 奖励库ID
   uint8		number			// 数量ID
};

// 发送奖池
struct GS2U_SendRewardList <-
{
	uint16 iD;						// 个人等级区间    					
	vector<rewardIndex> rewardList; // 奖池
	uint32 loginTime;				// 登录时间
	uint16 onlineTime				// 在线时间
};

// 发送次数
struct GS2U_SendOnlineDrawTimes <-
{
	uint16 haveTimes; // 已获得抽奖次数
	uint16 usedTimes; // 已使用抽奖次数
};

// 抽取
struct U2GS_OnlineRewardDrawTimes ->
{
	uint16 times; // 抽奖次数
};

struct GS2U_SendOnlineRewardDrawResult <-
{
	uint32 err_code;
};
// ========================================== 在线时长奖励 end =============================================

// ========================================== 新领地战 start =============================================
struct domainReportStc
{
	uint8 rank;						// 排名
	uint64 guild_id;                // 战盟id
	string guild_name;				// 战盟名字
	uint16 joinNum;					// 参与人数
	uint32 score;					// 积分
	vector<uint32>  pillar_list;	// 占领龙柱类型
};

struct domainSettleStc
{
	uint8 venue_type;               // 战区类型 1-S 2-A 3-B 4-C 5-D
	uint8 rank;						// 排名
	uint64 guild_id;                // 战盟id
	string guild_name;				// 战盟名字
	uint16 joinNum;					// 参与人数
	uint32 score;					// 积分
	vector<uint32>  pillar_list;	// 占领龙柱类型
	uint8 new_venue_type;           // 新的战区类型
	uint8 new_rank;                 // 新的排名
};

struct venueStc
{
	uint8 type;                     // 战区类型 1-S 2-A 3-B 4-C 5-D
	uint8 rank;						// 排名
	string guild_name;				// 战盟名字
	uint8  head_icon;				// 战盟图标
};

struct guildScoreRank
{
	uint8  rank;					// 排名
	string guild_name;              // 战盟名字
	uint32 score;                   // 积分
};

struct playerScoreRankDetail
{
	uint8 rank;						// 排名
	uint64 player_id;               // 玩家id
	string player_name;             // 玩家名字
	uint32 head_id;					// 头像id
	uint32 frame_id;                // 头像框id
	uint64 guild_id;                // 战盟id
	string guild_name;				// 战盟名字
	uint64 damage;                  // 龙柱伤害
	vector<uint32>  pillar_list;	// 占领龙柱类型	
	uint32 score;                   // 积分
};

struct pillarHurtRank
{
	uint8 rank;						// 排名
	uint64 guild_id;                // 战盟id
	string guild_name;             	// 战盟名字
	uint64 damage;                  // 伤害
};

struct pillarBelong
{
	uint32 id;     					// 龙柱类型
	uint8 score;                    // 龙柱积分
	uint64 guild_id;                // 战盟id
	string guild_name;              // 归属战盟
};

// 天空霸主
struct SkyOverlord
{
  uint8   rank;        		        // 排名
  string  guild_name;        		// 战盟名字
  playerModelUI   ui_info;
};

struct guildPlayerScore
{
	string guild_name;
	uint32 score;
};

// 请求战报
struct U2GS_domainReport ->
{
};
struct GS2U_domainReportRet <-
{
	vector<domainReportStc>    report_list;
};

// 请求界面信息
struct U2GS_domainInfo ->
{
};
struct GS2U_domainInfoRet <-
{
	vector<venueStc>    venue_list;
};

// 左侧副本信息
struct GS2U_domainScoreSync <-
{
	vector<uint32>  pillar_list;	// 占领龙柱类型
	string lead_guild_name;			// 领先的战盟
	uint32 myScore;                 // 我的积分
	vector<guildScoreRank>  list;  // 积分排行
};

// 龙柱伤害排行
struct GS2U_domainaPillarSync <-
{
	uint8 my_guild_rank;			 // 本盟排名
	uint64 my_guild_damage;			 // 本盟伤害
	vector<pillarHurtRank>    list;  // 伤害排行
};

// 玩家积分详细排行
struct U2GS_domainPlayerScoreRank ->
{
};
struct GS2U_domainPlayerScoreRankRet <-
{
	vector<guildPlayerScore>         guild_rank_list;
	vector<playerScoreRankDetail>    list;
};

// 战况
struct U2GS_domainWarSituation ->
{
};
struct GS2U_domainWarSituationRet <-
{
	vector<domainReportStc>    list;		// 战盟排行信息列表
	vector<pillarBelong>    pillar_belong;  // 龙柱归属
};

// 攻防信息
struct GS2U_domainBattleChange <-
{
	uint8  round;           // 轮次
	uint8  state;           // 0-关闭 1-等待 2-战斗
	uint32 reset_time;  	// 本轮结束时间
	vector<string>    attacker;  // 进攻方
	vector<string>    defender;  // 防守方
};

// 轮次结算
struct GS2U_domainRoundSettle <-
{
	uint8  round;           // 轮次
	string first_name;      // 第一名战盟名
	uint8  my_guild_rank;   // 我的战盟名次
};

// 结算
struct GS2U_domainSettlement <-
{
	vector<domainSettleStc>    list;		// 战盟排行信息列表
};

// 排行奖励
struct GS2U_domainSettlementAuction1 <-
{
	vector<itemInfo>	item_list;
	vector<EqInfo>		eq_list;
};
// 积分排行奖励
struct GS2U_domainSettlementAuction2 <-
{
	vector<itemInfo>	item_list;
	vector<EqInfo>		eq_list;
};

// 个人排行奖励
struct GS2U_domainSettlementPerson <-
{
	vector<itemInfo>		item_list;
	vector<CoinInfo>		coin_list;
};

// 活动计划
struct GS2U_domainSchedule <-
{
	uint32 open_time;		// 活动开启时间
	uint32 close_time;		// 活动结束时间
	uint8  is_end;          // 本赛区是否结束
};

// 鼓舞
struct U2GS_domainInspire ->
{
  uint8 type;
};
struct GS2U_domainInspireRet <-
{
  uint32  err_code; 
};

// 集火
struct U2GS_domainWarSetOnFire ->
{
	uint64	monsterID;//建筑（怪物）ID
};

// 取消战车
struct U2GS_domainCancelChariots ->
{
};
struct GS2U_domainCancelChariotsRet <-
{
	uint32 err_code;
};

// 鼓舞信息同步
struct GS2U_domainInspireSync <-
{
  vector<key_value> inspire;   // 鼓舞信息(type,times)
};

// 进入地图
struct U2GS_domainFightEnter ->
{
};
struct GS2U_domainFightEnterRet <-
{
	uint32 err_code;
};

struct U2GS_skyOverlord ->
{
};
struct GS2U_skyOverlordRet <-
{
	vector<SkyOverlord>   overloads;   // 前三战盟
	uint32  successive;   			   // 连霸次数
};

struct U2GS_releaseAward ->
{
	uint8 type;    // 1-连霸奖励 2-终结连霸奖励
};
struct GS2U_releaseAwardRet <-
{
	uint32 err_code;
};

struct GS2U_skyOverlordAwardNotice <-
{
	bool   is_successive_award;		   // 是否有连霸奖励
	bool   is_break_successive_award;  // 是否有终结连霸奖励
};

// 发布集火
struct GS2U_domain_on_fire <-
{
	uint8 guild_rank;     // 职位
	string player_name;	 // 名字
	uint8 player_sex;	// 性别
	uint32 monster_id;	// 怪物配置ID
};

struct GS2U_domainAuctionNotice <-
{
	uint8 type; // 1-提醒 0-清除
};

// 最大血量同步
struct GS2U_domainMonsterMaxHpSync <-
{
	vector<key_big_value> pillar_list; // key 配置id value 最大血量
	vector<key_big_value> door_list;
	vector<key_big_value> flag_list;
};

// ========================================== 新领地战 end ===============================================

// ========================================== 嘉年华领奖 start =============================================
struct give_award_info
{
   uint16                   id;                     // id
   vector<uint8>            index_list;             // 已领取奖励任务索引
};
// 上线推送领奖信息
struct GS2U_carnival_give_award_info <-
{
     vector<give_award_info>  info_list;            // 已领奖列表
};
// 领奖
struct U2GS_carnival_give_award ->
{
   uint16                   id;                     // 活动id
   uint8                    index;                  // 奖励任务索引
};
struct GS2U_carnival_give_award_ret <-
{
   uint16                   id;                     // 活动id
   uint8                    index;                  // 奖励任务索引
   uint32                   err_code;               // 错误码
};

// 红点
struct carnival_rea_point
{
   uint16                   id;                     // id
   uint8                    is_show;                // 1 显示 0 不显示
   uint8					type;					// 嘉年华类型
};
struct GS2U_carnival_give_award_rea_point <-
{
     vector<carnival_rea_point>      info_list;            // 红点列表
};

// 排名降低
struct GS2U_carnival_rank_down <-
{
   uint16       id;
   uint8        old_rank;
};
// ========================================== 嘉年华领奖 end =============================================
// ========================================== 个人荣耀龙徽 start =============================================
// 龙徽玩家信息
struct dragon_badge_player
{
	uint32		  id;				 	 // 龙徽id
	uint32        lv;  				 	 // 龙徽等级
	uint32        exp;    				 // 当前龙徽经验
	uint32		  reward_lv;   			 // 已领取到的奖励等级
	uint8         rank_flag;      		 // bit0 是否普通进阶 bit1 是否至尊进阶
	uint8         daily_reward;   		 // 是否领取每日宝箱
	uint8         is_effect;		     // 效果是否生效 1是 0否
	vector<key_2value> daily_comp_condition;   // 每日已达成条件 {条件，参数1，参数2}
	vector<key_value> daily_comp_task;         // 每日已完成任务 {任务id，次数}
	vector<key_2value> weekly_comp_condition;   // 每周已达成条件 {条件，参数1，参数2}
	vector<key_value> weekly_comp_task;         // 每周已完成任务 {任务id，次数}
	uint32		  open_time;             // 开启时间
};

// 龙徽玩家信息同步
struct GS2U_DragonBadgePlayerInfo <-
{
	vector<dragon_badge_player>    info_list;	 //	龙徽玩家信息
};

// 龙徽玩家信息请求
struct U2GS_DragonBadgePlayerReq ->
{
	uint32		  id;				  // 龙徽id
};

// 龙徽玩家信息同步
struct GS2U_DragonBadgePlayer <-
{
	uint32 err_code;
	dragon_badge_player    info;	 //	龙徽玩家信息
};


// 请求进阶龙徽
struct U2GS_DragonBadgeAdvance ->
{
	uint32		  id;				  // 龙徽id
	uint16        type; 			  // 进阶类型 1 进阶 2 至尊进阶
	
};

// 进阶龙徽返回
struct GS2U_DragonBadgeAdvanceRet <-
{
	uint32		  id;			// 龙徽id
	uint16        type; 		// 进阶类型 1 进阶 2 至尊进阶
	uint32	      err_code;     // 错误码
};

// 购买龙徽经验
struct U2GS_BuyDragonBadgeExp ->
{
	uint32		  id;	     // 龙徽id
	uint32        level; 	 // 购买的等级
};

// 购买龙徽等级返回
struct GS2U_BuyDragonBadgeExpRet <-
{
	uint32		    id;	     // 龙徽id
	uint32	        err_code;    // 错误码
};


// 领取龙徽等级奖励
struct U2GS_DragonBadgeLvReward ->
{
	uint32		id;	     // 龙徽id
};

// 领取龙徽等级奖励返回
struct GS2U_DragonBadgeLvRet <-
{
	uint32			id;	     	 // 龙徽id
	uint32	        err_code;    // 错误码
};

// 每日领奖
struct U2GS_DragonBadgeDaily ->
{
	uint32			id;	     	 // 龙徽id
};

// 每日领奖返回
struct GS2U_DragonBadgeDailyReq <-
{
	uint32			id;	     	 // 龙徽id
	uint32	        err_code;    // 错误码
};

// 龙徽经验、等级改变同步
struct GS2U_DragonBadgeLvExpChange <-
{
	uint32		  id;				 	 // 龙徽id
	uint32        lv;  				 	 // 龙徽等级
	uint32        exp;    				 // 当前龙徽经验
};
// ========================================== 个人荣耀龙徽 end =============================================

// =================================== 龙神封印 ===================================
// 预告推送
struct GS2U_DragonSealNotice <-
{
	uint32		level;				// 封印等级
	uint8		state;				// 状态
	uint64		player_id;			// 玩家id
	string		player_name;		// 玩家名
	uint16		player_career;		// 玩家职业
	uint32		player_head;		// 玩家头像
	uint32		player_frame;		// 玩家头像框
	uint8		player_sex;			// 玩家性别
	uint8		is_award;			// 是否已领取奖励
};

// 获取龙神封印ui
struct U2GS_GetDragonSealUI ->
{
};
struct GS2U_GetDragonSealUIRet <-
{
	uint32		level;				// 封印等级
	uint8		state;				// 状态
	uint32		open_time;			// 开启时间
	uint32		release_time;		// 解封时间
	uint64		player_id;			// 玩家id
	string		player_name;		// 玩家名
	uint16		player_career;		// 玩家职业
	uint32		player_head;		// 玩家头像
	uint32		player_frame;		// 玩家头像框
	uint8		player_sex;			// 玩家性别
	uint32		guild_join;			// 昨日战盟参与度(人数)
	uint32		level_num;			// 等级符合条件的人数
	uint8		is_award;			// 是否已领取奖励
};

// 购买次数
struct U2GS_DragonSealBuyTimes ->
{
	uint32		level;		// 封印等级
	uint8		type;		// 类型 1-高级本，2-低级本
	uint32		times;		// 购买次数
};
struct GS2U_DragonSealBuyTimesRet <-
{
	uint32		err_code;	// 错误码
	uint32		level;		// 封印等级
	uint8		type;		// 类型 1-高级本，2-低级本
	uint32		times;		// 购买次数
};

// 请求副本次数
struct U2GS_DragonSealTimesInfo ->
{
	uint32		level;		// 封印等级
	uint8		type;		// 类型 1-高级本，2-低级本
};
struct GS2U_DragonSealTimesInfoRet <-
{
	uint32		level;			// 封印等级
	uint8		type;			// 类型 1-高级本，2-低级本
	uint32		join_times;		// 参与次数
	uint32		free_times;		// 免费次数
	uint32		buy_times;		// 购买次数
	uint32		day_buy_times;	// 当天购买次数
};

// 进入封印副本
struct U2GS_EnterDungeonSeal ->
{
	uint32		level;				// 封印等级
	uint8		type;				// 类型 1-高级本，2-低级本
};

// 副本内信息同步
struct GS2U_DungeonSealSync <-
{
	uint32		rank;				// 评级
	uint32		kill_num;			// 杀怪数量
	uint32		cur_num;			// 当前波杀怪数量
	uint64		exp;				// 累计经验
};

// 副本结算
struct GS2U_DungeonSealSettle <-
{
	uint8		is_win;				//0:失败 1:胜利
	uint64		exp;
	vector<itemInfo>		items;
	vector<CoinInfo>		coins;
	vector<EqInfo>	eqs;
};

// 召唤boss
struct U2GS_SealCallBoss ->
{
};
struct GS2U_SealCallBossRet <-
{
	uint32		err_code;			// 错误码
	uint32		call_num;			// 已召唤次数
	uint32		next_time;			// 下次可召唤时间
};

// 领取奖励
struct U2GS_SealGetReward ->
{
};
struct GS2U_SealGetRewardRet <-
{
	uint32		err_code;			// 错误码
};

// ================================= 龙神封印 end =================================

// ========================================== 神佑系统 start =============================================
// 神佑
struct god_bless
{
	uint16				player_lv;		            // 玩家等级
	uint16				level;		                // 神佑等级
	uint16				exp;		                // 神佑经验
};

// 神佑信息
struct GS2U_god_bless_info <-
{
    vector<god_bless>	god_bless_list;        // 神佑
};

// 祈祷 经验
struct U2GS_god_bless_prayer_exp ->
{
    uint8               op_type;                    // 普通 1 进阶 2 天命 3
};

struct GS2U_god_bless_prayer_exp_ret <-
{
    uint16              player_lv;                  // 神佑的玩家等级
    uint16				level;		                // 祈祷后的神佑等级
    uint32              exp;                        // 祈祷后的神佑经验
    uint32              err_code;                   // 错误码
};


// 祈祷 道具
struct U2GS_god_bless_prayer_item ->
{
    uint16                  player_lv;              // 神佑的玩家等级
    vector<CostList>        cost_list;              // 道具列表
};

struct GS2U_god_bless_prayer_item_ret <-
{
    uint16              player_lv;                  // 神佑的玩家等级
    uint16				level;		                // 祈祷后的神佑等级
    uint32              exp;                        // 祈祷后的神佑经验
    uint32              err_code;                   // 错误码
};

// ========================================== 神佑系统 end =============================================

// ========================================== 主线封印 start ===========================================
struct MsPlayerRecord
{
	uint16 rank;
	string name;
	uint8  sex;
	uint32 time;
};

struct MsChapterDiscover
{
	uint32 chapterID;
	string name;
	uint8  sex;
	uint32 time;
};

// 封印状态同步
struct GS2U_MainlineSealSync <-
{
	uint16     id;              // 封印id
	uint8      state;			// 状态 1-等待触发 2-封印中 3-封印结束
	uint32     end_time;		// 封印结束时间
	string     discoverer_name; // 封印发现者
	uint8      discoverer_sex;  // 封印发现者性别
	uint64     discoverer_id;   // 封印发现者id
};

// 请求封印丰碑
struct U2GS_MsMonument ->
{
	uint16     id;              // 封印id
};

// 封印丰碑返回
struct GS2U_MslMonumentRet <-
{
	uint16     id;              // 封印id
	uint32 	   err_code;
	MsPlayerRecord discoverer;  // 结界发现者
	vector<MsPlayerRecord>	top_hunters; // 顶尖猎魔人
};

// 请求猎魔排行
struct U2GS_MsTop ->
{
	uint16     id;              // 封印id
};

// 猎魔排行返回
struct GS2U_MsTopRet <-
{
	uint16     id;              // 封印id
	uint32 	   err_code;
	vector<MsPlayerRecord>	top_list; // 排行信息
};

// 请求章节发现者
struct U2GS_MsDiscover ->
{
	uint32     chapterID;              // 章节id
};

// 章节发现者返回
struct GS2U_MsDiscoverRet <-
{
	vector<MsChapterDiscover>	discover_list; // 发现者信息
};

// 请求猎魔信息
struct U2GS_MsHunterGame ->
{
	uint16     id;              // 封印id
};

// 猎魔信息返回
struct GS2U_MsHunterGameRet <-
{
	uint16     id;              // 封印id
	uint32 	   err_code;
	uint16     my_rank;         // 我的排名 0-未上榜
};

// 不可用封印id列表
struct GS2U_MsDisAvailableSeal <-
{
	vector<uint16>     id_list;         // 不可用封印id列表
};
// ========================================== 主线封印 end =============================================
// ======================== 商船系统 start =============================================================
// 商船
struct merchantShip
{
    uint64 player_id;    	// 玩家id
    string player_name;     // 玩家名字
    uint16 player_lv;    	// 玩家等级
    uint8   player_sex;		// 玩家性别
    uint32	head_id;	    // 头像
    uint32	head_frame;	  	// 头像框
    uint64 guild_id;    	// 战盟id
    string guild_name;		// 玩家战盟
    uint8 ship_type;		// 商船品质
    uint64 ship_id;    		// 商船id 
    uint64 battle_value;	// 玩家战斗力
    uint8 danger_classes;   // 危险等级 0 普通 1 简单 2 困难
    uint32 start_time;      // 护送开始时间
    uint32 end_time;        // 护送结束时间
    uint32 protect_time;    // 保护结束时间
};

struct merchantShipRobot
{
    uint32 robot_id;    	// 怪物id
    uint8 ship_type;		// 商船品质
    uint64 ship_id;    		// 商船id 
    uint64 battle_value;	// 玩家战斗力
    uint8 danger_classes;   // 危险等级 0 普通 1 简单 2 困难
    uint32 start_time;      // 护送开始时间
    uint32 end_time;        // 护送结束时间
};

struct merchantShipPlayer
{
	uint8 escort_times;                   	// 运送次数
	uint8 intercept_times;					// 拦截次数
	uint8 free_refresh_times;				// 免费刷新次数
	uint8 lucky_value;						// 幸运值
	uint8 ship_type;						// 商船品质
	uint32 end_time;                        // 护送结束时间 0 没有护送
};

// 袭击信息
struct merchantShipForay
{
    uint64 foray_id;    							// 袭击玩家id
    uint8  foray_sex;       						// 袭击玩家性别
    string foray_name;      						// 袭击玩家名字
    uint8  ship_type;								// 商船品质
    uint64 ship_id;    								// 商船id
    uint64 battle_value;							// 玩家战斗力
    uint8  is_seek_help;    						// 是否发起过协助
    vector<rewardStc>   plunder_list; 				// 被掠夺奖励
    vector<rewardStc>   retake_list; 				// 已夺回奖励
    uint16	retake_percent;	  						// 已夺回万分比
    uint32 foray_time;      						// 袭击时间
};

// 请求商船信息
struct U2GS_mc_info ->
{
};
struct GS2U_mc_info_ret <-
{
	merchantShipPlayer ship_player;         // 商船玩家信息
    vector<merchantShip>   ship_list; 		// 商船列表
    vector<merchantShipRobot>   robot_ship_list; 		// 机器人商船列表
};

// 请求袭击信息
struct U2GS_mc_foray_info ->
{
};
struct GS2U_mc_foray_info_ret <-
{
    vector<merchantShipForay>   foray_list; 		//袭击列表
};

struct GS2U_mc_ship_player_update <-
{
	merchantShipPlayer ship_player;         // 商船玩家信息
};

// 刷新商船
struct U2GS_mc_refresh_ship ->
{
	uint8 is_one_key;     // 是否一键红品 1 是 2 否
};
struct GS2U_mc_refresh_ship_ret <-
{
	uint32 err_code;
	uint8 is_one_key;     					// 是否一键红品
};

// 开始护送
struct U2GS_mc_start_ship ->
{
};
struct GS2U_mc_start_ship_ret <-
{
	uint32 err_code;
};

// 请求报酬奖励预览
struct U2GS_mc_ship_reward_preview ->
{
};
struct GS2U_mc_ship_reward_preview_ret <-
{
	uint32 err_code;
	uint8 ship_type;								// 商船品质
	uint8 is_double;								// 是否双倍 1-是 0-否
	vector<rewardStc>   reward_list; 				// 奖励
	vector<merchantShipForay>   foray_list; 		// 袭击列表
};

// 请求报酬奖励
struct U2GS_mc_ship_reward ->
{
};
struct GS2U_mc_ship_reward_ret <-
{
	uint32 err_code;
};

// 商船副本结算
struct GS2U_ShipSettleAccounts <-
{
	uint32 err_code;                        // 0-成功 以下字段有效，非0-错误原因
	uint8 ship_type;                		// 商船类型
	uint8 mode;                     		// 玩法模式
	uint8 index;                    		// 序号
	uint8 random_event;                     // 触发事件
	string helper_name;                     // 被协助玩家名字
    uint8  helper_sex;                      // 被协助玩家性别
    uint64 target_bv;                       // 对方战力
	vector<rewardStc>   reward_list; 		// 奖励
};

// 掠夺
struct U2GS_mc_intercept_ship ->
{
	uint64 target_id;    // 被袭击玩家id
};
struct GS2U_mc_intercept_ship_ret <-
{
	uint32 err_code;
};

// 自主夺回
struct U2GS_mc_recapture_ship ->
{
	uint64 ship_id;    		// 商船id
};
struct GS2U_mc_recapture_ship_ret <-
{
	uint32 err_code;
};

// 有新的袭击信息
struct GS2U_mc_foray_report_new <-
{
};

// 商船运输结束
struct GS2U_mc_ship_finish_msg <-
{
};
// ======================== 商船系统 end ===============================================================

// ========================================== 觉醒之路 start =============================================
// 觉醒之路信息
struct GS2U_AwakenRoadInfo <-
{
	vector<uint16>		reward_list;	     // 已领奖励列表
	vector<uint16>		bp_reward_list;	     // 已领战令奖励列表
	vector<uint8>			bp_list;					 // 开启战令组列表
};

// 觉醒之路领奖
struct U2GS_AwakenRoadReward ->
{
	uint16			id;	     	 // 奖励id
};

// 觉醒之路领奖返回
struct GS2U_AwakenRoadRewardReq <-
{
	uint16			id;	     	 // 奖励id
	uint32	    err_code;    		// 错误码
};

// 一键领奖
struct U2GS_AwakenRoad_OneKeyReward ->
{
	uint8			group_id;	     	 // 战令组id
};

// 一键领奖返回
struct GS2U_AwakenRoad_OneKeyRewardReq <-
{
	uint8			group_id;	     	 // 战令组id
	vector<uint16>		id_list;		// 此次领取的奖励ID列表
	vector<itemInfo>  itemList;        	// 奖励道具列表
	vector<CoinInfo>  currencyList;		// 奖励货币列表
	vector<EqInfo>    equipmentList;     // 奖励装备列表
	uint32	  err_code;    		// 错误码
};

// 战令激活
struct U2GS_AwakenRoad_BPActive ->
{
	uint8			group_id;	     	 // 战令组id
};

// 战令激活返回
struct GS2U_AwakenRoad_BPActiveReq <-
{
	uint8			group_id;	     	 // 战令组id
	uint32	  err_code;    		// 错误码
};
// ========================================== 觉醒之路 end =============================================

// 图鉴炼金
struct GS2U_card_refine_info <-                // 上线推送
{
     uint32                       level;              // 等级
     uint32                       exp;                // 经验
};
struct U2GS_card_refine ->
{
     vector<CostList>            cost_list;         // 消耗列表
};
struct GS2U_card_refine_ret <-
{
   uint32                       level;              // 等级
   uint32                       exp;                // 经验
   uint32                       err_code;           // 错误码
};

// ======================== 直购 start ===============================================================
// 直购礼包信息
struct GiftPacksStc
{
		uint8  type;		// 类型id
		pb_uint32 group;		// 分组
		pb_uint32 gift_id;		// 礼包id
		pb_uint32 buy_times;	// 已购次数
};

// 直购礼包信息
struct GS2U_GiftPacksInfo <-
{
	vector<GiftPacksStc>   list;
};

// 购买直购礼包
struct U2GS_buy_gift_packs ->
{
	uint8 type;
    uint32 group;		// 分组
	uint32 gift_id;
};

// 购买直购礼包返回
struct GS2U_buy_gift_packs_ret <-
{
	uint32 error;
	uint8  type;
    uint32 group;		// 分组
	uint32 gift_id;
	uint32 buy_times;	// 已购次数
};


// 秒杀/每日礼包信息结构
struct DailySeckillStc
{
    uint8  type;		// 类型id 1-每日礼包 2-秒杀礼包
	vector<uint32>   buy_list; // 已购买ID列表
};

// 秒杀/每日礼包信息
struct GS2U_daily_seckill_info <-
{
	vector<DailySeckillStc>   list;
};

// 领取每日免费礼包
struct U2GS_daily_packs_free ->
{
};

// 领取每日免费礼包返回
struct GS2U_daily_packs_free_ret <-
{
	uint32 error;
};

// 领取每日特惠礼包
struct U2GS_daily_packs_award ->
{
	uint32 id;  // id = 0 一键领取
};

// 领取每日特惠礼包返回
struct GS2U_daily_packs_award_ret <-
{
	uint32 id;
	uint32 error;
};
// ======================== 直购 end ===============================================================

// ======================== 游戏助手 start ===============================================================

struct storyStruct
{
	uint8		id;	//  故事id
	uint8		list;		// 故事目录
};
struct GS2U_sendStoryRewardList <-
{
	vector<storyStruct>	reward_list; // 已领取故事列表
};


// 领取故事奖励
struct U2GS_getStoryReward ->
{
	uint8		id;	//  故事id
	uint8		list;		// 故事目录
};
struct GS2U_getStoryRewardResult <- 
{
	uint8		id;	//  故事id
	uint8		list;		// 故事目录
	uint32		err_code;	//错误码	
};

struct accompanyStruct
{
	uint8		type;	//   目录分页
	uint8		content;		// 目录内容
};
struct GS2U_sendAccompanyRewardList <-
{
	vector<accompanyStruct>	reward_list; // 已领取神宠列表
};

// 领取神宠奖励
struct U2GS_getAccompanyReward ->
{
	uint8		type;	//   目录分页
	uint8		content;		// 目录内容
};
struct GS2U_getAccompanyRewardResult <- 
{
	uint8		type;	//   目录分页
	uint8		content;		// 目录内容
	uint32		err_code;	//错误码	
};

struct U2GS_getAccompanyCheck ->
{
	uint8		type;	//   目录分页
	uint8		content;		// 目录内容
};
struct GS2U_getAccompanyCheckResult <- 
{
	uint8		type;	//   目录分页
	uint8		content;		// 目录内容
	uint8		state;	// 0 不满足 1 满足
	uint16      now_progress;  // 当前进度
	uint16      total_progress;  // 总进度
};

// ======================== 游戏助手 end ===============================================================

// ===================================== 龙神雕像 start ==================================================
// 雕像信息
struct dg_statue_info
{
    uint32              dg_id;            // 龙神id
    uint64              statue_id;       // 镶嵌雕像id  未装配0
    uint16              level;          // 龙神雕像觉醒等级
};
// 推送雕像信息
struct GS2U_dg_statue_push_info <-
{
   vector<dg_statue_info>        pos_list;    //装配列表
};

// 装配
struct U2GS_dg_statue_equip ->
{
    vector<uint64>      uid_list;             // 装备uid列表
};
// 装配返回
struct GS2U_dg_statue_equip_ret <-
{
    uint32      err_code;        // 错误码
};
// 觉醒
struct U2GS_dg_statue_awaken ->
{
    uint32      dg_id;                  // 龙神id
    uint16      add_level;              // 增加的等级
};
// 觉醒返回
struct GS2U_dg_statue_awaken_ret <-
{
    uint32      dg_id;                  // 龙神id
    uint16      level;                  // 觉醒等级
    uint32      err_code;               // 错误码
};
// 分解
struct U2GS_dg_statue_break_down ->
{
 vector<uint64>     eq_uid_list;              // 装备uid列表
};

// 分解返回
struct GS2U_dg_statue_break_down_ret <-
{
 uint32     err_code;            // 错误码
};

// 合成
struct U2GS_synthesize_dg_statue ->
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	vector<uint64> base_cost;   // 基础消耗
};

struct GS2U_synthesize_dg_statue_ret <-
{
	uint16		id;			// 配置ID
	uint16		type2;		// 配置表内Type2
	uint16		type3;		// 配置表内Type3
	uint16		type4;		// 配置表内Type4
	uint16		type5;		// 配置表内Type5
	uint32		cfg_id;	    // 合成道具id
	uint8       bind;        // 绑定状态
	uint32      suc_times;  // 累计合成次数
	uint32		err_code;	// 错误码
};

struct GS2U_synthesize_dg_statue_suc_times <-
{
	vector<uint16>  suc_times_list;  // 雕像合成成功次数列表
};
// ===================================== 龙神雕像 end ==================================================

// =================================== 魔宠副本 ===================================
// 魔宠副本信息
struct DungeonPetInfo
{
	uint32			dungeon_id;			// 副本id
	uint8			star;				// 最高星级
	vector<uint8>	stars_index_list;	//该关卡历史最高评价序号列表
};

// 魔宠副本章节信息
struct DungeonPetGroupInfo
{
	uint16					chapter_id;		// 章节id
	vector<uint32>			box_list;		// 已领取章节宝箱
	vector<DungeonPetInfo>	dungeon_list;	// 副本列表
};

// 获取副本信息
struct U2GS_GetDungeonPetInfo ->
{
};
struct GS2U_GetDungeonPetInfoRet <-
{
	uint32		reduce_time;	// 消耗次数
	uint32		max_time;		// 总次数
	vector<DungeonPetGroupInfo>	group_list;	// 章节列表
};

// 进入副本
struct U2GS_EnterDungeonPet ->
{
	uint32		dungeon_id;		// 副本id
};

// 副本结算
struct GS2U_DungeonPetResult <-
{
	uint32				dungeon_id;		// 副本id
	uint8				cur_star;		// 当前通关星数
	bool				is_open_next;	// 是否解锁下一关
	uint64				exp;			// 经验
	vector<CoinInfo>	coin_list;		// 奖励货币列表
	vector<itemInfo>	item_list;		// 奖励物品列表
	vector<EqInfo>		eq_list;		// 奖励装备列表
};

// 章节扫荡
struct U2GS_MopUpDungeonPet ->
{
	uint16		chapter_id;		// 章节id
};
struct GS2U_MopUpDungeonPetRet <-
{
	uint32		err_code;		// 错误码
	uint16		chapter_id;		// 章节id
	uint32		remain_time;	// 剩余次数
	uint32		buy_time;		// 购买次数
	vector<CoinInfo>	coin_list;	// 货币列表
	vector<itemInfo>	item_list;	// 道具列表
	uint8      double_times;   // 双倍次数
	uint64     exp;            // 经验
};

// 领取星级奖励
struct U2GS_GetDungeonPetStarAward ->
{
	uint16		chapter_id;		// 章节id
	uint16		box_id;			// 宝箱id
};
struct GS2U_GetDungeonPetStarAwardRet <-
{
	uint32		err_code;		// 错误码
	uint16		chapter_id;		// 章节id
	uint16		box_id;			// 宝箱id
	vector<uint32>		box_list;	// 已领取章节宝箱
	vector<CoinInfo>	coin_list;	// 货币列表
	vector<itemInfo>	item_list;	// 道具列表
};

// 首杀信息
struct FirstDownInfo
{
	uint32			dungeon_id;			// 副本id
	string			first_player;		// 首杀玩家名
};

// 请求首杀信息
struct U2GS_GetFirstDownInfo ->
{
	uint16			chapter;			// 章节
	vector<uint32>	dungeon_list;		// 副本列表
};
struct GS2U_GetFirstDownInfoRet <-
{
	uint16			chapter;			// 章节
	vector<FirstDownInfo>	down_list;	// 首杀列表
};
struct GS2U_GetFirstDownInfoUpdate <-
{
	vector<FirstDownInfo>	down_list;	// 更新列表
};
// ================================= 魔宠副本 end =================================

// ===================================== 龙神武器 start ==================================================
// 龙神武器信息
struct dg_weapon_info
{
    uint32              dg_id;              // 龙神id
    uint64              weapon1;            // 武器1
    uint64              weapon2;            // 武器2
};
// 推送龙神武器信息
struct GS2U_dg_weapon_push_info <-
{
   vector<dg_weapon_info>       weapon_list;    //雕像装配列表
};

// 装配
struct U2GS_dg_weapon_equip ->
{
    vector<uint64>      eq_uid_list;             // 装备uid列表
};
// 装配返回
struct GS2U_dg_weapon_equip_ret <-
{
    uint32              err_code;           // 错误码
    vector<key_value>   equip_ret;          // 装配返回结果 key部位 value 1 装配2替换3卸下
};
// ===================================== 龙神武器 end ==================================================

// ========================= 快捷合成 =========================
// 背包物品信息
struct bag_item
{
	uint8		bag_id;		// 背包id
	uint64		item_uid;	// 物品uid
	uint32		amount;		// 数量
};

struct bag_item2
{
	uint64		cfg_id;		// 物品配置id
	uint32		amount;		// 数量
};

// 合成
struct U2GS_QuickSynthesize ->
{
	uint8				bag_id;			// 要升级的物品所在背包id
	uint64				item_uid;		// 要升级的物品uid
	vector<bag_item>	materials;		// 材料
};
struct GS2U_QuickSynthesizeRet <-
{
	uint32				err_code;		// 错误码
	uint8				bag_id;			// 升级的物品所在背包id
	uint64				item_uid;		// 升级的物品uid
};

// 魔戒升级
struct U2GS_QuickSynthesizeRing ->
{
	uint64				role_id;		// 穿戴角色ID
	uint64				item_uid;		// 要升级的物品uid
	vector<bag_item2>	materials;		// 材料
};
struct GS2U_QuickSynthesizeRingRet <-
{
	uint64				role_id;		// 穿戴角色ID
	uint64				item_uid;		// 升级的物品uid
	uint32				err_code;		// 错误码
};

// 英雄魂石快捷合成
struct U2GS_QuickSynthesizeSoulStone ->
{
	uint8				bag_id;			// 要升级的物品所在背包id
	uint64				item_uid;		// 要升级的物品uid
	vector<bag_item>	materials;		// 材料
};
struct GS2U_QuickSynthesizeSoulStoneRet <-
{
	uint32				err_code;		// 错误码
	uint8				bag_id;			// 升级的物品所在背包id
	uint64				item_uid;		// 升级的物品uid
};
// ======================= 快捷合成 end =======================

// ================================= 龙神圣装 start ===============================
// 龙神圣装信息
struct dg_eq_pos_info
{
    uint32                          dg_id;            // 龙神id
    vector<uint8>                   equip;            // 部位列表
    vector<uint8>                   skill;            // 套装数量列表
    uint8                           is_complete;			// 是否曾完成 1 曾完成 0 从未完成
};
// 推送龙神圣装信息
struct GS2U_dg_eq_pos_push_info <-
{
   vector<dg_eq_pos_info>       eq_pos_list;    // 圣装列表
};

// 推送各神像圣装星级消息
struct GS2U_dg_eq_star_info_ret <-

{
	vector<key_2value> star_list;                //星级信息 [神像id,部位,星级]
}

// 圣装激活
struct U2GS_dg_eq_pos_eq_active ->
{
    uint32              dg_id;          // 龙神id
    uint8               pos;            // 部位
};
// 圣装激活返回
struct GS2U_dg_eq_pos_eq_active_ret <-
{
    uint32              dg_id;          // 龙神id
    uint8               pos;            // 部位
    uint32              err_code;       // 错误码
};

// 技能激活
struct U2GS_dg_eq_pos_skill_active->
{
    uint32              dg_id;          // 龙神id
    uint8               num;            // 套装数量
};
// 技能激活返回
struct GS2U_dg_eq_pos_skill_active_ret <-
{
    uint32              dg_id;          // 龙神id
    uint8               num;            // 套装数量
    uint32              err_code;       // 错误码
};
// 圣装升星
struct U2GS_dg_eq_pos_eq_star_up ->
{
        uint32              dg_id;          // 神像id
        uint8               pos;            // 部位
};
// 圣装升星返回
struct GS2U_dg_eq_pos_eq_star_up_ret <-
{
        uint32              dg_id;          // 神像id
        uint8               pos;            // 部位 
        uint32              err_code;       // 错误码
};
// ================================= 龙神圣装 end =================================


// 龙神宠物技能选择
struct U2GS_skill_choose ->
{
	uint64				role_id;			// 角色id
    uint8               type;               // 1 龙神 2 宠物
    uint32              id;                 // 宠物或者龙神id
};
struct GS2U_skill_choose_ret <-
{
	uint64				role_id;			// 角色id
    uint8               type;               // 1 龙神 2 宠物
    vector<SkillFix>    skill_list;         // 技能列表
};

// ================================= 秘境试炼 start ===============================

// 秘境试炼历史奖励记录
struct DungeonBpHistory
{
	uint32	itemID;		// 物品ID
	uint32	count;		// 数量
	uint8	bind;		// 是否绑定
	bool	is_equip;	// 是否是装备
	uint16  quality;    // 品质
	uint16  star;       // 星级
};

// 秘境试炼结构
struct DungeonBpStc
{
	uint16 id;					// id
	uint16 open_day;			// 开服天数
	uint16 join_times;			// 累计参与次数
	uint16 condition_times;		// 已达成次数
	uint16 award_times;			// 已领取最高次数
	uint8 advance_state;		// 是否进阶 0-否 1-是
	uint32 period_end_time;		// 本轮结束时间
	vector<DungeonBpHistory>  history_award_list; // 上一轮奖励
};

// 更新
struct GS2U_dungeon_bp_info_update <-
{
    vector<DungeonBpStc>  info_list;
};

// 请求购买进阶
struct U2GS_dungeon_bp_buy ->
{
	uint16 id;					// id
};

// 请求购买进阶返回
struct GS2U_dungeon_bp_buy_ret <-
{
	uint16 id;					// id
	uint32 err_code;
};

// 请求领奖
struct U2GS_dungeon_bp_award ->
{
	uint16 id;					// id
};
// 请求领奖返回
struct GS2U_dungeon_bp_award_ret <-
{
	uint16 id;					// id
	uint32 err_code;
};
// ================================= 秘境试炼 end =================================
// ========================================== 龙神图鉴 end =============================================
// 挂机副本：上线推送
struct GS2U_AutoDungeonInfo <-
{
    uint32  dungeonId;			// 当前副本Id
};
// 挂机副本守护信息推送
struct GS2U_AutoDungeonBlessInfo <-
{
	vector<key_value>	blessList;	// key-解锁孔位  value-BlessID
	vector<uint32>		blessPoolList;	// 祝福池子
};

// 挂机副本：副本结算
struct GS2U_AutoDungeonReward <-
{
    uint32  dungeonId;		// 结算副本Id
    uint32  newDungeonId;	// 新的副本Id    
	uint32	blessId;		// 祝福Id
	vector<Dialog_Item>  itemList;
	vector<EqInfo>       equipmentList;
	vector<Dialog_Coin>  coinList;
	uint64               exp;
	bool				isSecondKill; //是否是秒杀
};

// 挂机副本：解锁祝福孔位
struct U2GS_AutoDungeonUnlockBlessPos ->
{
	uint16	pos;		// 孔位
};
struct GS2U_AutoDungeonUnlockBlessPosRet <-
{
	uint32	error;
	uint16	pos;		// 孔位
};

// 挂机副本：生成祝福
struct U2GS_AutoDungeonBless ->
{
};
struct GS2U_AutoDungeonBlessRet <-
{
	uint32	error;
	uint32	blessId;
};

// 挂机副本：选择新祝福
struct U2GS_AutoDungeonGetBless ->
{
	uint16	pos;			//	祝福位置
	uint32	newBless;		//	新增的祝福
};
struct GS2U_AutoDungeonGetBlessRet <-
{
	uint16	pos;			//	祝福位置
	uint32	newBless;		//	新增的祝福
	uint32	deleteBless;	//  删除的祝福
	uint32	error;
};

// 挂机副本：选择祝福池中的祝福
struct U2GS_AutoDungeonGetBlessInPool ->
{
	uint16	pos;			//	祝福位置
	uint32	bless;			//	选择的池子中的祝福
};
struct GS2U_AutoDungeonGetBlessInPoolRet <-
{
	uint16	pos;			//	祝福位置
	uint32	bless;			//	选择的祝福
	uint32	error;
};

// 挂机副本：删除装备区的祝福
struct U2GS_AutoDungeonDeleteBless ->
{
	uint16	pos;			//	祝福位置
};
struct GS2U_AutoDungeonDeleteBlessRet <-
{
	uint16	pos;			//	祝福位置
	uint32	error;
};

// 返回 GS2U_MonsterDrop
struct U2GS_MonsterDrop ->
{
};

// ---------------------------- 镜像队伍 ------------------------------
// 镜像队伍：邀请
struct U2GS_MirrorTeamAdd ->
{
    uint8  num;     // 邀请几个
    vector<uint64>  playerIdList1;       // 已经存在的成员
    vector<uint64>  playerIdList2;       // 已经踢过的成员
};
struct GS2U_MirrorTeamAdd <-
{
    uint32  errorCode;      // 错误码
    vector<LookInfoMirrorPlayer>  playerList;		// 新邀请的成员列表
    vector<ObjectSkillFix>  objectFixList;
};

// 镜像队伍：更新
struct U2GS_MirrorTeamUpdate ->
{
    vector<uint64>  playerIdList;       // 更新哪些成员
};
struct GS2U_MirrorTeamUpdate <-
{
    uint32  errorCode;      // 错误码
    vector<LookInfoMirrorPlayer>  playerList;		// 更新的成员列表
    vector<ObjectSkillFix>  objectFixList;
};

// ========================================== 防沉迷 ===============================================
// 防沉迷提醒同步
struct GS2U_game_fcm_notice <-
{
    uint8 type;    // 提醒类型 1-每日在线提醒 2-强制离线提醒
    uint8 useTime; // 累计在线时长
    uint8 maxTime; // 最大可在线时长
};

// 防沉迷信息
struct GS2U_game_fcm_info <-
{
    uint16 monthly_recharge; 当月充值金额
    uint8 useTime; // 累计在线时长
    uint8 maxTime; // 最大可在线时长
    vector<key_2value> rechargeList; // 限制消费金额{年龄，单笔上限，每月上限}
    key_value dailyLoginLimit; // 每日限制登陆时间 {开始时间，结束时间} 
    vector<key_value> funcswitch; //功能开关{id,0/1}
    key_value timeLimit;    // 在线时长限制 {平时，节假日}
};

// 年龄上报
struct U2GS_game_fcm_age ->
{
    uint8  age;                // 玩家年龄
};
// ========================================== 防沉迷 ===============================================

// 同账号其他角色镜像
struct U2GS_TryGetMultiplePlayer ->
{
        
};
struct GS2U_TryGetMultiplePlayerRet <-
{
        uint32  errorCode;      // 错误码
        vector<LookInfoMirrorPlayer>  playerList;                
        vector<ObjectSkillFix>  objectFixList;
};


// 多角色复活
struct U2GS_MultiplePlayerReborn ->
{
	uint8               type;       // 1-单角色复活 2-全角色复活
	uint8				reviveID;   // 复活ID
	uint64              roleID;  	// 复活角色ID（type=1有效）
};
struct GS2U_MultiplePlayerRebornRet <-
{
	uint32				result;	    // 0表示成功，其他为失败原因
	uint64              playerID;   // 复活玩家ID
	uint64              roleID;  	// 复活角色ID
	float				x;			//新坐标X
	float				y;			//新坐标Y
	uint8				reviveID;   // 复活ID
};

// ========================================== 恶魔狩猎季 ===============================================
// 恶魔狩猎简易排行榜
struct DemonSeasonTopStc
{
	uint64        playerId;     // 玩家ID
	uint16        rank;			// 玩家排名
	string        name;         // 玩家姓名
	uint32        sex;			// 玩家性别
	uint16        career;       // 职业
	pb_uint32        headID;       // 头像ID
	pb_uint32        frame;        // 头像框ID
	uint16        star_num;     // 星数
	uint16 		  chapter;      // 章节
    uint16 		  order;        // 章节序号
};

// 恶魔狩猎季信息
struct U2GS_DemonSeason ->
{
};

struct GS2U_DemonSeasonRet <-
{
	uint16 season_id;		// 赛季数
	uint16 season_index;	// 赛季分段
	uint32 open_time;		// 开启时间
	uint32 next_time;		// 下一次结算时间
	uint16 my_star_num;     // 我的星数
	uint16 my_chapter;      // 我的章节
    uint16 my_order;        // 我的序号
    uint16 max_star_num;    // 服务器当前最大星数
	uint16 max_chapter;		// 服务器当前最大通关章节
	uint16 max_order;		// 服务器当前最大通关章节序号
	vector<DemonSeasonTopStc> top3_list; // 前三简易排行榜
	uint16 my_rank;         // 我的排名 0-未上榜

};

// 阶段结算消息
struct GS2U_DemonSeasonEndSync <-
{
	uint16 season_id;			// 赛季数
	uint16 season_index;		// 赛季分段
	uint16 top_star_num;       // 第一名玩家的星数
	uint16 top_chapter;		   // 第一名玩家的章节
	uint16 top_order;		   // 第一名玩家的序号
	playerModelUI top_player_info; // 第一名玩家的外观信息
	uint16 my_chapter;		   // 我的章节
	uint16 my_order;		   // 我的序号
	uint16 my_star_num;        // 我的星数
	uint32 my_percent;         // 我的排名
	uint8  notice_type;        // 0-气泡 1-直接弹
};

struct U2GS_getDungeonTopModel ->
{
	uint8				type;// 类型 1-恶魔狩猎季
};

struct GS2U_getDungeonTopModelRet <-
{
	uint8				type;// 类型 1-恶魔狩猎季
	vector<playerModelUI>	topPlayers;
};

// 奖励档位变化
struct GS2U_DemonSeasonReawrdStageChange <-
{
};
// ========================================== 恶魔狩猎季 ===============================================

// 客户端请求改变隐身状态
struct U2GS_HideStatus ->
{
	bool  hideStatus;		// 新的隐身状态
};
// 服务器同步当前隐身状态
struct GS2U_HideStatus <-
{
    bool  hideStatus;		// 当前隐身状态
};

// 客户端副本进入
struct U2GS_ClientDungeonsEnter ->
{
	uint32 dungeon_id;
	bool   is_second_kill;	// 是否秒杀
};

// 客户端副本进入返回
struct GS2U_ClientDungeonsEnterRet <-
{
	uint32 dungeon_id;
	uint32 error_code;
	bool	is_second_kill;	// 是否是秒杀
};

// 客户端副本通关
struct U2GS_ClientDungeonsSucceed ->
{
	uint32 dungeon_id;
};

// 客户端副本通关返回
struct GS2U_ClientDungeonsSucceedRet <-
{
	uint32 dungeon_id;
	uint32 error_code;
};

// 快速讨伐获取当次讨伐信息
struct U2GS_quick_hang_get_info ->
{
};
struct GS2U_quick_hang_get_info_ret <-
{
	uint64 exp;             // 经验
	uint16 level;           // 等级
	uint32 total_times;           // 累计次数
};

// 客户端副本失败
struct U2GS_ClientDungeonsFail ->
{
	uint32 dungeon_id;
};

// 客户端副本失败返回
struct GS2U_ClientDungeonsFailRet <-
{
	uint32 dungeon_id;
	uint32 error_code;
};
// ========================================== 新排行榜 ===============================================
// 排行榜玩家
struct chartPlayer
{

	playerModelUI ui_info;          // 外观信息 
	uint16	rank;					// 排名
	uint64	value;					// 排名值
	vector<int32>	customInt;		// 自定义字段
	uint32	time;					// 进入排名时间
	uint32	worship_times;			// 被赞美次数
};

struct U2GS_getChart->
{
	uint16	type;			// 排名类型
	uint8   shift;          // 分页偏移量
};

struct GS2U_getChartRet<-
{
	uint16	type;					// 排行类型
	uint8   shift;          		// 分页偏移量
	uint32  err_code;               // 错误码
	uint16  remain_num;				// 剩余个数
	uint16  my_rank;                // 我的排名
	vector<chartPlayer>	top_list;	// 列表
};

struct GS2U_sendWorshipList<-
{
	vector<uint64>	worship_list;	// 今日已膜拜列表
};
// ========================================== 新排行榜 ===============================================

// ================================= 磕丹 start ===============================
// 发送角色磕丹信息
struct role_pill
{
	uint64  		  role_id; // 角色ID
	vector<key_value> pill_list; // 磕丹信息 <丹药ID, 总使用次数>
};

struct GS2U_send_all_pill_info <-
{
	vector<role_pill> role_pill_list; // 磕丹信息 <丹药ID, 总使用次数>
};

// 磕丹请求
struct U2GS_use_pill_req ->
{
	uint64  		role_id; 		// 角色ID
	vector<key_value>   		item_list;    // [{丹药ID, 数量}]
};
// 磕丹返回
struct GS2U_use_pill_ret <-
{
	uint64  		role_id; 		// 角色ID
	vector<key_value>   		item_list;    // [{丹药ID, 数量}]
	uint32  		err_code;   // 错误码
};
// ================================= 磕丹 end =================================
// ================================= 转生 start ===============================
struct reincarnate_help_record
{
	string name;
	uint8 sex;
	uint16 head_id;
	uint16 frame_id;
	uint16 times;
};



// 请求正在进行中的转生
struct U2GS_reincarnate_info_req ->
{
};
// 正在进行中的转生
struct GS2U_reincarnate_info_sync <-
{
	uint8 rein_lv;		// 转生等级
	uint8 stage;		// 转生阶段
	uint16 point;		// 转生点数
	uint8 state;        // 状态 0-等待开启 1-已开启
	uint16 personal_suppress; // 个人压制
	uint16 union_suppress;	// 联合压制
	uint8  seeker_help_times; // 剩余求助次数
	uint8  self_suppress_times; // 剩余自己压制次数
	uint32 last_suppress_time; // 上一次压制时间
	uint32 seal_end_time; // 封印结束时间
	vector<reincarnate_help_record>  help_record; // 协助记录
};

// 接取转生
struct U2GS_reincarnate_accept ->
{
	uint8 rein_lv;
};
// 接取转生返回
struct GS2U_reincarnate_accept_ret <-
{
	uint8 	rein_lv;
	uint32  err_code;   // 错误码
};

// 请求下一阶段转生
struct U2GS_reincarnate_next ->
{
};
// 请求下一阶段转生返回
struct GS2U_reincarnate_next_ret <-
{
	uint8 			rein_lv;
	uint8 			stage;		// 新阶段
	uint32  		err_code;   // 错误码
};

// 请求压制
struct U2GS_reincarnate_requeset_suppress ->
{
	uint8 type; // 1-自己压制 2-请求压制
};
// 请求压制返回
struct GS2U_reincarnate_requeset_suppress_ret <-
{
	uint8 type; // 1-自己压制 2-请求压制
	uint32  err_code;   // 错误码
};

// 请求压制帮助消息
struct GS2U_reincarnate_suppress_msg <-
{
	uint64 player_id;
	string name;
	uint8  sex;
	uint16 rein_lv;
};

// 帮助压制
struct U2GS_reincarnate_help_suppress ->
{
	uint64 player_id;
	uint16 rein_lv;
};
// 帮助压制返回
struct GS2U_reincarnate_help_suppress_ret <-
{
	uint32  err_code;   // 错误码
};

// 请求进入挑战地图
struct U2GS_reincarnate_enter_map ->
{
	uint32 map_data_id;
};
// 请求进入挑战地图返回
struct GS2U_reincarnate_enter_map_ret <-
{
	uint32 map_data_id;
	uint32  err_code;   // 错误码
};
// ================================= 转生 end =================================
// ================================= D3精英副本 start =========================
// 所有章节信息
struct eliteDungeonInfo
{
	uint16	group_id;						// 章节ID
	vector<key_value>	pass_info;			// 本章通关情况
	vector<uint16>		progress_reward_info;// 章节奖励领取情况
	vector<uint16>		bp_reward;			// bp奖励领取情况
};
struct GS2U_EliteDungeonInfoList  <-
{
	vector<eliteDungeonInfo> info_list;
};
// 单个章节信息
struct GS2U_UpdateSingleEliteDungeonInfo  <-
{
	vector<eliteDungeonInfo> info_list;
};

// 进入精英副本
struct U2GS_EliteDungeonEnter ->
{
	uint16 group_id;				// 章节ID
	uint32 dungeon_id;				// 副本ID
};
struct GS2U_EliteDungeonEnterRet <-
{
	uint16 group_id;			// 章节ID
	uint32 dungeon_id;			// 副本ID
	uint32 error_code;
};

// 精英副本返回
struct GS2U_EliteDungeonResult <-
{
	uint32				dungeon_id;		// 副本id
	bool				is_win;			// 是否胜利
	uint8				old_star;		// 上次通关星数
	uint8				new_star;		// 当前通关星数
};

// 领取精英副本进度奖励
struct U2GS_EliteDungeonProgressReward ->
{
	uint16 bp_group;		// 战令组
	uint16 group_id;		// 章节ID
	uint16 reward_id;		// 奖励ID
	vector<uint16>	ext_data;	// 附加参数
};
struct GS2U_EliteDungeonProgressRewardRet <-
{
	uint16 bp_group;		// 战令组
	uint16 group_id;		// 章节ID
	uint16 reward_id;		// 奖励ID
	vector<uint16>	ext_data;	// 附加参数
	uint32 error_code;
};

// 购买精英副本bp
struct U2GS_EliteDungeonBpBuy ->
{
	uint16 bp_group;		// 战令组
};
struct U2GS_EliteDungeonBpBuyRet <-
{
	uint16 bp_group;		// 战令组
	uint32 error_code;
};

// ================================= D3精英副本 end ===========================
// ================================= 新交易行 start ===========================
// 商品
struct trading_goods
{
    uint64  goods_id;       // 商品Id
    uint32  item_id;        // 物品配置Id
    uint8   item_character; // 物品品质
    uint8   item_star;      // 物品星级
    uint16  item_amount;    // 物品数量
    uint32  price_buy;      // 价格
    uint32  expire_time;    // 下架时间
};

// 请求商品列表
struct U2GS_trading_goods_list ->
{
    uint16          num_per_page;   // 每页条数
    vector<uint32>  item_id_list;   // 搜索物品配置Id列表
    int16          item_type;      // 宏观类型
    int16          detailed_type;  // 详细类型
    int16          detailed_type2; // 详细类型2
    int16          detailed_type3; // 详细类型3
    int8           item_character; // 物品品质
    int8           item_star;      // 物品星级
    int8           item_order;     // 物品阶数
    int8           rank_price;     // 价格排序
    uint16         shift;          // 分页偏移量
    uint8          has_stock;      // 是否有货
    uint8   	   trade_type;     // 交易行类型 1-全服 2-公会
};

struct GS2U_trading_goods_list_ret <-
{
    uint32                  error;      		// 错误码，为0时后面值才有效
    uint16          		shift;              // 分页偏移量
    uint32                  goods_remain_num;   // 商品剩余数
    vector<trading_goods>   goods_list; 		// 商品列表
};

// 上架商品
struct U2GS_trading_item_goods_on_shelves ->
{
	uint8   bag_id;         // 背包Id
    uint64  bag_item_id;    // 背包中物品Id
    uint16  item_amount;    // 物品数量
    uint8   trade_type;     // 交易行类型 1-全服 2-公会
};
struct GS2U_trading_item_goods_on_shelves_ret <-
{
    uint32  error;      // 错误码 
};

// 重新上架商品
struct U2GS_trading_item_goods_again_on_shelves ->
{
	uint64  goods_id; // 商品uid
	uint8   trade_type;     // 交易行类型 1-全服 2-公会
};
struct GS2U_trading_item_goods_again_on_shelves_ret <-
{
	uint64  goods_id; // 商品uid
	uint8   trade_type;     // 交易行类型 1-全服 2-公会
    uint32  error;      // 错误码 
};

// 下架商品
struct U2GS_trading_item_goods_off_shelves ->
{
	uint64 goods_id; // 商品uid
};
struct GS2U_trading_item_goods_off_shelves_ret <-
{
	uint64 goods_id; // 商品uid
    uint32  error;      // 错误码 
};

struct trading_item_goods_shelves
{
    uint64  goods_id;       // 商品Id
    uint32  item_id;        // 物品配置Id
    uint8   item_character; // 物品品质
    uint8   item_star;      // 物品星级
    uint8   state;   		// 0-上架中 1-下架
    uint16  num; 			// 剩余数量
    uint16  sell_num; 		// 卖出待提取的数量
    uint32  time;           // 上架时间
    uint8   trade_type;     // 交易行类型 1-全服 2-公会
};

// 我上架的物品商品
struct U2GS_trading_item_my_shelves ->
{
};
struct GS2U_trading_item_my_shelves_ret <-
{
    vector<trading_item_goods_shelves>     list;  
};

// 请求购买商品
struct U2GS_trading_goods_buy ->
{
    uint64  goods_id;        // 商品Id
    uint16  amount;    		 // 购买数量
    uint8   currency_type;   // 消耗货币ID
    uint32  currency_num;	 // 消耗货币数量
    uint8   trade_type;     // 交易行类型 1-全服 2-公会

};
struct GS2U_trading_goods_buy_ret <-
{
    uint32  error;      // 错误码
    uint64  goods_id;   // 商品Id
    uint32  num;        // 剩余数量 
    uint8   trade_type;     // 交易行类型 1-全服 2-公会
};

// 关注
struct trading_goods_watch
{
    uint32  item_id;        // 物品配置Id
    uint8   item_character; // 物品品质
    uint8   item_star;      // 物品星级
};

// 请求关注数据列表
struct U2GS_trading_goods_watch_list ->
{
};
struct GS2U_trading_goods_watch_list_ret <-
{
    uint32                  error;      					// 错误码，为0时后面值才有效
    vector<trading_goods_watch>   		watch_list; 		// 关注列表(物品配置Id)
};

// 请求关注商品
struct U2GS_trading_goods_watch_add ->
{
   vector<trading_goods_watch>   watch_list;
};
struct GS2U_trading_goods_watch_add_ret <-
{
    uint32                  error;          			// 错误码，为0时后面值才有效
    vector<trading_goods_watch>   watch_list;     		// 新增关注列表（只发新增的，成功一个，失败0个）
};

// 请求取消关注
struct U2GS_trading_goods_watch_remove ->
{
    vector<trading_goods_watch>   watch_list;
};
struct GS2U_trading_goods_watch_remove_ret <-
{
    uint32  error;          // 错误码
    vector<trading_goods_watch>   watch_list;
};

// 推送关注商品
struct GS2U_trading_goods_watch_notice <-
{
    uint32  item_id;        // 物品配置Id
    uint8   item_character; // 物品品质
    uint8   item_star;      // 物品星级
    uint8   trade_type;     // 交易行类型 1-全服 2-公会
};

// 交易行记录
struct trading_goods_history
{
    uint32  item_id;        // 物品配置Id
    uint8   item_character; // 物品品质
    uint8   item_star;   	// 物品星级
    uint16  item_amount;    // 物品数量
    uint8   currency_type;  // 货币ID
    uint32  finish_price;   // 交易总价
    string  player_name;    // 交易玩家名字
    uint8   player_sex;     // 交易玩家性别
    uint32  time;    		// 交易时间
    uint8   trade_type;     // 交易行类型 1-全服 2-公会
};

// 请求记录列表
struct U2GS_trading_goods_history_list ->
{
    uint8                       label_type;     // 标签类型：1-个人购买、2-个人出售、3-市场购买、4-市场出售
};
struct GS2U_trading_goods_history_list <-
{
    uint8                       label_type;     // 标签类型
    uint32                      error;          // 错误码，为0时后面值才有效
    vector<trading_goods_history>     history_list;   // 记录列表
};

// 粉钻商品列表
struct U2GS_trading_gold_goods_list ->
{
};
struct GS2U_trading_gold_goods_list_ret <-
{
    vector<key_value>     list;   // 商品列表 价格、数量
};

struct trading_gold_goods_shelves
{
    uint64 goods_id; // 商品uid
    uint8  state;   // 0-上架中 1-下架
    uint16 price; // 单价
    uint16 num; // 剩余数量
    uint16 sell_num; // 卖出待提取的数量
    uint32 time; // 上架时间
};

// 我上架的粉钻商品
struct U2GS_trading_gold_my_shelves ->
{
};
struct GS2U_trading_gold_my_shelves_ret <-
{
    vector<trading_gold_goods_shelves>     list;  
};

// 购买粉钻
struct U2GS_trading_gold_goods_buy ->
{
	uint16 price;
	uint16 num;
	uint8  is_server;
};
struct GS2U_trading_gold_goods_buy_ret <-
{
	uint16 price;
	uint16 num;
	uint8  is_server;
    uint32  error;      // 错误码 
};

// 上架粉钻
struct U2GS_trading_gold_goods_on_shelves ->
{
	uint16 num;
	uint16 price;
};
struct GS2U_trading_gold_goods_on_shelves_ret <-
{
	uint16 num;
	uint16 price;
    uint32  error;      // 错误码 
};

struct U2GS_trading_gold_goods_again_on_shelves ->
{
	uint64  goods_id; // 商品uid
	uint16 price;
};
struct GS2U_trading_gold_goods_again_on_shelves_ret <-
{
	uint64  goods_id; // 商品uid
	uint16 price;
    uint32  error;      // 错误码 
};

// 下架粉钻
struct U2GS_trading_gold_goods_off_shelves ->
{
	uint64 goods_id; // 商品uid
};
struct GS2U_trading_gold_goods_off_shelves_ret <-
{
	uint64 goods_id; // 商品uid
    uint32  error;      // 错误码 
};

// 请求当前粉钻价格
struct U2GS_trading_gold_goods_price ->
{
};
struct GS2U_trading_gold_goods_price_ret <-
{
	uint16 price;
};

// 请求粉钻价格走势
struct U2GS_trading_gold_price_trend ->
{
};
struct GS2U_trading_gold_price_trend_ret <-
{
	vector<key_value>     list;   // 小时(24小时)，价格
};

// 提取收益
struct U2GS_trading_goods_take_income ->
{
	uint8  type;     // 类型 1-普通商品 2-粉钻商品
	uint64 goods_id; // 商品uid
};
struct GS2U_trading_goods_take_income_ret <-
{
	uint8  type;     // 类型 1-普通商品 2-粉钻商品
	uint64 goods_id; // 商品uid
	uint16 revenue;  // 税率
    uint32  error;   // 错误码 
};

// 提取收益红点提醒
struct GS2U_trading_goods_take_income_red <-
{
	uint8  type;   // 类型 1-普通商品 2-粉钻商品
};
// ================================= 新交易行 end ===========================

// ================================= 赏金任务 ===========================
struct bounty_task_unit
{
	uint8 	type;			// 单位类型 1 角色 2 坐骑 3 魔宠 4 翅膀 
	uint64 	id;				// 单位ID
	uint8 	state;			// 单位状态 0 空闲中 1 占用中
};

struct bounty_task
{
	uint32 			task_id;		// 任务ID
	uint8 			state;			// 任务状态 0 未开始 1 已派遣 2 已完成未领取 3 已领取
	uint32 			begin_time;		// 开始时间戳 0 未开始
	vector<bounty_task_unit> 	unit_list; 		// 单位列表
};

// 玩家信息同步
struct U2GS_bounty_task_update_player_req ->
{
	bool 	add_guide_task;				// 添加引导任务
};
struct GS2U_bounty_task_update_player <-
{
	vector<bounty_task> 	task_list;				// 任务列表
	uint8 					is_special;				// 是否拥有特权 0 未拥有 1 拥有特权
	uint8 					free_refresh_times;		// 使用的免费刷新次数
	uint8					pay_refresh_times;		// 使用的付费刷新次数
	uint8 					used_dispatch_times;	// 已派遣次数
	uint64 					accumulated_exp;		// 累计特权经验
	uint8 					used_add_item_times;	// 使用增加派遣次数道具数
	bool 					include_guide_task;				// 是否含有引导任务
	uint8  					fail_times;						// 累计刷新失败次数
	bool 					lock;				// 锁定状态 false 未锁定 true 锁定中
};

//请求单位列表
struct U2GS_bounty_task_unit_list_req ->
{
};
struct GS2U_bounty_task_unit_list_ret <-
{
	vector<bounty_task_unit> unit_list; 	// 单位列表
};

// 派遣任务
struct U2GS_bounty_task_dispatch_req ->
{
	uint32 			task_id;		// 任务ID
	vector<uint64> 	unit_list;		// 派遣使用的单位ID列表
};
struct GS2U_bounty_task_dispatch_ret <-
{
	uint32 			task_id;		// 任务ID
	vector<uint64> 	unit_list;		// 派遣使用的单位ID列表
	uint32 			err_code;		// 错误码
};

// 完成任务
struct U2GS_bounty_task_complete_req ->
{
	uint32 			task_id;		// 任务ID
};
struct GS2U_bounty_task_complete_ret <-
{
	uint32 			task_id;		// 任务ID
	uint32 			err_code;		// 错误码
};

// 刷新任务列表
struct U2GS_bounty_task_refresh_req ->
{
	uint8 			type;		// 刷新类型 0 免费 1 付费
};
struct GS2U_bounty_task_refresh_ret <-
{
	uint8 			type;		// 刷新类型 0 免费 1 付费
	uint32 			err_code;	// 错误码
};

// 加速任务
struct U2GS_bounty_task_accelerate_req ->
{
	uint32 			task_id;	// 任务ID
};
struct GS2U_bounty_task_accelerate_ret <-
{
	uint32 			task_id;	// 任务ID
	uint32 			err_code;	// 错误码
};

// 更新赏金任务信息
struct GS2U_bounty_task_update <-
{
	uint8 is_red_point;		// 是否有红点 0 无 1有
	uint8 task_num;			// 已完成未领取的任务数量
	uint8 is_special;				// 是否拥有特权 0 未拥有 1 拥有特权
	uint32 closest_task_time; // 最近任务完成时间
};

// 变更锁定状态
struct U2GS_bounty_task_lock_req ->
{
	bool 	target_lock;	// 目标锁定状态 false 未锁定 true 锁定中
};
struct GS2U_bounty_task_lock_ret <-
{
	bool 			target_lock;	// 目标锁定状态 false 未锁定 true 锁定中
	uint32 			err_code;		// 错误码
};

// 激活特权返回
struct GS2U_bounty_task_active_special_ret <-
{
	uint16 			num; 			// 奖励钻石数量
	uint64 			exp;				// 经验值 
	uint32 			err_code;		// 错误码
};
// ================================= 赏金任务 end ===========================

// ========================= 装备收藏 start ===========================
//推送装配信息
struct collect_pos
{
	uint64 		role_id;	// 角色ID
	uint8  		order;     	// 阶数
	uint8  		pos;    	// 部位
	uint64  	uid;  		// 装备uid
	uint8    	reborn_lv;	// 再生等级
	vector<key_3value>  reborn_prop;     	// 再生属性
};
struct GS2U_collect_pos_info <-
{
   vector<collect_pos>	pos_list;    //装配列表
};

//装配/卸下
//请求
struct U2GS_collect_equip_req ->
{
	uint64 	role_id;			// 角色ID
	uint8  	is_equip;  			// 0卸下1装配
	uint8  	order;     			// 阶数
	vector<uint64>  uid_list;   // uid列表
}
//返回
struct GS2U_collect_equip_ret <-
{
	uint64 		role_id;	// 角色ID
	uint8 	is_equip;		// 0卸下1装配
	uint8  	order;     		// 阶数
	vector<pos_value> 	pos_value_list;  // 发生改变的{pos value}列表
	uint32  err_code;  		// 错误码
}

//再生
//请求
struct U2GS_collect_reborn_req ->
{
	uint64 		role_id;	// 角色ID
	uint8  order;	// 阶数
	uint8  pos;		// 部位
};
//返回
struct GS2U_collect_reborn_ret <-
{
	uint64 		role_id;	// 角色ID
	uint8  	order;     	// 阶数
	uint8  	pos;    	// 部位
	uint32  err_code;  	// 错误码
};
// ========================= 装备收藏 end =============================

// 引导副本通关列表
struct GS2U_guide_dungeon_pass <-
{
   vector<uint32>	dungeon_id_list;
};

// ========================= 神饰 start ===========================

// 神饰信息更新
struct GS2U_god_ornament_update <-
{
   uint64 role_id;									// 角色ID
   vector<godOrnamentLayer>	list;					// 分阶列表
};

// 神饰操作
struct U2GS_god_ornament_op ->
{
	uint64 role_id;	// 角色ID
	uint8  op;      // 操作 1-激活 2-卓越激活 3-卓越晋升 4-升阶
	uint8  type;    // 神饰类型
	uint8  order;	// 阶数
};
// 神饰操作返回
struct GS2U_god_ornament_op_ret <-
{
	uint64 	role_id;	// 角色ID
	uint8   op;      	// 操作 1-激活 2-卓越激活 3-卓越晋升 4-升阶
	uint8   type;       // 神饰类型
	uint8  	order;     	// 阶数
	uint32  err_code;  	// 错误码
};
// ========================= 神饰 end =============================
// 技能书技能激活
struct GS2U_active_book_skill <-
{
	vector<uint32> 	item_id;	// 物品配置ID
};

// ================================= 卡片 start ===============================

// 装配/卸下 请求
struct U2GS_card_equip_req ->
{
	uint64 		role_id;		// 角色ID
	vector<key_value> card_list; // <Hole, CardID>
};
// 装配/卸下 返回
struct GS2U_card_equip_ret <-
{
	uint64 		role_id;		// 角色ID
	vector<key_value> success_list; 	// 装配成功的卡片列表 <Hole, CardID>
	vector<key_value> fail_list; 	// 装配失败的卡片列表 <Hole, CardID>
	uint32  		err_code;   // 错误码
};

// 卡片合成 请求
struct U2GS_card_combine_req ->
{
	vector<key_value> card_num_list; // <CardID, Num>
};
// 卡片合成 返回
struct GS2U_card_combine_ret <-
{
	vector<key_value> card_num_list; // <CardID, Num>
	vector<key_value> get_card_num_list; // 合成获得的卡片列表 <CardID, Num>
	uint32  		err_code;   // 错误码
};

// 卡片重铸 请求
struct U2GS_card_recast_req ->
{
	vector<uint32> card_list; // <CardID>
};
// 卡片重铸 返回
struct GS2U_card_recast_ret <-
{
	vector<uint32> card_list; // <CardID>
	uint32 			new_card_id; // 获得的卡片ID
	uint32  		err_code;   // 错误码
};

// 卡片 快捷合成 请求
struct U2GS_card_quick_combine_req ->
{
	uint64 		role_id;		// 角色ID
	vector<key_value> hole_card_list; // <Hole, CardID>
};
// 卡片 快捷合成 返回
struct GS2U_card_quick_combine_ret <-
{
	uint64 		role_id;		// 角色ID
	vector<key_value> hole_card_list; // <Hole, CardID>
	uint32  		err_code;   // 错误码
};

struct card_recast_cost
{
	uint8 key; 卡组编号
	vector<uint32> card_list; // <CardID>
}

// 卡片一键重铸 请求
struct U2GS_one_key_card_recast_req ->
{
	vector<card_recast_cost> key_card_list; // <卡组编号，CardID1, CardID2, CardID3>
};
// 卡片一键重铸 返回
struct GS2U_one_key_card_recast_ret <-
{
	vector<card_recast_cost> key_card_list; // <卡组编号，CardID1, CardID2, CardID3>
	vector<key_value> 			new_card_list; // <卡组编号，NewCardID>
	uint32  		err_code;   // 错误码
};

// ================================= 卡片 end =================================
// ================================= 快速讨伐 start =================================
// 快速讨伐信息
struct U2GS_quick_hang_info ->
{
}; 
struct GS2U_quick_hang_info_ret <-
{
	vector<uint16>	daily_reward;		// 每日奖励进度
	uint16	daily_reward_lv;	// 每日奖励等级
	uint16	total_reward_id;	// 累计奖励id
	uint16	total_reward_num;	// 累计讨伐数
	uint16	total_reward_lv;	// 累计讨伐等级
};

// 快速讨伐每日奖励领取
struct U2GS_quick_hang_get ->
{
};
struct GS2U_quick_hang_get_ret <- 
{
	uint32	error_code;
};


// 快速讨伐累计奖励领取
struct U2GS_quick_hang_get_big ->
{
};
struct GS2U_quick_hang_get_big_ret <- 
{
	uint32	error_code;
};
// ================================= 快速讨伐 end =================================
// ================================= 功能预告 start =================================
struct GS2U_advance_notice_reward_info <-
{
	vector<key_2value>	reward_list;		// key:功能ID value1:预告奖励领取情况 value2：功能开启奖励领取情况
};
struct U2GS_advance_notice_reward ->
{
	uint16	type;	// 	类型：1-预告奖励 2-开启奖励
	uint16	id;		//	功能ID
};
struct GS2U_advance_notice_reward_ret <- 
{
	uint32	error_code;
	uint16	type;	// 	类型：1-预告奖励 2-开启奖励
	uint16	id;		//	功能ID
};
// ================================= 功能预告 end =================================
// ================================= 打宝 start ===============================
// 购买体力值/清除诅咒值
struct U2GS_demon_buy_fatigue ->
{
	uint16	type;	// 	类型：1:恶魔入侵 3:恶魔巢穴
	uint8   times;	//  购买次数
};
// 购买体力值/清除诅咒值 返回
struct GS2U_demon_buy_fatigue_ret <- 
{
	uint32	error_code;
	uint16	type;	// 	类型：1:恶魔入侵 3:恶魔巢穴
	uint8   times;  //  购买次数
	uint16  extra_fatigue;  // 额外疲劳
};

// 打宝刷新通知
struct GS2U_demon_fresh_notice <- 
{
	uint16	type;	// 	类型：3:恶魔巢穴
	uint32  time;   //  刷新时间(s)
};

// 打宝进入倍数设置
struct U2GS_demon_enter_multi_set ->
{
	uint16	type;	// 	类型：1:恶魔入侵 3:恶魔巢穴 4:诅咒禁地
	uint8   multi;  //  倍数
};

// 打宝进入倍数设置返回
struct GS2U_demon_enter_multi_set_ret <- 
{
	uint32	error_code;
	uint16	type;	// 	类型：1:恶魔入侵 3:恶魔巢穴 4:诅咒禁地
	uint8   multi;  //  倍数
};

// 打宝掉落倍数提示
struct GS2U_demon_kill_multi_notice <- 
{
	uint16	multi;			// 设置倍数
	uint16  actual_multi;   //  实际倍数
};

// 打宝血量百分比同步
struct GS2U_demon_hp_percent_sync <- 
{
	vector<key_value> list; // key 怪物配置id value 血量百分比
};
// ================================= 打宝 end =================================
// ======================== 新版活动 start ==============================================
 //活动入口简要信息
struct active_summary_info
{
	pb_uint32	id;					// 活动入口ID
	pb_uint16	type;				// 活动类型
	pb_uint16	style;				// 活动风格编号
	string      name;               // 活动名
	uint32		startTime;			// 活动开始时间
	uint32		endTime;			// 活动结束时间
	uint32		showStartTime;		// 活动可见开始时间
	uint32		showEndTime;		// 活动可见结束时间
	uint16 		level_limit;		// 所需等级
	vector<key_value>  		vip_limit;			// 所需VIP等级
	uint8       vip_type;           // vip刷新类型
	uint8       isRed;          	// 1显示红点 0不显示
	uint8       enter_show;     	// 入口显示控制
	string    enter_show_Text;  // 活动预告大致奖励说明的飘字文字配置
	uint16      menu_id;            // 功能图标icon
	uint8       uIPushType;            // 活动拍脸弹窗类型
    vector<key_2value> uIPush;	// 活动拍脸逻辑，允许配置多个活动拍脸
    vector<uint32>   param_list; // 参数
};
// 活动入口信息
struct active_entrance_info
{
	uint64 ref_id;    		// 入口标识 
	pb_int32 team_type;		// 活动分组
	string team_name;		// 入口名
	pb_uint32 icon_id;			// 入口图标ID
	pb_uint32 icon_id_show;			// 主界面活动icon上是否挂特效
	uint8   switch_type;                // 是否显示独立汇总界面
	vector<active_summary_info> active_list;
};
// 活动详细信息
struct active_detail_info
{
	uint32		id;						// 活动入口ID
	uint32      group_id;       		// 组id
	uint16      group_index;    		// 分组顺序
	string		title;					// 活动名称
	string      top_title;      		// 界面标题
	uint16		type;					// 活动类型
	uint16		style;					// 活动风格编号
	uint16      menu_id;        		// 功能图标icon
	uint8 		state;          		// 活动状态 0-无状态 1-推荐 2-已完成
	uint32		startTime;				// 活动开始时间
	uint32		endTime;				// 活动结束时间
	uint32		showStartTime;			// 活动可见开始时间
	uint32		showEndTime;			// 活动可见结束时间
	uint16 		level_limit;			// 所需等级
	vector<key_value>  		vip_limit;	// 所需VIP等级
	uint8       vip_type;           // vip刷新类型
	vector<key_value> interval_list;	// 活动时间区间
	vector<uint32>	pic_list;			// 活动配置图标
	string		describe;				// 活动描述
	string      banner_text;    		// banner文字
	uint32      direct_purchase_id;     // 关联直购活动入口id
	vector<uint16>	list_pic;			// 列表背景图
};

// 当前条件值
struct activeConditionInfo
{
	uint32		conditionID;	// 条件ID
	uint32		targetNum;		// 目标
	uint32		param1;			// 参数1
};

// 条件达成类
struct conditionClass
{
	uint32					id;			// 活动项ID
	uint8					vip_limit;	// 
	uint16					lv_limit;			// 等级限制
	vector<activeConditionInfo>	condition_list;	// 活动条件列表
	vector<indexTypeItem>	item_list;	// 奖励物品
	vector<uint32>			limit;		// 领奖限制[类型,次数]
	uint16					score;				// 达成奖励积分
	uint16					param;		// 额外参数：无尽宝藏-钥匙数量
};

// 活动条件列表
struct achieveCondition
{
	uint32		conditionID;	// 条件ID
	uint64		curNum;			// 当前值
	uint64		param;			// 参数1(物品类型时：物品ID)
};

// 达成项目列表
struct achieveParam
{
	uint32		id;				// 活动项
	uint32		getRewardTimes;	// 领奖次数
};

struct activeRedPoint
{
	uint32		id;				// 活动入口ID
	uint16      type;           // 活动类型
	uint8       isRed;          // 1显示红点 0不显示
	vector<key_value> red_list; // 红点列表 key 红点类型
};

struct ActivityItemSource
{
	uint32		id;				// 活动入口ID
	vector<uint32> item_id_list; // 道具id列表
};

struct arbitraryCharge
{
	uint32		id;				// 项目id
	uint32      recharge_num;	// 目标金额
	vector<indexTypeItem>	item_list;	// 奖励物品
	uint8       limit;			// 重置类型
	uint32      model_show;     // 模型展示
};

// 活动入口信息 
struct GS2U_activeEnranceInfo <- 
{
   vector<active_entrance_info> active_entrance_list;
};
// 请求入口内活动信息
struct U2GS_getTeamActiveList ->
{
	uint64 ref_id;    // 入口标识 
};
struct GS2U_getTeamActiveListRet <-
{
	uint64 ref_id;    // 入口标识 
	uint8   switch_type;                // 是否显示独立汇总界面
	vector<uint32>	pic_list;			// 背景框ID switch_type=1有效
	string		top_title;				// 标题文字 switch_type=1有效
    vector<active_detail_info> team_active_list;
};

// 活动刷新
struct GS2U_activeFresh <- 
{
};

// 请求具体活动信息
struct U2GS_active_info_req ->
{
	uint32		id;					// 活动入口ID
};
// 一般用对应活动协议返回，当U2GS_active_info_req请求发生错误返回这个
struct GS2U_active_info_req_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
};

// 泡泡提示
struct GS2U_ActiveBubbleNotice <-
{
	uint32      ac_id;             		// 活动入口ID
	string		title;					// 活动名称
};

// 条件达成类返回
struct GS2U_conditional_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<conditionClass> conditionInfo;	    // 达成项目列表
	vector<achieveCondition>	achieveList;	// 当前条件达成值
	vector<achieveParam>	hasAchieveList;	    // 已达成列表
};


// 条件达成类活动领奖
struct U2GS_get_conditional_award ->
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引

};

// 条件达成类活动领奖返回
struct GS2U_get_conditional_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
	uint32      err;                // 错误码
	achieveParam achieve_param;     // 新达成项
};

// 推送红点刷新
struct GS2U_active_red_point_sync <-
{
	vector<activeRedPoint>	red_point_list;
};

// 推送临时红点刷新
struct GS2U_active_temp_red_point_sync <-
{
  vector<activeRedPoint>  red_point_list;
};

// 问卷调查类问题
struct Questionnaire
{
	uint16		q_id;			// 问题id
	uint8       type;           // 问题类型
	string      subject;        // 题目
	uint8       random;         // 是否随机排序
	vector<string> answer_list; // 答案列表
};

// 问卷调查类回答
struct QuestionnaireAnswer
{
	uint16				q_id;			// 问题id
	vector<uint8>       answer_index;   // 答案序号
	string      		answer_str;     // 回答
};

// 问卷调查类返回
struct GS2U_questionnaire_info_ret <-
{
    uint32      id;             			// 活动入口ID
    uint32      err;             			// 错误码
    string      text;						// 描述
    vector<Questionnaire>   question_list;  // 问题列表
    vector<indexTypeItem>   item_list;      // 奖励物品
    uint8       is_finish;      			// 是否已完成
};

//问卷调查类活动提交
struct U2GS_questionnaire_commit ->
{
    uint32                		  id;    				// 活动入口ID
    vector<QuestionnaireAnswer>   answer_list;  		// 回答列表
};

// 问卷调查类活动领奖返回
struct GS2U_questionnaire_commit_ret <-
{
        uint32      id;                 // 活动入口ID
        uint32      err;                // 错误码
};

// 活动物品来源同步
struct GS2U_activity_item_source_from <-
{
   vector<ActivityItemSource>   list;
};

// 盛典返回
struct GS2U_grand_ceremony_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<conditionClass> conditionInfo;	    // 达成项目列表
	vector<achieveCondition>	achieveList;	// 当前条件达成值
	vector<achieveParam>	hasAchieveList;	    // 已达成列表
};


// 盛典活动领奖
struct U2GS_get_grand_ceremony_award ->
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引

};

// 盛典领奖返回
struct GS2U_get_grand_ceremony_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
	uint32      err;                // 错误码
	achieveParam achieve_param;     // 新达成项
};

// 龙神殿返回
struct GS2U_dragon_temple_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<conditionClass> conditionInfo;	    // 达成项目列表
	vector<achieveCondition>	achieveList;	// 当前条件达成值
	vector<achieveParam>	hasAchieveList;	    // 已达成列表
	vector<ModelInfo>		model;		// 模型
};


// 龙神殿活动领奖
struct U2GS_get_dragon_temple_award ->
{
	uint32		id;					// 活动入口ID
	vector<key_value> award_list;	// 奖励 func_id,index
};

// 龙神殿领奖返回
struct GS2U_get_dragon_temple_award_ret <-
{
	uint32		id;					// 活动入口ID
	vector<key_value> award_list;   // 奖励
	uint32      err;                // 错误码
	vector<achieveParam> achieve_param;     // 新达成项
};

// 任意充返回
struct GS2U_arbitrary_charge_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<arbitraryCharge> charge_list;	    // 达成项目列表
	vector<key_2value> award_list;   // 项目id，已充值金额，是否领取
};

// 任意充领奖
struct U2GS_get_arbitrary_charge_award ->
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引

};

// 任意充返回
struct GS2U_get_arbitrary_charge_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
	uint32      err;                // 错误码
};

// 连充豪礼类返回
struct GS2U_continuous_recharge_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<conditionClass> conditionInfo;	    // 达成项目列表
	vector<achieveCondition>	achieveList;	// 当前条件达成值
	vector<achieveParam>	hasAchieveList;	    // 已达成列表
	vector<key_value>	  extra_award;		// 额外奖励 
	vector<indexTypeItem>   item_list;      // 奖励物品
	vector<uint32>   award_extra_list;      // 已领取的额外奖励序号
	vector<NewModelInfo> big_item_show;          // 大奖外显展示
	uint32      show1;                // 大奖道具信息读取
};


// 连充豪礼类领奖
struct U2GS_get_continuous_recharge_award ->
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引

};

// 连充豪礼类领奖返回
struct GS2U_get_continuous_recharge_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
	uint32      err;                // 错误码
	achieveParam achieve_param;     // 新达成项
};

// 连充豪礼类额外奖励领奖
struct U2GS_get_continuous_recharge_extra_award ->
{
	uint32		id;					// 活动入口ID
	uint16		index;				// 序号

};

// 连充豪礼类额外奖励返回
struct GS2U_get_continuous_recharge_extra_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint16		index;				// 序号
	uint32      err;                // 错误码
};

// ======================== 新版活动 end ================================================

// ================================= 埋点 start =================================
struct U2GS_active_check_point ->
{
	uint32		variant; // 变量值
	uint8		index;	// 	埋点索引
};
// ================================= 埋点 end =================================

// 玩家处于某种状态同步
struct GS2U_player_certain_state_sync <-
{
	uint8 key;     //  1:是否龙神骑士团前三
	uint8 value;
};

// ================================= d3资源找回 start ===============================
// 找回结构
struct retrieve_stc
{
	uint8 retrieve_id;			// 找回id
	uint16 retrieve_value;		// 今日可找回值
	uint16 has_retrieve_value;	// 今日已找回值
	uint16 available_value;		// 剩余可用找回值
	vector<key_2value> award_list; // 奖励 key 1-道具 2-货币  value1 id value2 num
	vector<EqInfo>       eq_list; // 装备奖励
	uint64 exp;
};

// 找回信息
struct GS2U_retrieve_info <-
{
    vector<retrieve_stc>   list;  		// 找回列表
};

// 找回信息更新
struct GS2U_retrieve_update <-
{
    retrieve_stc   info;  		// 找回信息
};

struct GS2U_retrieve_update_list <-
{
    vector<retrieve_stc>   info_list;  		// 找回信息
};

// 找回
struct U2GS_retrieve_some ->
{
	uint8 retrieve_id;				// 找回id
	uint16 retrieve_value;			// 找回值
};

// 找回返回
struct GS2U_retrieve_some_ret <-
{
	uint8 		retrieve_id;		// 找回id
	uint16 		retrieve_value;		// 找回值
    uint32      err;                // 错误码
};


// ================================= d3资源找回 end =================================

// 界面操作同步
struct U2GS_ui_op ->
{
	uint8 type; // 1-排行榜
	uint8 op;   // 0-打开 1-关闭
};

// ========================== 新王者1v1 ==========================
// 玩家信息
struct King1v1Player
{
	uint64     			player_id;		// 玩家id
	string				name;			// 角色名
	uint8				sex;			// 性别
	uint32				level;			// 等级
	uint32				head_id;		// 头像id
	uint32				head_frame;		// 头像框
	string				server_name;	// 服务器名
	string				guild_name;		// 战盟名
	uint64				battle_value;	// 战力
	uint32				score;			// 积分
	uint8				grade;			// 段位
	uint8				rank;			// 排名
	vector<roleModel> role_list;   // 角色信息
	uint32				season_fight_times;	// 赛季参与次数
	uint32				season_win_times;	// 赛季胜利次数
};

struct King1v1RoleRank
{
	uint64				role_id;		// 角色ID
	uint32				career;			// 职业
	uint8				is_leader;		// 是否为队长 1是 0否
};

// 排名信息
struct King1v1Rank
{
	uint64				player_id;		// 玩家id
	string				player_name;	// 玩家名
	string				server_name;	// 服务器名
	uint8				sex;			// 性别
	uint16				head_id;		// 头像id
	uint32				head_frame;		// 头像框
	uint32				level;			// 等级
	uint64				battle_value;	// 战力
	uint8				grade;			// 段位
	uint32				season_fight_times;	// 赛季参与次数
	uint32				season_win_times;	// 赛季胜利次数
	uint32				rank;			// 排名
	uint32				king_rank;		// 巅峰赛排名
	vector<roleModel> role_list;  // 角色信息
	vector<petModel> pet_list;		// 宠物列表
};

// 轮次信息
struct King1v1Round
{
	uint64			fight_id;		// 轮次id
	uint8			round;			// 轮次 1；32进16 2：16进8 3：8进4 4：4进2 5：季军赛 6：冠军赛
	uint8			group;			// 分组
	King1v1Rank		attacker;		// 进攻方
	King1v1Rank		defender;		// 防守方
	uint32			start_time;		// 开战时间
	uint32			end_time;		// 结束时间
	uint8			result;			// 结果 1胜 2败
	uint32			num1;			// 结果1支持人数
	uint32			num2;			// 结果2支持人数
};

// 对战记录
struct King1v1Record
{
	King1v1Rank		attacker;		// 进攻方
	King1v1Rank		defender;		// 防守方
	uint8			result;			// 结果 1胜 2败
	uint32			end_time;		// 结束时间
};

// 竞猜信息
struct King1v1Bet
{
	uint64					fight_id;	// 轮次id
	uint8					result;		// 结果
	uint8					state;		// 领取状态 0未领取 1已领取
};

// 请求活动信息
struct U2GS_GetKing1v1UI ->
{
};
struct GS2U_GetKing1v1UIRet <-
{
	uint8					state;			// 活动状态
	uint32					start_time;		// 赛季开始时间
	uint32					next_time;		// 下一阶段时间
	uint32					end_time;		// 赛季结束时间
	uint8					is_active;		// 是否活跃 0：沉寂 1：活跃
	uint32					day_buy_times;	// 今日增加的次数
	uint32					day_fight_times;// 今日参与次数
	uint32					buy_times;		// 增加的次数
	uint32					score;			// 积分
	uint8					grade;			// 段位
	uint32					rank;			// 排名
	uint32					rank_per;		// 超过百分之多少
	uint32					season_fight_times;	// 赛季参与次数
	uint32					season_win_times;	// 赛季胜利次数
	uint32					bet_times;		// 竞猜次数
	uint32					challenge_times;// 挑战次数
	vector<King1v1Player>	tops;			// 所有玩家的前三名
	vector<King1v1Rank>		king_tops;		// 巅峰赛前三名
	vector<uint32>			award_tasks_nm;	// 完成的普通任务列表
	vector<King1v1Bet>		bet_info;		// 竞猜信息
	vector<King1v1Round>	rounds;			// 轮次信息
	vector<uint32>			award_tasks_bp;	// 完成的战令任务列表
	uint32					bp_season_fight_times;	// 赛季参与修正次数
	uint32					cluster_stage;	// 联服阶段
	uint32					bp_times_fix;	// bp次数修正倍率
	uint32					bp_score_fix;	// bp积分修正倍率
	vector<uint32>			server_list;	// 服务器列表
};

// 实时同步轮次结果
struct GS2U_sync_1v1_rounds_result <-
{
	uint64			fight_id;		// 轮次id
	uint8			result;			// 结果 1胜 2败
};


// 玩家信息同步
struct GS2U_King1v1PlayerInfoSync <-
{
	uint32					day_buy_times;	// 今日增加的次数
	uint32					day_fight_times;// 今日参与次数
	uint32					buy_times;		// 增加的次数
	uint32					challenge_times;// 挑战次数
	uint32					score;			// 积分
	uint8					grade;			// 段位
	uint32					season_fight_times;	// 赛季参与次数
	uint32					season_win_times;	// 赛季胜利次数
	vector<uint32>			award_tasks_nm;	// 完成的普通任务列表
	vector<uint32>			award_tasks_bp;	// 完成的战令任务列表
	uint32					bp_season_fight_times;	// 赛季参与修正次数
};

// 活动状态推送
struct GS2U_King1v1AcStateSync <-
{
	uint8					state;			// 活动状态
	uint32					next_time;		// 下一阶段时间
	uint32					cluster_stage;	// 联服阶段
	uint32					bp_times_fix;	// bp次数修正倍率
	uint32					bp_score_fix;	// bp积分修正倍率
	vector<uint32>			server_list;	// 服务器列表
};

struct GS2U_King1v1SeasonNumSync <-
{
	uint16                  season_num;     // 赛季数
	uint16                  season_id;      // 赛季id
};

// 匹配
struct U2GS_King1v1Match ->
{
	uint64					target_id;		// 对象id
};
struct GS2U_King1v1MatchRet <-
{
	uint32					err_code;		// 错误码
	uint64					target_id;		// 对象id
	uint64					fight_id;		// 轮次id
	King1v1Rank				attacker;		// 进攻方
	King1v1Rank				defender;		// 防守方
};

// 领取任务奖励
struct U2GS_King1v1TaskAward ->
{
	vector<uint32>			task_id;		// 任务id
};
struct U2GS_King1v1TaskAwardNew ->
{
	vector<uint32>			task_nm;		// 普通任务id
	vector<uint32>			task_bp;		// 战令任务id
};
struct GS2U_King1v1TaskAwardRet <-
{
	uint32					err_code;		// 错误码
	vector<uint32>			task_nm;		// 普通任务id
	vector<uint32>			task_bp;		// 战令任务id
};

// 获取战报
struct U2GS_King1v1GetRecord ->
{
	uint8					type;			// 类型 1常规赛 2巅峰赛
};
struct GS2U_King1v1GetRecordRet <-
{
	uint8					type;			// 类型 1常规赛 2巅峰赛
	vector<King1v1Record>	records;		// 战报
};

// 进入地图
struct U2GS_EnterKing1v1 ->
{
	uint64					fight_id;		// 轮次id 0表示等待地图
};

// 购买次数
struct U2GS_King1v1BuyTimes ->
{
	uint32					buy_times;		// 购买次数
};
struct GS2U_King1v1BuyTimesRet <-
{
	uint32					err_code;		// 错误码
	uint32					buy_times;		// 购买次数
};

// 常规赛日常挑战次数同步
struct GS2U_sync_day_fight_time <-
{
	uint16					day_fight_times;// 今日参与次数
	uint16					left_time;// 增加的次数(剩余)
};

// 竞猜
struct U2GS_King1v1Bet ->
{
	uint64					fight_id;	// 轮次id
	uint8					result;		// 结果
};
struct GS2U_King1v1BetRet <-
{
	uint32					err_code;	// 错误码
	uint64					fight_id;	// 轮次id
	uint8					result;		// 结果
};

// 竞猜领奖
struct U2GS_King1v1BetAward ->
{
	uint64					fight_id;	// 轮次id
};
struct GS2U_King1v1BetAwardRet <-
{
	uint32					err_code;	// 错误码
	uint64					fight_id;	// 轮次id
};

// 对战信息
struct GS2U_King1v1Info <-
{
	uint64					fight_id;	// 轮次id
	uint8					type;		// 类型 1常规赛，2巅峰赛，3挑战赛
	vector<King1v1Rank>		players;	// 对战玩家信息
	uint8					state;		// 对战状态
	uint32					end_time;	// 结束时间
	uint8                   round;      // 第几回合
};

// 防守提示
struct GS2U_King1v1DefNotice <-
{
	uint8					type;			// 类型 1-当天 2-昨天
	uint32					day_def_score;	// 防守积分
};

// 结算
struct GS2U_King1v1SettleAccounts <-
{
	uint8					type;		// 类型 1常规赛，2巅峰赛，3挑战赛
	uint8					round;		// 轮次
	uint8					result;		// 结果 1胜 2败
	King1v1Player			attacker;	// 进攻玩家
	King1v1Player			defender;	// 防守玩家
	vector<uint8>			records;	// 结果记录
	uint64					exp;		// 经验
	vector<CoinInfo>		coinList;	// 货币列表
	vector<itemInfo>		itemList;	// 道具列表
	uint8					isDirect;	// 是否直接结算(轮空之类的)
	uint8					isFinal;	// 是否最后一场
	uint32					next_time;	// 下一场时间
};

struct role_pos
{
	uint64 role_id;
	uint8 type; // 1进攻 2 防守
	uint8 pos;
};

// 站位设置
struct U2GS_set_role_pos ->
{
	uint8 type; // 1竞技场 2 1v1
	vector<role_pos> info_list; // 站位列表
};

// 请求站位信息
struct U2GS_get_role_pos ->
{
	uint8 type;
};

// 推送站位信息
struct GS2U_push_role_pos <-
{
	uint8 type;
	vector<role_pos> info_list; // 站位列表
};

// ======================== 新王者1v1 end ========================

// ========================= 跨服排卖 =========================
// 商品
struct cluster_auction_goods
{
    uint64  goods_id;       // 商品Id
    uint32  item_id;        // 物品配置Id
    uint8   item_chara;   	// 物品品质
	uint8   item_star;   	// 物品星级
    uint16  item_amount;    // 物品数量
    uint32  start_time;     // 开始时间
    uint32  finish_time;    // 结束时间
	uint8	price_type;		// 货币类型
    uint32  bid_price;      // 竞价当前出价总价
    uint32  bid_price_add;  // 竞价加价总价
    uint32  bid_price_buy;  // 竞价一口价总价
    uint8   bid_state;      // 竞价状态：0-无人出价，1-竞价中，2-你的出价最高，3-你的出价被超过，4-已售出
	uint8	can_buy;		// 是否可购买（0不可购买 1可购买）
    uint32  open_action;    // 功能编号（功能开启Id）
};

// 请求商品列表
struct U2GS_cluster_auction_goods_list ->
{
	uint32			open_action;	// 功能编号
};
struct GS2U_cluster_auction_goods_list <-
{
    uint32          error;          // 错误码，为0时后面值才有效
	uint32			open_action;	// 功能编号
    vector<cluster_auction_goods>   goods_list; // 商品列表
};

// 推送商品开始拍卖
struct GS2U_cluster_auction_goods_start_notice <-
{
    uint32  open_action;    // 功能编号（功能开启Id）
};

// 推送商品结束拍卖
struct GS2U_cluster_auction_goods_end_notice <-
{
    uint32  open_action;    // 功能编号（功能开启Id）
};

// 推送商品更新
struct GS2U_cluster_auction_goods_update_notice <-
{
    uint64  goods_id;       // 商品Id
    uint32  bid_price;      // 竞价当前出价
    uint8   bid_state;      // 竞价状态：0-无人出价，1-竞价中，2-你的出价最高，3-你的出价被超过
};

// 推送商品移除
struct GS2U_cluster_auction_goods_remove_notice <-
{
    uint64	goods_id;       // 商品Id
};

// 请求竞价商品
struct U2GS_cluster_auction_goods_bid ->
{
    uint64  goods_id;   // 商品Id
    uint32  price;      // 我的出价
};
struct GS2U_cluster_auction_goods_bid <-
{
    uint32  error;      // 错误码
};

// 请求一口价购买商品
struct U2GS_cluster_auction_goods_buy ->
{
    uint64  goods_id;   // 商品Id
};
struct GS2U_cluster_auction_goods_buy <-
{
    uint32  error;      // 错误码
};

// 查看分红
struct U2GS_cluster_auction_bonus ->
{
    uint32	open_action;	// 功能编号
};
struct GS2U_cluster_auction_bonus <-
{
	uint32	open_action;	// 功能编号
	uint8	is_join;		// 是否参与
    vector<key_value>	total;		// 总数  key 货币id value 数量
	vector<key_value>	bonus;		// 分红  key 货币id value 数量
};

// ======================= 跨服排卖 end =======================

// ========================= 奖杯 ========================
// 奖杯数据
struct cup
{
	uint32	cup_id;		// 奖杯ID
	uint8  	chara;		// 品质等级
	uint16  char_exp;	// 品质经验
	uint8	stage;		// 段位
	uint16	lv;			// 等级
	uint16	exp;		// 经验
	uint8	stamp; 		// 已激活的最大印记编号
};
struct GS2U_cup_update <-
{
	uint8 is_online_sync; // 是否为上线同步 1 上线同步 0 非上线同步
	vector<cup> cup_list;  // 奖杯列表
};
// 请求奖杯的星级数据
struct U2GS_cup_star_info ->
{
}
//返回奖杯的星级数据列表
struct GS2U_cup_star_info_ret <-
{
	vector<key_value>	 star_list;		//奖杯的星级数据列表 [奖杯id,星级]
}

// 奖杯升级/升品/升星
struct U2GS_cup_level_up_req ->
{
	uint32	cup_id;			// 奖杯ID
	uint8 	type; 			// 1 升级 2升品 3升星
	vector<CostList>  costs;	// 消耗列表
};
struct GS2U_cup_level_up_ret <-
{
	uint32	cup_id;			// 奖杯ID
	uint8 	type; 			// 1 升级 2升品 3升星
	bool 	is_stage_up;	// 是否升级/升阶/升星
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 激活印记
struct U2GS_cup_active_stamp_req ->
{
	uint32	cup_id;			// 奖杯ID
};
struct GS2U_cup_active_stamp_ret <-
{
	uint32	cup_id;			// 奖杯ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

// 奖杯装配
struct U2GS_cup_equip_req ->
{
	uint32	cup_id;			// 奖杯ID
};
struct GS2U_cup_equip_ret <-
{
	uint32	cup_id;			// 奖杯ID
	uint32	err_code;			// 0-成功，非0-错误原因
};

struct GS2U_update_cup_equip <-
{
	uint32	cup_id;			// 奖杯ID
};
// ======================= 奖杯 end =======================
// ================================= 龙神试炼 start =================================
// 试炼信息
struct dg_trail
{
    uint16               id;             // 试炼id
    vector<key_value>   task_list;      // 任务列表 key 任务id value 进度
    vector<uint8>       received_list;  // 已领奖励列表
};
// 玩家试炼数据
struct GS2U_dragon_god_trail_info <-
{
    vector<dg_trail> trail_list;    // 试炼列表
};

// 任务进度更新
struct dg_trail_task
{
	uint8		        trail_id;	        // 试炼id
    vector<key_value>   task_list;      // 任务列表 key 任务id value 进度
};
// 试炼任务进度更新，更新的试炼id，更新的任务id 新的进度
struct GS2U_dragon_god_trail_task_update <-
{
    vector<dg_trail_task> trail_list;
};
// %%%%%%%CFG%%%%%

// 试炼基础配置
struct dg_trail_cfg_base
{
    uint16     id;             // 试炼基础
    string     name;           // 试炼名称
    uint32     openDate;       // 试炼开始时间
    uint32     durationDays;   // 试炼持续时间
    uint16     calss_type;          // 类型
    vector<uint16>     recommend;      // 跳转
    vector<uint32>     type;           // 任务列表
    vector<key_3value>     rewardCond;       // 排名奖励 奖励id 排名1 排名2 最低积分
    vector<key_value>     rewardCondBase;       // 达成奖励  key 奖励id value 积分
    string      rewardBaseText; // 达成奖励描述
    vector<uint32>  rewardShow;    // 奖励预览
    pb_uint32      moduleTitle;        // 称号
    string      icon;				// 阶段对应icon
    string      selectIcon;         // 当前活动选中Icon
};

// 试炼类型配置
struct dg_trail_cfg_type
{
    uint32     id;             // 任务id
    pb_uint16     type;           // 任务类型
    pb_uint16     num1;           // 参数1
    pb_uint16     num2;           // 参数2
    pb_uint16     num3;           // 积分
    pb_uint32     num4;           // 任务积分上限
    pb_uint32     num5;           // 总排行积分上限
    string     typeDoc;        // 条件描述
    string     typeDoc2;       // 条件描述2
    uint16     jump1;          // 普通跳转
    uint16     jump2;          // 连服跳转
    pb_uint16     group_id;       // 类型分组
    string     photo;             // 枚举对应功能图标
};

// 试炼道具
struct dg_trail_item
{
	pb_uint16		type;       // 类型1：道具，类型ID为道具ID 类型2：货币，类型ID为货币ID
	pb_uint64		item_id;	// 类型ID
	uint8		bind;		// 掉落是否绑定：0为非绑 1为绑定（货币没有绑定或非绑的说法）
	uint16		num;		// 奖励道具的数量
};
// 试炼装备
struct dg_trail_eq
{
	uint16		eq_id;          // 类型1：道具，类型ID为道具ID 类型2：货币，类型ID为货币ID
	pb_uint64		quality;        // 品质
	uint8		star;		    // 装备星级
	uint8		bind;		    // 是否绑定：0为非绑 1为绑定
};

// 试炼奖励配置
struct dg_trail_cfg_award
{
    pb_uint16                  id;                 // 试炼id
    uint8                   order;              // 奖励id
    vector<dg_trail_item>   items;              // 奖励道具
    vector<dg_trail_eq>     eqs;                // 奖励装备
};

// 分组配置
struct dg_trail_cfg_group
{
    pb_uint16                  id;                 // 分组id
    vector<uint16>          condition;          // 分组列列表
    pb_uint16                  number;          // 累计次数
};

// 试炼配置信息
struct GS2U_dragon_god_trail_cfg <-
{
    vector<dg_trail_cfg_base>   base_list;       // 基础列表
    vector<dg_trail_cfg_type>   type_list;       // 类型列表
    vector<dg_trail_cfg_award>  award_list;      // 奖励列表
    vector<dg_trail_cfg_group>  group_list;      // 分组列表
};

// 领取达成奖励
struct U2GS_dragon_god_trail_receive_award ->
{
    uint16     trail_id;            // 试炼id
    uint8      order;              // 奖励id
};

// 领取达成奖励返回
struct GS2U_dragon_god_trail_receive_award_ret <-
{
    uint16     trail_id;            // 试炼id
    uint8      order;              // 奖励id
    uint32     err_code;            // 错误码
};

// 试炼开启推送
struct GS2U_dragon_god_trail_open <-
{
    vector<uint16>    open_list;            // 开启试炼id列表
};

// 获取排行
struct U2GS_dragon_god_trail_get_rank_list ->
{
};
// 玩家信息
struct dg_trail_player
{
    uint64              player_id;      // 玩家id
    string              name;           // 玩家名称
    uint8               sex;            // 性别
    uint16              career;         // 职业
    uint32 	            headID;         // 16、头像ID
	uint32 	            frame;	        // 头像框ID
    string              guild_name;     // 战盟名称
    uint32              point;          // 积分
};
struct dg_trail_rank
{
    uint16                     trail_id;    // 试炼id
    vector<dg_trail_player>    rank;        // 排行
};
// 获取排行返回
struct GS2U_dragon_god_trail_get_rank_list_ret <-
{
    vector<dg_trail_rank>    rank_list;             // 排行列表
    uint32                   err_code;            // 错误码
};

// ================================= 龙神试炼 end =================================
// ================================= 荣耀献礼 start =================================
// 荣耀献礼返回
struct promotion_present_gift 
{
    uint8      				num;             			// 进度顺序
    string      			text;						// 描述
	vector<indexTypeItem>	item_list;					// 奖励列表
	key_value				coin_type;					// 货币价格: key-货币ID,value-数量
	string					direct_purchase;			// 直购价格
	uint32					discount;					// 折扣(万分比)
	key_value				model_show;					// 礼包模型配置：key-ID,value-缩放比例
};
struct GS2U_promotion_present_gift_ret <-
{
    uint32      id;             				// 活动入口ID
    uint32      err;             				// 错误码
    vector<promotion_present_gift> info_list;	// 信息列表
    vector<uint8>       buy_list;      			// 购买列表
};

// 购买荣耀献礼
struct U2GS_promotion_present_gift_buy ->
{
    uint32      id;             				// 活动入口ID
    uint16      num;             				// 进度顺序
};
struct GS2U_promotion_present_gift_buy_ret <-
{
    uint32      id;             				// 活动入口ID
    uint16      num;             				// 进度顺序
    uint32      err;             				// 错误码
};
// ================================= 荣耀献礼 end =================================
// ================================= 新每日累充 start ===============================
struct DrAwardStc
{
	pb_uint32 id;                        // 达成id
	key_2value condition;			  // 条件，参数1，参数2
	vector<indexTypeItem> item_list;  // 奖励
	uint8 vip;                         // VIP限制
};

struct DailyRechargeStc
{
	uint8 type;							// 类型 1 每日重置 2 累计天数
	uint8 type_group;					// 分组

	pb_uint32 world_lv;					// 世界等级
	pb_uint32 order;						// 序号
	pb_uint32 round_id;					// 轮换id

	vector<DrAwardStc> cond_award_list; // 奖励
	uint32 end_time;                    // 结束时间
	string image;                       // 背景图
};

struct DailyRechargeReachStc
{
	uint8 type;						// 类型 1 每日重置 2 累计天数
	uint8 type_group;				// 分组
    vector<key_value> reach_list;   //  key 1.累计登陆天数 2.累计充值金额 3.累计充值天数
    vector<uint32> finish_id_list;  //  已领取的达成id列表
};

struct GS2U_daily_recharge_info <-
{
    vector<DailyRechargeStc> info_list;
};

struct GS2U_daily_recharge_condtion_reach <-
{
    vector<DailyRechargeReachStc> reach_list;
};

struct U2GS_daily_recharge_award ->
{
	uint8 type;							// 类型 1 每日重置 2 累计天数
	uint8 type_group;					// 分组
	uint32 id;                          // 达成id
};

struct GS2U_daily_recharge_award_ret <-
{
	uint8 type;							// 类型 1 每日重置 2 累计天数
	uint8 type_group;					// 分组
	uint32 id;                          // 达成id
	uint32 error_code;
};

struct U2GS_one_key_daily_recharge_award ->
{
	uint8 type;							// 类型 1 每日重置 2 累计天数
	uint8 type_group;					// 分组
};

struct GS2U_one_key_daily_recharge_award_ret <-
{
	uint8 type;							// 类型 1 每日重置 2 累计天数
	uint8 type_group;					// 分组
	uint32 error_code;
};

// ================================= 新每日累充 end =================================
// ================================= 觉醒狂欢 start =================================
struct glory_carnival_task
{
	uint8						oder2;					// 小标签
	string						name;					// 小标签名字
	vector<conditionClass>		condition_list;			// 条件达成列表
};
struct glory_carnival 
{
    uint8      					oder;             			// 大标签活动ID
    string      				name;						// 大标签名称
	uint32						start_time;					// 开始时间戳
	uint32						end_time;					// 结束的时间戳
	vector<glory_carnival_task>	task_list;					// 本轮任务列表
	vector<uint16>				score_list;					// 狂欢奖励所需积分列表
	vector<indexTypeItem>		item_list;					// 狂欢大奖列表
	uint32						image;						// 大标签底板资源
};
struct glory_carnival_get 
{
    uint8      	oder1;           // 大标签活动ID
    uint16      oder2;       	// 小标签活动ID
    uint16     	oder3;       	// 序号ID
	uint8		num;			// 领取次数				
};

// 觉醒狂欢返回
struct GS2U_glory_carnival_ret <-
{
    uint32      id;             				// 活动入口ID
    uint32      err;             				// 错误码
    vector<glory_carnival> 		info_list;		// 信息列表
	vector<achieveCondition>	achieve_list;	// 当前条件达成值
	vector<key_value>			score_list;		// 已经领取积分奖励列表：key-大标签活动ID, value-积分奖序号
	vector<glory_carnival_get>	get_list;		// 已经领取列表
};

// 觉醒狂欢领取
struct U2GS_glory_carnival_award ->
{
	uint32		id;					// 活动入口ID
	uint32		oder;				// 活动项
	uint16		oder2;				// 小标签：小标签为0则说明是积分大奖
	uint16		oder3;				// 序号
};

// 觉醒狂欢领取返回
struct GS2U_glory_carnival_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		oder;				// 活动项
	uint16		oder2;				// 小标签：小标签为0则说明是积分大奖
	vector<uint16>		oder3;				// 领取的序号列表
	uint16		score;				// 获得积分
	uint32      err;                // 错误码
};
// ================================= 觉醒狂欢 end =================================
// ================================= 无尽宝藏 start =================================
struct promotion_treasure_task
{
	uint8					day;				// 天数
	vector<conditionClass>	condition_list;		// 条件达成列表
};
struct item_info_param8
{
	uint16	index1;			// 库ID
	uint16	index2;			// 物品编号
	uint32	type;			// 类型
	uint32	id;				// ID
	uint32	num;			// 数量
	uint32	bind;			// 绑定
	uint32	quality;		// 品质
	uint32	star;			// 星级
};
// 无尽宝藏宝库
struct promotion_treasure_store
{
	uint8					index;					// 序号
	string					name;					// 名称
	vector<consWay>			cons_list;				// 抽奖消耗方式		
	vector<item_info_param8>	show_item;			// 大奖展示
	vector<item_info_param8>	item_list;			// 奖励库
	vector<uint8>				list;				// 宝库调用的格子位置
};

struct promotion_treasure 
{
	vector<promotion_treasure_task>			task_list;					// 任务列表
	vector<promotion_treasure_store>		store_list;					// 宝库列表
};

struct promotion_treasure_player 
{
	uint8				id;					// 宝库顺序
	bool				is_get_big_award;	// 是否获得大奖
	vector<key_2value>	open_award_list;	// 已开启列表：key-位置,value1-库编号,value2-物品编号
};

// 无尽宝藏返回
struct GS2U_promotion_treasure_ret <-
{
    uint32      id;             						// 活动入口ID
    uint32      err;             						// 错误码
    promotion_treasure					info;			// 信息列表
	vector<achieveCondition>			achieve_list;	// 当前条件达成值
	vector<key_2value>					get_list;		// 已经领取的任务列表：key-day, value1 - 序号, value2 - num
	vector<promotion_treasure_player>	get_award_list;	// 已经开启的宝库列表
};

// 无尽宝藏领取
struct U2GS_promotion_treasure_award ->
{
	uint32		id;					// 活动入口ID
	uint32		type;				// 开启类别：1-完成任务,2-开启宝藏
	uint16		index1;				// 1 - 天数, 2 - 宝藏ID
	uint16		index2;				// 1 - 任务数, 2 - 宝藏孔位
};

// 无尽宝藏领取返回
struct GS2U_promotion_treasure_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		type;				// 开启类别：1-完成任务,2-开启宝藏
	uint16		index1;				// 1 - 天数, 2 - 宝藏ID
	uint16		index2;				// 1 - 任务数, 2 - 宝藏孔位
	key_value	award;				// 2 - 获得的奖励：key-库ID,value-物品编号 
	uint32      err;                // 错误码
};
// ================================= 无尽宝藏 end =================================
// ================================= 新限时特惠 start ===============================
struct uiTypeParameter
{
	uint32 id;

	float x_shift;   // x偏移
	float y_shift;
	float z_shift;

	float x_rotation; // x旋转
	float y_rotation;
	float z_rotation;

	float zoom; // 缩放
};

struct pushSalesStc
{
	uint16 id;                      // 活动id
	uint16 order;					// 序号
	uint8  effects;                 // 入口特效
	string base_map;				// 底图
	uint8 ui_type;					// ui模板类型
	vector<uiTypeParameter> ui_param; // ui模板参数
	vector<uiTypeParameter> list_ui_param; // ui模板参数
	vector<uiTypeParameter> show_ui_param; // ui模板参数
	string entrance_icon;			// 界面入口图标
	string title;					// 标签名
	string des;						// 礼包名
	string slogan;                  // banner文字
	string slogan_1;                // banner副文字
	uint16 priority_group;          // 分组优先级
	key_value curr_type;			// 货币价格
	string direct_purchase_code;	// 直购价格
	vector<key_value> discount;				// 折扣
	vector<indexTypeItem> award_list;		// 奖励
	uint16 buy_num;					// 购买上限数量
	uint16 has_buy_num;				// 已购买数量
	uint8  push_type;               // 主动弹出类型
	uint8  time_limit_type;         // 时限类型 1-服务器时间 2-客户端时间
	uint32 end_time;				// 结束时间 当时限类型为1时为结束时间戳，为2时为剩余分钟数
	uint32 shop_id;
	uint8  is_platform;             // 是否来自GM后台
};

// 已开启的限时特惠列表
struct GS2U_time_limit_gift_info <-
{
	vector<pushSalesStc> list;
};

// 限时特惠弹窗
struct GS2U_time_limit_gift_push <-
{
	vector<pushSalesStc> info;
};

// 购买
struct U2GS_time_limit_gift_buy ->
{
	uint16 id;                      // 活动id
	uint16 order;					// 序号
};

// 购买返回
struct GS2U_time_limit_gift_buy_ret <-
{
	uint16 id;                      // 活动id
	uint16 order;					// 序号
	uint32 error_code;
};

// 客户端倒计时，收到后每次减少1分钟
struct U2GS_time_limit_gift_client_tick ->
{
};
// ================================= 新限时特惠 end =================================
// ================================= Boss首杀 start ===============================
struct bossFirstKillStc
{
	uint32 map_data_id;
	uint32 boss_data_id;
	uint8  type;                                // 玩法类型
	vector<indexTypeItem> single_award_list;	// 击杀者奖励
	vector<indexTypeItem> group_award_list;		// 全服奖励
	uint8 is_important;                         // 是否为重要BOSS
	uint64 killer_id;        				    // 击杀者id
	string killer_name;      					// 击杀者名字
	uint8  is_award;                            // 是否领取
};

struct bossFirstKillAwardStc
{
	uint32 map_data_id;
	uint32 boss_data_id;
	uint64 killer_id;        // 击杀者id
	string killer_name;      // 击杀者名字
};

// BOSS首杀类返回
struct GS2U_boss_first_kill_ret <-
{
	uint32		id;									// 活动入口ID
	uint32      err;               				    // 错误码
	vector<bossFirstKillStc> boss_kill_list;	    // 列表
};

// 领取奖励
struct U2GS_boss_first_kill_award ->
{
	uint16 id;                      // 活动id
	uint16 type;					// 玩法类型
};

// 领取奖励返回
struct GS2U_boss_first_kill_award_ret <-
{
	uint16 id;                      // 活动id
	uint16 type;					// 玩法类型
	vector<bossFirstKillAwardStc> get_list;	    // 领取列表
	uint32 error_code;
};

// ================================= Boss首杀 end =================================
// ============================= 死亡地狱冒泡奖励 start =============================
//冒泡奖励同步
struct GS2U_demon_time_award_info <-
{
	vector<key_2value> info_list;	 // 冒泡奖励列表 {key-MapID,value1-BossID,value2-Time}
}; 

// 领取奖励
struct U2GS_demon_time_award_get ->
{
	key_2value	info;			// 冒泡奖励 {key-MapID,value1-BossID,value2-Time}
	bool		is_get;			// 是否领取
};

// 领取奖励返回
struct GS2U_demon_time_award_get_ret <-
{
	key_2value	info;			// 冒泡奖励 {key-MapID,value1-BossID,value2-Time}
	bool		is_get;
	uint32		error;			// 错误码
};
// ============================== 死亡地狱冒泡奖励 end ==============================

// 福利账号充值
struct GS2U_free_account_money <-
{
    float  money;           // 福利金额
};
struct U2GS_free_account_recharge ->
{
    uint32  fgi;            // 客户端包ID
    uint32  amount;         // 商品对应游戏币数量
    float   price;          // 商品金额
    string  item_id;        // 商品ID
    string  item_code;      // 商品自定义参数
    string  comments;       // 透传参数
    string  currency_type;  // 货币类型
};
struct GS2U_free_account_recharge <-
{
    string  item_id;        // 商品ID
    uint8   result;         // 充值结果：0-充值成功、1-福利额度不足、2-非福利账号
};

// ========================================== 圣物系统 start =============================================
// 圣物
struct relic_info
{
	uint32				relic_id;		        // 圣物id
	uint32				level;                  // 等级
	uint32				grade_lv;		        // 品级
	uint32				awaken_lv;		        // 觉醒
	uint32				awaken_skill;		    // 觉醒技能
	uint32        break_lv;						// 突破等级
};
//圣物幻化
struct relic_illusion_info
{
	uint32				relic_id;		        // 幻化圣物id
	uint16				star_lv;		        // 星级
	uint8				rein_lv;		        // 转生
};

// 圣印
// 圣印信息
struct holy_seal
{
	uint64              role_id; 						//角色ID
	uint16              career_lv;		        // 转数
	vector<pos_value>	equip_list;             // 装配列表
	uint16		        max_index;		        // 最大圣印大师id
};

// 圣物 玩家信息
struct GS2U_relic_player_info <-
{
    vector<key_value>	skill_list;             // 技能装配列表 [{部位, 圣物ID}]
    vector<relic_info>	relic_list;             // 圣物列表
    vector<holy_seal>	holy_seal_info;             // 圣印列表

};

// 升级 激活
struct U2GS_relic_up_level ->
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
};

struct GS2U_relic_up_level_ret <-
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
    uint32              err_code                // 错误码
};
// 更新等级
struct GS2U_relic_update_level <-
{
    uint32              relic_id;		        // 圣物id
    uint32              level;                  // 等级
};

// 升品
struct U2GS_relic_up_grade_lv ->
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
};

struct GS2U_relic_up_grade_lv_ret <-
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
    uint32              err_code                // 错误码
};
// 更新品级
struct GS2U_relic_update_grade_lv <-
{
    uint32              relic_id;		        // 圣物id
    uint32              level;                  // 品级
};

// 觉醒
struct U2GS_relic_up_awaken_lv ->
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
};
struct GS2U_relic_up_awaken_lv_ret <-
{
    uint32              relic_id;		        // 圣物id
    uint32              add_level;              // 增加的等级
    uint32              err_code                // 错误码
};
// 更新觉醒等级
struct GS2U_relic_update_awaken_lv <-
{
    uint32              relic_id;		        // 圣物id
    uint32              level;                  // 觉醒等级
};

// 觉醒技能选择
struct U2GS_relic_set_awaken_skill ->
{
    uint32              relic_id;		        // 圣物id
    uint32              skill_id;               // 技能id
};

struct GS2U_relic_set_awaken_skill_ret <-
{
    uint32              relic_id;		        // 圣物id
    uint32              skill_id;               // 技能id
    uint32              err_code                // 错误码
};

// 觉醒技能重置
struct U2GS_relic_awaken_skill_reset_req ->
{
    uint32              career;		        // 职业
    uint32              group_id;         // 分组id
};

struct GS2U_relic_awaken_skill_reset_ret <-
{
    uint32              career;		        // 职业
    uint32              group_id;         // 分组id
    vector<uint32>      relic_id_list;		// 重置的圣物id列表
    uint32              err_code          // 错误码
};

// 突破
struct U2GS_relic_break ->
{
    uint32              relic_id;		        // 圣物id
};

struct GS2U_relic_break_ret <-
{
    uint32              relic_id;		        // 圣物id
    uint32              err_code                // 错误码
};
// 更新突破等级
struct GS2U_relic_update_break_level <-
{
    uint32              relic_id;		        // 圣物id
    uint32              break_level;                  // 突破等级
};

// 圣印装配
struct U2GS_relic_holy_seal_equip ->
{
		uint64              role_id; 						//角色ID
    uint16              career_lv;		        // 转数
    uint8               index;                  // 装配位置索引
    uint64              item_id;                // 道具实例id
};
struct GS2U_relic_holy_seal_equip_ret <-
{
		uint64              role_id; 						//角色ID
    uint16              career_lv;		        // 转数
    uint8               index;                  // 装配位置索引
    uint64              item_id;                // 道具实例id
    uint32              err_code                // 错误码
};

struct HolySealIndex
{
  uint8               index;                  // 装配位置索引
  uint64              item_id;                // 道具实例id
}

// 圣印一键装卸
struct U2GS_relic_holy_seal_one_key_equip ->
{
		uint64              role_id; 						//角色ID
		uint16              career_lv;		        // 转数
		uint8               is_equip;           // 0 卸下 1装配
		vector<HolySealIndex>  holy_seal_list;  // 圣印列表
};
struct GS2U_relic_holy_seal_one_key_equip_ret <-
{
		uint64              role_id; 						//角色ID
		uint16              career_lv;		        // 转数
		uint8               is_equip;           // 0 卸下 1装配
	  vector<HolySealIndex>  holy_seal_list;  // 圣印列表
    uint32              err_code                // 错误码
};

// 更新圣印装配信息
struct GS2U_relic_update_holy_seal_equip <-
{
		uint64              role_id; 						//角色ID
    uint16              career_lv;		        // 转数
    uint8               index;                  // 装配位置索引
    uint64              item_id;                // 道具实例id
};

// 圣印升级
struct U2GS_relic_holy_seal_up_level ->
{
    uint64              holy_seal_id;            // 圣印实例id
    vector<key_value> 	cost_list; // 消耗列表 [{ItemID, Num}] 
};
struct GS2U_relic_holy_seal_up_level_ret <-
{
    uint64              holy_seal_id;            // 圣印实例id
    vector<key_value> 	cost_list; // 消耗列表 [{ItemID, Num}]
    uint32              err_code;                // 错误码
};

// 圣印大师点亮
struct U2GS_relic_holy_seal_add_honor ->
{
		uint64              role_id; 						//角色ID
    uint16              career_lv;		        // 转数
};
struct GS2U_relic_holy_seal_equip_add_honor_ret <-
{
		uint64              role_id; 						//角色ID
    uint16              career_lv;		        // 转数
    uint16		        max_index;		        // 最大圣印大师id
    uint32              err_code                // 错误码
};

// 装配技能
struct U2GS_relic_holy_equip_skill_req ->
{
		uint8              pos; 						// 部位
    uint32              relic_id;		        // 圣物ID
};
struct GS2U_relic_holy_equip_skill_ret <-
{
		uint8              pos; 						// 部位
    uint32              relic_id;		        // 圣物ID
    uint32              err_code                // 错误码
};

// 更新技能装配列表
struct GS2U_relic_update_skill_list <-
{
  vector<key_value>	skill_list;             // 技能装配列表 [{部位, 圣物ID}]
};

//圣物幻化
// 圣物幻化 玩家信息
struct GS2U_relic_illusion_player_info <-
{
	uint32		relic_eq;					//装配的幻化圣物id  0 未装配  
    vector<relic_illusion_info>	relic_illusion_list; // 圣物幻化列表
};

//圣物幻化 激活 升级
struct U2GS_relic_illusion_up_level ->
{
	uint32              relic_id;		        // 幻化圣物id
    uint8              add_level;              // 增加的幻化等级
};

struct GS2U_relic_illusion_up_level_ret <-
{
    uint32              relic_id;		        // 幻化圣物id
    uint8              add_level;              // 增加的幻化等级
    uint32              err_code;                // 错误码
};

//圣物幻化 转生
struct U2GS_relic_illusion_rein ->
{
	uint32              relic_id;		        // 转生的幻化圣物id
};

struct GS2U_relic_illusion_rein_ret <-
{
	uint32              relic_id;		        // 转生的幻化圣物id
	uint32              err_code;                // 错误码
};

//圣物幻化 装配圣物
struct U2GS_relic_illusion_eq ->
{
	uint32              relic_id;		        // 幻化圣物id
	uint8				type;					// 操作 1:装备 2:卸下
};

struct GS2U_relic_illusion_eq_ret <-
{
	uint32              relic_id;		        // 幻化圣物id
	uint8				type;					// 操作 1:装备 2:卸下
	uint32              err_code;                // 错误码
};
// ========================================== 圣物系统 end =============================================

// ============================= 月订阅(月卡) start =============================
// 月卡 每日免费礼包
struct U2GS_MouthSubscribeDailyGiftReq ->
{
};
struct GS2U_MouthSubscribeDailyGiftRet <-
{
        uint32  error;                // 错误码
};
// ============================= 月订阅(月卡) end =============================


// =================================== 等级封印 ===================================
// 预告信息同步
struct GS2U_LevelSealSync <-
{
	uint8		id;					// 封印ID
	uint8		state;				// 状态
	uint64		player_id;			// 玩家id
	string		player_name;		// 玩家名
	uint8		player_sex;			// 玩家性别
	uint8		is_award;			// 是否已领取奖励
	uint32		open_time;			// 开启时间
	uint32		release_time;		// 解封时间
};

// 获取等级封印ui
struct U2GS_GetLevelSealUI ->
{
};
struct GS2U_GetLevelSealUIRet <-
{
	uint8		id;					// 封印ID
	uint8		state;				// 状态
	uint32		open_time;			// 开启时间
	uint32		release_time;		// 解封时间
	uint64		player_id;			// 玩家id
	string		player_name;		// 玩家名
	uint8		player_sex;			// 玩家性别
	roleModel	leader_role;		// 玩家领队角色
	uint32		level_num;			// 等级符合条件的人数
	uint32		my_break_level;		// 等级封印突破时玩家的等级(封印突破时写入)
	uint8		is_award;			// 是否已领取奖励
};

// 领取奖励
struct U2GS_LevelSealGetReward ->
{
};
struct GS2U_LevelSealGetRewardRet <-
{
	uint32		err_code;			// 错误码
};

// 获取等级封印玩家信息
struct U2GS_GetLevelSealPlayerInfo ->
{
};
struct GS2U_GetLevelSealPlayerInfoRet <-
{
	uint32		id;						// 封印ID
	uint32		power;					// 体力值
	vector<key_2value>	challenge_area;	// 目前所在地区
	vector<key_2value>	open_area;		// 已经完成挑战的地区
	vector<key_2value>	shop;			// 商店信息 key - type, value1 - 商品ID, value2 - 已购买次数
};

// 进入封印副本
struct U2GS_EnterLevelSealDungeon ->
{
	uint8		id;					// 封印id
	uint8		type;				// 类型 1-高级本，2-低级本
	uint8		x;					
	uint8		y;
};
struct GS2U_EnterLevelSealDungeonRet ->
{
	uint8		id;					// 封印id
	uint8		type;				// 类型 1-高级本，2-低级本
	uint8		x;					
	uint8		y;
	uint32		err_code;			// 错误码
};

// 副本内信息同步
struct GS2U_LevelSealDungeonSync <-
{
	uint32		kill_num;			// 杀怪数量
	uint32		cur_num;			// 当前波杀怪数量
	uint64		exp;				// 累计经验
};

// 副本结算
struct GS2U_LevelSealDungeonSettle <-
{
	uint8		is_win;				//0:失败 1:胜利
	uint64		exp;
	uint16		energy;			
	vector<itemInfo>		items;
	vector<CoinInfo>		coins;
	vector<EqInfo>	eqs;
};

// 玩家重置副本地图
struct U2GS_LevelSealResetMap ->
{
	uint8	id;		// 封印ID;
	uint8	type;	// 封印副本类型
};
struct GS2U_LevelSealResetMapRet <-
{
	uint8	id;		// 封印ID;
	uint8	type;	// 封印副本类型
	vector<key_2value>	challenge_area;	// 当前正在挑战的地区
	vector<key_2value>	open_area;		// 已经完成挑战的地区
	uint32		err_code;			// 错误码
};

// 玩家等级封印神秘商店购买商品
struct U2GS_LevelSealShopping ->
{
	uint16	id;			// 封印ID;
	uint16	type;		// 封印副本类型
	uint16	item_num;	// 出售商品序号
};
struct GS2U_LevelSealShoppingRet <-
{
	uint16	id;			// 封印ID;
	uint16	type;		// 封印副本类型
	uint16	item_num;	// 出售商品序号
	uint32		err_code;			// 错误码
};

struct GS2U_LevelSealAddEnergy <-
{
	uint32	item_id;			// 道具ID;
	uint32	use_num;			// 使用数量
	uint32	add_energy;			// 恢复能量数
};


// ================================= 等级封印 end =================================

// ================================= 转盘抽奖 start ===============================
struct wheelRewardItem
{
	uint32	index;				// 特殊编号  
    uint8   tp;    
    uint32  career; 
    uint8   bind;     
    uint32  p1;
    uint32  p2;
    uint8   chara;
    uint8   star;
    uint8   show_vfx;  // 是否转圈特效 0-无  1-有
  
};

struct wheelBaseInfo
{
	vector<int16> times; 			// 转动次数
	vector<key_2value> pro_list;		// 转盘消耗
	vector<key_value> purchase_list;		// 购买道具消耗	
	vector<wheelRewardItem> itemSp_list;	// 特殊物品奖励
	vector<wheelRewardItem> itemCom_list;// 普通物品奖励
	vector<uint32>	sit_list;		// 转盘道具顺序
	string          probability_text;  // 概率公式文字
	vector<wheelRewardItem> show_award_item; // 界面弹出展示
	vector<ModelInfo> model; // 界面弹出展示
	string  advertising_text;  // 广告语
};
struct wheelChangeInfo
{
	uint32		index;				// 奖励序号
	uint8		isServer;			// 是否全服兑换(1:是,0:不是)
	wheelRewardItem item;  //不要使用里面的index
	uint32		integral;			// 所需积分	
	uint16		changeTimes;		// 可兑换次数
	uint16		discount;			// 折扣
};
struct wheelTop
{
	uint32		index;				// 奖励索引
	uint16		startR;				// 排名上限
	uint16		endR;				// 排名下线
	vector<wheelRewardItem> list; 
};
struct wheelItem
{
	uint32		index;				// 特殊编号
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	
	uint8   bind;
	uint8   chara;
	uint8   star;
	
	uint16		times;				// 中的次数
};
struct wheelChange
{
	uint32		index;				// 奖励序号
	uint8		isServer;			// 是否全服兑换(1:是,0:不是)
	uint16		times;				// 兑换次数
};
struct wheeltopRank
{
	uint64		playerID;			// 玩家ID
	string		name;				// 玩家名
	uint32      head_id;			// 头像
	uint32      frame_id;			// 头像框
	uint32		value;				// 排行榜值
	uint32		time;				// 记录时间
};

struct wheel_record
{
	string		player_text;		// 玩家名
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	uint8		chara;				// 品质
	uint8       star;               // 星级
	uint16		times;				// 抽中次数
	uint32      time;               // 时间 
};

struct treasurePercent
{
	uint32		percent;			// 抽中比例
	uint32		num;				// 抽中数量
};

// 聚宝盆记录
struct treasureRecord
{
	uint32		time;		// 时间戳
	string		name;		// 玩家名字
	uint16		rate;		// 奖金占比(万分比)
	uint32		num;		// 抽中数量
};

// 幸运转盘返回
struct GS2U_lucky_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wheelBaseInfo wheel_base_info;
	uint32		convPoint;			// 单次获得兑换积分
	vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	uint32		changeIntegral;		    // 兑换积分
	uint32		itemCount;			    // 物品库存数量
	uint32		luckyPointPer;		// 一次获得的幸运值
	uint32		luckyPointMax;		// 最大幸运值
	uint32		luckyIntegral;		// 当前幸运值
	uint32      luckyOrder;         // 幸运奖编号
	vector<wheelChange> change_list;	// 玩家已兑换次数列表
};

// 排行榜转盘返回
struct GS2U_rank_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wheelBaseInfo wheel_base_info;
	uint32      drawn_times;         // 总抽奖次数
	uint32		convPoint;			// 单次获得兑换积分
	vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	vector<wheelTop> top_award_list;	// 排行榜奖励配置
	vector<key_2value>	show_rank;		// 排行榜奖励预览
	uint32		changeIntegral;		    // 兑换积分
	uint32		itemCount;			// 物品库存数量
	uint32		luckyPointPer;		// 一次获得的幸运值
	uint32		luckyPointMax;		// 最大幸运值
	uint32		luckyIntegral;		// 当前幸运值
	uint32      luckyOrder;         // 幸运奖编号
	uint32		rankBase;			// 进入排行基础次数 0代表没有排行榜
	uint16		rankNum;			// 玩家自己的排名
	vector<wheeltopRank> top_list;	// 玩家排行榜列表
};

// 聚宝盆转盘返回
struct GS2U_treasure_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wheelBaseInfo wheel_base_info;
	uint32      drawn_times;         // 总抽奖次数
	uint32		convPoint;			// 单次获得兑换积分
	vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	vector<wheelTop> top_award_list;	// 排行榜奖励配置
	vector<key_2value>	show_rank;		// 排行榜奖励预览
	uint32		changeIntegral;		    // 兑换积分
	uint32		itemCount;			// 物品库存数量
	uint32		luckyPointPer;		// 一次获得的幸运值
	uint32		luckyPointMax;		// 最大幸运值
	uint32		luckyIntegral;		// 当前幸运值
	uint32      luckyOrder;         // 幸运奖编号
	uint32		rankBase;			// 进入排行基础次数 0代表没有排行榜
	uint16		rankNum;			// 玩家自己的排名
	vector<wheeltopRank> top_list;	// 玩家排行榜列表
	uint32		wealthTime;			// 财神时间
	uint32		salIntegral;		// 聚宝盆数量
};

// 迷宫转盘返回
struct GS2U_maze_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wheelBaseInfo wheel_base_info;
	uint32      drawn_times;         // 总抽奖次数
	uint32		convPoint;			// 单次获得兑换积分
	vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	vector<wheelTop> top_award_list;	// 排行榜奖励配置
	vector<key_2value>	show_rank;		// 排行榜奖励预览
	uint32		changeIntegral;		    // 兑换积分
	uint32		itemCount;			// 物品库存数量
	uint32		luckyPointPer;		// 一次获得的幸运值
	uint32		luckyPointMax;		// 最大幸运值
	uint32		luckyIntegral;		// 当前幸运值
	uint32      luckyOrder;         // 幸运奖编号
	uint32		rankBase;			// 进入排行基础次数 0代表没有排行榜
	uint16		rankNum;			// 玩家自己的排名
	vector<wheeltopRank> top_list;	// 玩家排行榜列表
};

// 矩阵转盘返回
struct GS2U_matrix_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wheelBaseInfo wheel_base_info;
	uint32		convPoint;			// 单次获得兑换积分
	vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
	vector<wheelTop> top_award_list;// 排行榜奖励配置
	vector<key_2value>	show_rank;		// 排行榜奖励预览
	uint32		changeIntegral;		    // 兑换积分
	uint32		itemCount;			// 物品库存数量
	uint32		luckyPointPer;		// 一次获得的幸运值
	uint32		luckyPointMax;		// 最大幸运值
	uint32		luckyIntegral;		// 当前幸运值
	uint32      luckyOrder;         // 幸运奖编号
	uint32		rankBase;			// 进入排行基础次数 0代表没有排行榜
	uint16		rankNum;			// 玩家自己的排名
	vector<wheeltopRank> top_list;	// 玩家排行榜列表
};

// 抽奖请求抽奖记录
struct U2GS_wheelRecordMsgReq ->
{
	uint32		id;					// 活动入口ID
	uint8		isServer;		// 是否是全服信息（1：是，0：不是）
};
// 抽奖记录推送
struct GS2U_wheelRecordMsg <-
{
	uint32					id;				// 活动入口ID
	uint8					isServer;		// 是否是全服信息（1：是，0：不是）
	vector<wheel_record>	sp_list;		// 特殊奖励信息列表
	vector<wheel_record>	com_list;		// 普通奖励信息列表
	vector<wheel_record>	mix_list;		// 混合奖励信息列表
	vector<uint32>			limit_list;		// 记录条数限制
};

// 抽奖
struct U2GS_drawn_wheel ->
{
	uint32		id;					// 活动入口ID
	uint16		times;				// 抽奖次数
};
// 一般用对应类型转盘结果协议返回，当U2GS_drawn_wheel未找到对应转盘用这个返回
struct U2GS_drawn_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
};
// 幸运抽奖返回
struct GS2U_drawn_luck_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	uint32		luckyIntegral;		// 当前幸运积分
};
// 排行榜抽奖返回
struct GS2U_drawn_rank_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	uint32		luckyIntegral;		// 当前幸运积分
};
// 聚宝盆抽奖返回
struct GS2U_drawn_treasure_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	uint32		salIntegral;		// 聚宝盆数量
	vector<treasurePercent> per_list;	// 聚宝盆抽中比例
	uint32		luckyIntegral;		// 当前幸运积分
};
// 迷宫抽奖返回
struct GS2U_drawn_maze_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	uint32		luckyIntegral;		// 当前幸运积分
};

// 矩阵抽奖返回
struct GS2U_drawn_matrix_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		changeIntegral;		// 兑换积分
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	uint32		luckyIntegral;		// 当前幸运积分
};
// 请求转盘物品兑换
struct U2GS_exchange_wheel_item ->
{
	uint32		id;					// 活动入口ID
	uint32		index;				// 奖励序号
	uint16		times;				// 兑换次数
};

struct GS2U_exchange_wheel_item_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint32		index;				// 奖励序号
	uint32		changeIntegral;		// 兑换积分
	vector<wheelChange> change_list;	// 玩家已兑换次数列表
};
// 请求转盘临时背包
struct U2GS_get_wheel_temp_bag_info ->
{
	uint32		id;					// 活动入口ID
};

struct GS2U_get_wheel_temp_bag_info_ret <-
{
	vector<wheelItem> bag_list;	// 临时仓库列表
};
// 取临时背包物品
struct U2GS_get_out_wheel_temp_bag ->
{
	uint32		id;					// 活动入口ID
	uint8		isAll;				// 是否全部提取(1:是 0：不是)

	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	uint8  		bind;
	uint8  		chara;
	uint8  		star;
};
struct GS2U_get_out_wheel_temp_bag_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		itemCount;			// 物品库存数量
	uint8		isAll;				// 是否全部提取 (1:是 0：不是)
	uint8		type;				// 奖励类型
	uint32		param1;				// 参数1
	uint32		param2;				// 参数2
	uint8  		bind;
	uint8  		chara;
	uint8  		star;
};
// 取全部临时背包物品
struct U2GS_get_out_wheel_temp_bag_all ->
{
	vector<uint32>		id_list;					// 活动入口ID
};

struct GS2U_get_out_wheel_temp_bag_all_ret <-
{
	vector<uint32>		id_list;					// 活动入口ID
};

// 请求转盘兑换物品信息
struct U2GS_get_wheel_exchange_info ->
{
	uint32		id;					// 活动入口ID
};
struct GS2U_get_wheel_exchange_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	vector<wheelChange> change_list;	// 玩家已兑换次数列表
};

// 聚宝盆记录信息
struct GS2U_treasure_record_msg <-
{
	uint32		id;					// 活动入口ID
	vector<treasureRecord> record_list;
};

// 请求转盘活动排行榜列表
struct U2GS_get_wheel_top_list ->
{
	uint32		id;					// 活动入口ID
};
struct GS2U_get_wheel_top_list_ret <-
{
	uint32		id;					// 活动入口ID
	uint16		rankNum;			// 玩家自己的排名
	vector<wheeltopRank> top_list;		// 玩家排行榜列表
};


// 购买转盘活动消耗道具
struct U2GS_buy_wheel_consume ->
{
	uint32		id;					// 活动入口ID
	uint16      num;                // 购买数量
};
struct GS2U_buy_wheel_consume_ret <-
{
	uint32		id;					// 活动入口ID
	uint16      num;                // 购买数量
	uint32		err;				// 错误码
};

// 转盘排名更新
struct GS2U_wheel_top_rank_update <-
{
	uint32		id;					// 活动入口ID
	uint8      rank;               // 名次
};

// 转盘排名降低
struct GS2U_wheel_top_rank_down <-
{
	uint32	   id;					// 活动入口ID
	uint8      old_rank;            // 旧名次
	uint8      new_rank;            // 新名次
};

// 转盘抽奖气泡
struct GS2U_wheel_drawn_notice <-
{
	uint32	   id;					// 活动入口ID
	uint32     ref_id;              // 入口标识
	uint32     num;                 // N连抽
};
// ================================= 转盘抽奖 end ===============================

// ------------- 捐赠抽奖 -------------
// 积累条件
struct IndexAwardCond
{
	uint16		index;	// 序号
	uint16    donate_num; 	// 全服累计捐献数
	uint8		type;	// 奖励类型
	uint32		time;	// 持续时间
	uint32		is_notice;	// 达成是否公告
};

// 活动信息
struct donate_roulette
{
	vector<uint32> task_id;    // 任务ID
	vector<consWay>				consWay;		// 消耗
	vector<indexTypeItem>			cons_award_item;	// 抽奖奖励
	vector<IndexAwardCond>		serverCond;		// 全服奖励条件
	vector<indexTypeItem>			serverAward;	// 全服累积奖励
	vector<key_2value>        serverDrop;   // 全服累积奖励-双倍材料掉落
	vector<key_2value>		playerCond;		// 个人累积奖励条件
	vector<indexTypeItem>			playerAward;	// 个人累积奖励
	vector<NewModelInfo>		model;			// 模型
};

// 大奖记录
struct DonateRouletteRecord
{
	string					name;	// 玩家名字
	vector<CoinBaseInfo>	coin;	// 货币
	vector<ItemBaseInfo>	item;	// 物品
	vector<EqBaseInfo>		eq;		// 装备
	uint32					time;	// 时间
};

// 捐赠抽奖返回
struct GS2U_donate_roulette_ret <-
{
  uint32      id;             				// 活动入口ID
  uint32      err;             				// 错误码
  donate_roulette 		info;	// 配置
  uint32      server_donate_sum;					// 全服捐赠总量
  vector<key_value>	server_awards;					// 全服奖励情况[{id, time}]
  uint32      player_donate_sum;					// 个人捐赠总量
  vector<key_value>	player_awards;					// 个人奖励情况[{type, id}] type:1个人 2全服
  uint32		convPoint;			// 单次获得兑换积分
  vector<wheelChangeInfo> changeInfo_list;	// 兑换奖励配置列表
  vector<wheelChange> change_list;	// 玩家已兑换次数列表
  uint32     change_score; // 捐赠积分
};

// 捐赠
struct U2GS_DonateRouletteDonateReq ->
{
	uint32      id;             		// 活动入口ID
	uint32				type;			// 捐赠类型
	uint32				times;			// 捐赠次数
};
struct GS2U_DonateRouletteDonateRet <-
{
	uint32				err_code;		// 错误码
	uint32      id;             		// 活动入口ID
	uint32				type;			// 捐赠类型
	uint32				times;			// 捐赠次数
	uint32        add_times;  // 增加捐赠
};

// 领奖
struct U2GS_DonateRouletteGetReward ->
{
	uint32      id;             				// 活动入口ID
	uint8				type;			// 奖励类型 1个人 2全服
	uint32				index;			// 奖励序号
};
struct GS2U_DonateRouletteGetReward <-
{
	uint32      id;             		// 活动入口ID
	uint8				type;			// 奖励类型 1个人 2全服
	uint32				index;			// 奖励序号
	uint32				err_code;		// 错误码
};

// 请求大奖记录
struct U2GS_GetDonateRouletteRecordReq ->
{
	uint32      id;             				// 活动入口ID
};

// 请求大奖记录返回
struct GS2U_GetDonateRouletteRecordRet <-
{
	uint32      id;             				// 活动入口ID
	vector<DonateRouletteRecord>	record_list;	// 大奖记录
};

// 新增大奖记录
struct GS2U_AddDonateRouletteRecord <-
{
	uint32      id;             				// 活动入口ID
	DonateRouletteRecord	record;		// 大奖记录
};

// 请求捐献抽奖兑换商店物品兑换
struct U2GS_donate_roulette_exchange_item ->
{
	uint32		id;					// 活动入口ID
	uint32		index;				// 奖励序号
	uint16		times;				// 兑换次数
};
struct GS2U_donate_roulette_exchange_item_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint32		index;				// 奖励序号
	vector<wheelChange> change_list;	// 玩家已兑换次数列表
	uint32     change_score; // 捐赠积分
};

// 请求玩家数据
struct U2GS_DonateRoulettePlayerInfoReq ->
{
	uint32      id;             		// 活动入口ID
};
struct GS2U_DonateRoulettePlayerInfoRet <-
{
	uint32				err_code;		// 错误码
	uint32      id;             		// 活动入口ID
	uint32      server_donate_sum;					// 全服捐赠总量
  vector<key_value>	server_awards;					// 全服奖励情况[{id, time}]
  uint32      player_donate_sum;					// 个人捐赠总量
  vector<key_value>	player_awards;					// 个人奖励情况[{type, id}] type:1个人 2全服
  uint32     change_score; // 捐赠积分
};
// ----------- 捐赠抽奖 end -----------

// ----------- 时装 ---------------
struct Fashion
{
	uint32 fashion_id; // 时装ID
	uint8  color1;			 // 颜色1
	uint8  color2;			 // 颜色2
	uint8  star;       // 星数
	uint32  expire_time;	// 过期时间，0为永久
};

struct FashionRole
{
	uint64 role_id; 		// 角色ID
	uint32 weapon;  		// 武器部位时装ID
	uint32 head;  			// 头部部位时装ID
	uint32 body;  			// 身体部位时装ID
	uint32 ornament;  	// 饰品部位时装ID
	uint32 suit;				// 整套部位时装ID
}

// 同步玩家
struct GS2U_fashion_player <-
{
	uint32 wardrobe_lv; 	// 衣橱等级
	uint32 wardrobe_exp;	// 衣橱经验
	vector<Fashion> fashion_list; // 时装列表
	vector<FashionRole> fashion_role_list; // 时装装备列表
};

// 同步角色时装
struct GS2U_update_fashion_role <-
{
	vector<FashionRole> fashion_role_list; // 时装装备列表
};

// 更新时装实例
struct GS2U_update_fashion <-
{
	vector<Fashion> fashion_list; // 时装实例列表
};

// 激活时装
struct U2GS_dress_up_active_fashion_req ->
{
	uint32      fashion_id;        // 时装ID
};
struct GS2U_dress_up_active_fashion_ret <-
{
	uint32      fashion_id;        // 时装ID
	uint32				err_code;		// 错误码
};

// 激活主题
struct U2GS_dress_up_active_topic_req ->
{
	uint32      topic_id;        // 主题ID
};
struct GS2U_dress_up_active_topic_ret <-
{
	uint32      topic_id;        // 主题ID
	vector<uint32> success_list; // 成功激活 时装ID列表
	uint32				err_code;		// 错误码
};

// 时装升星
struct U2GS_dress_up_fashion_add_star_req ->
{
	uint32      fashion_id;        // 时装ID
};	
struct GS2U_dress_up_fashion_add_star_ret <-
{
	uint32      fashion_id;        // 时装ID
	uint32				err_code;		// 错误码
};

// 时装染色
struct U2GS_dress_up_fashion_dyeing_req ->
{
	uint32      fashion_id;        // 时装ID
	vector<key_value> index_color_list; // [{目标索引, 目标颜色ID}]
};	
struct GS2U_dress_up_fashion_dyeing_ret <-
{
	uint32      fashion_id;        // 时装ID
	vector<key_value> index_color_list; // [{目标索引, 目标颜色ID}]
	uint32				err_code;		// 错误码
};

// 时装装备
struct U2GS_dress_up_fashion_equip_req ->
{
	uint32      fashion_id;        // 时装ID
};
struct GS2U_dress_up_fashion_equip_ret <-
{
	uint32      fashion_id;        // 时装ID
	uint32				err_code;		// 错误码
};

// 时装主题 装备/卸下
struct U2GS_dress_up_fashion_topic_equip_req ->
{
	uint32      topic_id;        // 主题ID
	uint8 	is_equip;		// 0卸下 1装配
};
struct GS2U_dress_up_fashion_topic_equip_ret <-
{
	uint32      topic_id;        // 主题ID
	uint8 	is_equip;		// 0卸下 1装配
	uint32				err_code;		// 错误码
};

// 外观变更
struct U2GS_dress_up_appearance_change_req ->
{
	uint64      role_id;        // 角色ID
	vector<key_value>  change_list;  	// Key: 1 发色 2 肤色 3 身高 4 纹身样式 5 纹身颜色
};
struct GS2U_dress_up_appearance_change_ret <-
{
	uint64      role_id;        // 角色ID
	vector<key_value>  change_list;  	// Key: 1 发色 2 肤色 3 身高 4 纹身样式 5 纹身颜色
	uint32				err_code;		// 错误码
};

struct GS2U_dress_up_active_fashion <-
{
	uint32		item_id;	// 物品id
};


struct GS2U_dress_up_fashion_expire <-
{
	uint32      fashion_id;        // 时装ID
};

// 设置头盔是否展示
struct U2GS_dress_up_set_show_helmet ->
{
	uint8 	is_show;		// 是否不展示头盔 1-是 0-否
};
// ----------- 时装 end -----------

// ================================= 运营直购1 直购2 end ===============================

struct dp_player_buy
{
	uint16          goods_id;      // 商品id
	uint16          daily_times;   // 今日购买次数
	uint16          total_times;   // 总购买次数
};

// 运营直购商品
struct dp_stc
{
	uint16 goods_id;						// 商品id
	string name;							// 礼包名
	vector<indexTypeItem> item_list;		// 物品奖励
	key_value curr_type;					// 货币价格
	string direct_purchase_code;			// 直购价格
	uint32 discount;						// 原价
	key_2value limit;						// 限购条件
	key_value condition_type;				// 可购买条件
	key_value show_type;					// 可显示条件
	uint8 character;						// 品质
	uint8 red_dot;							// 商品是否有登录红点
	uint8 must_buy_label;                   // 必买标签
};


struct dp_segment
{
	uint16 day;						// 天数序号
	string text;                    // 包装名
	uint32 item_show;               // 顶部道具展示
	vector<dp_stc> goods_list;	    // 商品列表
	vector<dp_player_buy> buy_list;	// 玩家购买列表
};

// 直购1
struct GS2U_dp_summary_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint32 item_show;               // 顶部道具展示
	vector<dp_stc> goods_list;	    // 商品列表
	vector<dp_player_buy> buy_list;	// 玩家购买列表

};

// 直购2
struct GS2U_dp_segment_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	vector<dp_segment> goods_list;	    // 商品列表
};


struct U2GS_dp_summary_buy ->
{
	uint32		id;					// 活动入口ID
	uint16      goods_id;      		// 商品id
};
struct GS2U_dp_summary_buy_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	dp_player_buy      goods_buy_info;   // 商品购买信息
};

struct U2GS_dp_segment_buy ->
{
	uint32		id;					// 活动入口ID
	uint16 		day;				// 天数序号
	uint16      goods_id;      		// 商品id
};
struct GS2U_dp_segment_buy_ret <-
{
	uint32		id;					// 活动入口ID
	uint16 		day;				// 天数序号
	uint32		err;				// 错误码
	dp_player_buy      goods_buy_info;   // 商品购买信息
};
// ================================= 运营直购1 直购2 end ===============================

// ================================= 天神祝福 start ===============================

struct ChapterBless
{
	uint32 chapter; // 章节
	vector<key_value> bless_list; // 祝福列表 [{BlessID, Num}]
};

struct GS2U_dungeons_bless_send_all_bless_list <-
{
	vector<ChapterBless> chapter_bless_list
};

struct GS2U_dungeons_bless_update_pre_pick_bless <-
{
	uint32 bless_id; // 祝福ID
};

struct GS2U_dungeons_bless_send_bless_list <-
{
	uint32 bless_id_1; // 祝福1ID
	uint32 bless_id_2; // 祝福2ID
	uint32 bless_id_3; // 祝福3ID
};

struct U2GS_dungeons_bless_choose_bless_req ->
{
	uint32		bless_id;					// 祝福ID
};
struct GS2U_dungeons_bless_choose_bless_ret <-
{
	uint32		bless_id;					// 祝福ID
	uint32    err_code;					// 错误码
};
// ================================= 天神祝福 end =================================
// 循环关演员
struct U2GS_getLoopModelShow ->
{
	uint16				id; // 风格包id
	uint8               num; // 数量
};

struct GS2U_getLoopModelShowRet <-
{
	uint16				id; // 风格包id
	uint8               num; // 数量
	vector<playerModelUI>	show_list;
};

// ================================= 等级封印 start ===============================
struct GS2U_serverSealSync <-
{
	uint16		id; 				// 封印id
	uint16      level;				// 封印等级
	uint32      unlock_time;		// 解封时间 0-无限等待
	string      first_player_name;	// 第一名玩家名字
	uint8       first_player_sex;	// 第一名玩家性别
	uint64      last_first_player_id; // 上一次第一名玩家id
	uint16      seal_honor_lv;		// 封印之证等级
	uint16      seal_honor_exp;		// 封印之证经验
	uint16      last_seal_honor_lv; // 上一次封印之证等级
	uint16      recent_id;			// 最近达成的封印id
	uint16      last_id;            // 上次突破的封印id
	uint16      release_level;      // 解封时的玩家等级
	vector<key_value> history_list; // 历史封印
	uint16      last_finish_id;     // 上一次结束的封印id
};

struct U2GS_upSealHonorLv ->
{
};

struct GS2U_upSealHonorLvRet <-
{
	uint32    err_code;					// 错误码
	uint16    new_lv;
	uint16    new_exp;
};

struct U2GS_breakServerSeal ->
{
};

struct GS2U_breakServerSealRet <-
{
	uint32    err_code;					// 错误码
	uint64 	  first_player_id;			// 第一名玩家ID
	uint16    old_seal_honor_lv;		// 上一次封印之证等级
	uint16    new_seal_honor_lv;		// 本次封印之证等级
	uint16    old_lv;					// 旧等级
	uint16    new_lv;					// 新等级
	uint16    new_last_id;              // 新的上次突破的封印id
};

// ================================= 等级封印 end =================================

// ================================= 兑换活动 start =================================
struct ActiveExchange
{
	uint32 index; // 索引
	vector<indexTypeItem> item_new; // 奖励物品
	uint32 discount; // 整体折扣万分比
	vector<key_2value> cost_list; // 消耗列表
	vector<key_2value> limit; // 限制
};

// 兑换活动返回
struct GS2U_change_active_ret <-
{
  uint32      id;             				// 活动入口ID
  uint32      err;             				// 错误码
  vector<ActiveExchange> exchange_list; // 兑换列表
  vector<key_value> change_list; // 已兑换列表 [{Index, Times}]
  vector<uint32>   follow_list;  // 关注列表
};

struct U2GS_change_active_exchange_req ->
{
    uint32  id;    // 活动入口ID
    uint32 index;  // 兑换索引
    uint32 times;  // 兑换次数
};
struct GS2U_change_active_exchange_ret <-
{
	  uint32  id;    // 活动入口ID
    uint32 index;  // 兑换索引
    uint32 times;  // 兑换次数
    uint32  err_code;
};

struct U2GS_change_active_follow_req ->
{
    uint32  id;    // 活动入口ID
    uint8  is_follow; // 0取消关注 1关注
    uint32 index;  // 兑换索引
};
struct GS2U_change_active_follow_ret <-
{
	  uint32  id;    // 活动入口ID
	  uint8  is_follow; // 0取消关注 1关注
    uint32 index;  // 兑换索引
    uint32  err_code;
};
// ================================= 兑换活动 end =================================

// ================================= 问题反馈 start =================================
struct U2GS_feed_back_req ->
{
    string mail_address; 	// 邮箱地址
    string content;   		// 反馈内容
};
struct GS2U_feed_back_ret <-
{
    uint32  err_code;
};
// ================================= 问题反馈 end =================================

// ================================= 荣耀龙徽 start =================================
struct glory_badge_base_info
{
	key_2value    			buyExp; // 购买等级
	vector<consWay>			dailyReward;  // 进阶后，每日可领取奖励
	key_value  					advancedConsume; // 进阶消耗 （货币ID，数量）
	string 							directPurchase; //	进阶消耗 直购商品ID
	string 							advancedtext;	//	进阶特权文字
	vector<indexTypeItem> advancedIconItem;	// 进阶时界面展示icon
	key_value 					extremeAdvancedConsume;	//	至尊进阶消耗 （货币ID，数量）
	string 							extremeDirectPurchase;	//	至尊进阶消耗 直购商品ID
	string 							extremeAdvancedtext;	//	至尊进阶特权文字
	vector<indexTypeItem> extremeAdvancedIconItem;	//	至尊进阶时界面展示icon
	vector<ModelInfo> 	battlePassPic;	//	主界面模型显示 大奖预览界面奖励模型的参数配置
	vector<ModelInfo> 	battlePassPic1;	//	大奖预览界面模型显示 大奖预览界面奖励模型的参数配置
	string 							battlePassText;	//	大奖预览文字
	vector<key_value> 	battlePassItem;	//	大奖的物品ID
	string              lable_banner1;  // 奖励标签
	string              lable_banner2;  // 任务标签
	string              lable_banner3;  // 兑换标签
};

struct glory_badge_award_item
{
	pb_uint16	index;		// 奖励索引	
	uint8   type;       // 类型 1道具 2货币 3装备
	pb_uint32	itemID;		//物品ID
	pb_uint32	count;		// 数量
	uint8	bind;		// 是否绑定
	uint8	effect;		// 是否转圈特效
	pb_uint16  quality;    // 品质
	pb_uint16  star;       // 星级
	uint8 sort;	//	展示排序
};

struct glory_badge_lv_cfg
{
	uint32 lv; // 龙徽等级
	uint32 exp; // 升至下一级所需经验
	vector<glory_badge_award_item> awardItem1; // 精英版奖励
	vector<glory_badge_award_item> awardItem2; // 进阶版奖励
	vector<glory_badge_award_item> awardItem3; // 至尊进阶版奖励
	uint32 show; // 大奖是否预览
};

struct glory_badge_goods
{
	uint32 index; //	商品ID
	uint32 sort; //	商店物品显示排序
	indexTypeItem item;	//	物品
	key_value curr_type;	// 消耗
	key_2value limit;	//	限制
	uint32 show;	//	特殊转圈特效
	uint32 push;	//	推荐标识
	key_value condition_type;	//	可购买条件
	key_value show_type;	//	可显示条件
};

// 荣耀龙徽返回
struct GS2U_dragon_badge_ret <-
{
  uint32      		id;             						// 活动入口ID
  uint32      		err;             						// 错误码
  glory_badge_base_info 	base_info;					//	基础信息
	vector<glory_badge_lv_cfg> lv_list;	//	等级配置列表
	vector<glory_badge_goods>	goods_list; // 商品信息列表
	uint32        	lv;  				 	 							// 龙徽等级
	uint32        	exp;    				 						// 当前龙徽经验
	uint8         	rank_flag;      		 				// bit0 是否普通进阶 bit1 是否至尊进阶
	vector<uint8> 	lv_award;										// 等级奖励领取列表
	uint8         	daily_reward;   		 				// 是否领取每日宝箱 0-未领取 1-领取
	vector<key_value> 	goods_buy;; 						// 购买商品列表
	uint32  				next_reset_time;  					// 下一次周重置时间
	vector<conditionClass> daily_conditionInfo;	    // 达成项目列表-每日任务
	vector<achieveCondition>	daily_achieveList;	// 当前条件达成值-每日任务
	vector<achieveParam>	daily_hasAchieveList;	    // 已达成列表-每日任务
	vector<conditionClass> weekly_conditionInfo;	    // 达成项目列表-每周任务
	vector<achieveCondition>	weekly_achieveList;	// 当前条件达成值-每周任务
	vector<achieveParam>	weekly_hasAchieveList;	    // 已达成列表-每周任务
};

// 请求进阶龙徽
struct U2GS_DragonBadgeActivityAdvance ->
{
	uint32		  id;				  // 活动入口ID
	uint16        type; 			  // 进阶类型 1 进阶 2 至尊进阶
};
// 进阶龙徽返回
struct GS2U_DragonBadgeActivityAdvanceRet <-
{
	uint32		  id;			// 活动入口ID
	uint16        type; 		// 进阶类型 1 进阶 2 至尊进阶
	uint32	      err_code;     // 错误码
};

// 购买龙徽经验
struct U2GS_DragonBadgeActivityBuyExp ->
{
	uint32		  id;	     // 活动入口ID
	uint32        level; 	 // 购买的等级
};
// 购买龙徽等级返回
struct GS2U_DragonBadgeActivityBuyExpRet <-
{
	uint32		    id;	     // 活动入口ID
	uint32        lv;      // 新等级
	uint32        exp;     // 新经验值
	uint32	        err_code;    // 错误码
};

// 领取龙徽等级奖励
struct U2GS_DragonBadgeActivityLvReward ->
{
	uint32		id;	     // 活动入口ID
};
// 领取龙徽等级奖励返回
struct GS2U_DragonBadgeActivityLvRet <-
{
	uint32			id;	     	 // 活动入口ID
	vector<uint8> 	lv_award;										// 等级奖励领取列表
	uint32	        err_code;    // 错误码
};

// 每日领奖
struct U2GS_DragonBadgeActivityDaily ->
{
	uint32			id;	     	 // 活动入口ID
};
// 每日领奖返回
struct GS2U_DragonBadgeActivityDailyRet <-
{
	uint32			id;	     	 // 活动入口ID
	uint32	        err_code;    // 错误码
};

// 购买商品
struct U2GS_DragonBadgeActivityBuyGoods ->
{
	uint32			id;	     	 // 活动入口ID
	uint32      goods_id;  // 商品ID
	uint32      times;     // 购买次数
};
// 购买商品返回
struct GS2U_DragonBadgeActivityBuyGoodsRet <-
{
	uint32			id;	     	 // 活动入口ID
	uint32      goods_id;  // 商品ID
	uint32      times;     // 购买次数
	uint32	        err_code;    // 错误码
};
// ================================= 荣耀龙徽 end =================================
// ================================= 封印比拼 start ===============================
struct server_seal_contest
{
	uint32 id;
	uint16 order;					   // 分页id
	string name;                       // 活动分页名
	string promote;                    // 说明文字
	uint16 open_day;                   // 开启时间
	uint16 duration_day;			   // 持续天数
	vector<key_2value> reward_cond;    // 奖励条件
	uint32 lv_min;                     // 进入等级限制
	string title_icon;                 // 标签小图资源
	uint32 level;                      // 显示等级
	uint16 rank_show_max;              // 排行最大显示数
};

struct server_seal_contest_gift
{
	uint32 id;
	uint16 order;
	uint16 gift_order;
	vector<indexTypeItem> award_item;
};

struct server_seal_contest_gift_personal
{
	uint32 id;
	uint16 gift_order;
	uint16 condition;
	vector<indexTypeItem> award_item;
};

struct server_seal_contest_rank
{
	uint8 rank;
	string name;
	uint32 value;
	uint32 time;
};

// 同步配置
struct GS2U_server_seal_contest_cfg <-
{
	vector<server_seal_contest>  base_list;               // 基础
	vector<server_seal_contest_gift>  gift_list;		  // 奖励
	vector<server_seal_contest_gift_personal>  personal_gift_list; // 个人奖励
	vector<uint32> award_p_gift_list;  // 已领取的个人奖励id
};


// 请求信息
struct U2GS_server_seal_contest_info ->
{
	uint32 id;
	uint16 order;
};
struct GS2U_server_seal_contest_info_ret <-
{
	uint32 id;
	uint16 order;
	uint16 rank;
	uint16 value;
};


// 请求排行榜
struct U2GS_server_seal_contest_top ->
{
	uint32 id;
	uint16 day;
};
struct GS2U_server_seal_contest_top_ret <-
{
	uint32 id;
	uint16 day;
	vector<server_seal_contest_rank> top_list;
	uint8 my_rank;
	uint32 my_value;
};

// 领取个人奖励
struct U2GS_server_seal_contest_p_award ->
{
	uint32 id;
	uint16 gift_order;
};
struct GS2U_server_seal_contest_p_award_ret <-
{
	uint32 id;
	uint16 gift_order;
	uint32 err_code;
};

// 排名降低气泡
struct GS2U_server_seal_contest_rank_down <-
{
	uint8 type; // 0-下降 1-清空
};
// ================================= 封印比拼 end =================================

// ================================= 职业塔 start =========================
struct career_tower_detail
{
	uint16	tower_id;						// 塔ID
	uint16  layer; 							// 最大通关层数
	uint16  reward;							// 最大奖励进度索引
	uint16   today_challenge_times; // 今日挑战次数
	uint16   total_challenge_times; // 总计可挑战次数
};
struct GS2U_career_tower_info_sync  <-
{
	vector<career_tower_detail> info_list; // 详细信息列表
};

struct GS2U_career_tower_update  <-
{
	career_tower_detail tower_info; // 详细信息列表
};

struct GS2U_career_tower_player_update  <-
{
	uint16 reward_id; // 全局奖励已领取最大索引
	uint32 pet_id; // 出战魔宠ID
	uint16 yesterday_layer; // 昨日结算层数
	uint16 super_yesterday_layer; // 超级塔昨日结算层数
};

// 请求进入职业塔
struct U2GS_career_tower_enter_req ->
{
	uint32 dungeon_id;				// 副本ID
};
struct GS2U_career_tower_enter_req <-
{
	uint32 dungeon_id;				// 副本ID
	uint32 err_code;		// 错误码
};

// 职业塔结算返回
struct GS2U_career_tower_settle_result <-
{
	uint32				dungeon_id;		// 副本id
	bool				is_win;			// 是否胜利
	vector<CoinInfo>	coinList; // 货币列表
	vector<itemInfo>	itemList; // 道具列表 
};

// 秒杀
struct U2GS_career_tower_mop_req ->
{
	uint32 tower_id;				// 塔ID
};
struct GS2U_career_tower_mop_ret <-
{
	uint32 tower_id;				// 塔ID
	uint16 start_layer;  // 成功秒杀的起始层数
	uint16 end_layer:  // 成功秒杀的结束层数
	vector<CoinInfo>	coinList; // 货币列表
	vector<itemInfo>	itemList; // 道具列表 
	uint32 err_code;	// 错误码
};

// 领取进度奖励
struct U2GS_career_tower_reward_req ->
{
	uint16 tower_id;		// 塔ID
	uint16 reward_id;		// 奖励ID
};
struct GS2U_career_tower_reward_ret <-
{
	uint16 tower_id;		// 塔ID
	uint16 reward_id;		// 奖励ID
	uint32 err_code;	// 错误码
};

// 选择出战魔宠
struct U2GS_career_tower_set_pet_req ->
{
	uint32 pet_id;				// 魔宠ID
};
struct GS2U_career_tower_set_pet_ret <-
{
	uint32 pet_id;				// 魔宠ID
	uint32 err_code;	// 错误码
};

// 请求副塔角色战力
struct U2GS_career_tower_role_battle_value ->
{
	uint32 tower_id;			// 塔ID
};
struct GS2U_career_tower_role_battle_value <-
{
	uint64 role_id;				// 角色id
	uint64 battle_value;		// 战力
	uint32 error_code;			// 错误码
};

// 首通英雄
struct career_tower_first_pet
{
	uint8	pos;				// 位置
	uint32	cfg_id;				// 英雄id
	uint16	pet_star;			// 英雄星级
	uint16	pet_lv;				// 英雄等级
	uint8	pet_share_flag;	// 英雄是否入驻圣树
};
// 首通玩家
struct career_tower_player
{
	uint64	player_id;		// 玩家id
	uint64	time;			// 首通时间
	uint64	battle_value;	// 首通战力
	uint32	player_level;	// 首通等级
	uint32  head_id;		// 头像id
	uint32  frame_id;		// 头像框id
	string  player_name;	// 玩家名字
	uint8	sex;			// 玩家性别 0-男，1-女
	vector<career_tower_first_pet>	pet_list; // 首通英雄列表
};
// 首通单层信息
struct career_first_info
{
	uint16	layer;			// 层数
	uint8	is_reward;		// 是否已领取奖励 1是/0否
	career_tower_player	player;	// 玩家
};

// 请求首杀信息
struct U2GS_career_tower_first_info ->
{
	uint16	tower_id;		// 塔id
};
struct GS2U_career_tower_first_info <-
{
	uint32	error_code;
	uint16	tower_id;		// 塔id
	vector<career_first_info>	info_list;	// 首通信息列表
};
// 请求指定层数首杀信息
struct U2GS_career_tower_first_layer ->
{
	uint16	tower_id;		// 塔id
	uint32	dungeon_id;		// 副本id
};
struct GS2U_career_tower_first_layer <-
{
	uint32	error_code;
	uint16	tower_id;		// 塔id
	uint32	dungeon_id;		// 副本id
	vector<career_first_info>	info_list;	// 首通信息列表
};

// 首杀领奖
struct U2GS_career_tower_first_reward ->
{
	uint32	dungeon_id;		// 副本ID
};
struct GS2U_career_tower_first_reward <-
{
	uint32	error_code;
	uint32	dungeon_id;		// 副本ID
};


struct U2GS_career_tower_top ->
{
	uint16	tower_id;		// 塔id
	uint32	dungeon_id;		// 副本id
	uint8   num;            // 数量
	uint8   show_model;     // 是否需要前三模型 1-是 0-否
};
struct GS2U_career_tower_top_ret <-
{
	uint32	error_code;
	uint16	tower_id;		// 塔id
	uint32	dungeon_id;		// 副本id
	uint8   num;            // 数量
	uint8   show_model;     // 是否需要前三模型
	vector<career_tower_player>	info_list;	// 首通玩家
	vector<playerModelUI> model_list; // 前三模型 不需要时为空
};


struct GS2U_career_super_tower_redbag <-
{
	uint64	id;		// 红包id
	string name;    // 玩家名字
	uint8  sex;     // 玩家性别
	uint16 layer;   // 层数
};

struct U2GS_career_super_tower_redbag_get ->
{
	uint64	id;		// 红包id
};
struct GS2U_career_super_tower_redbag_get_ret <-
{
	uint32	error_code;
	uint64	id;		// 红包id
};
// ================================= 职业塔 end ===========================

// 联服第一次开启时间
struct GS2U_cluster_first_open_time <-
{
	uint32 first_open_time;
};

// ================================= 活动周卡 start ===============================
// 活动周卡
struct GS2U_ac_weekly_card_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint8       is_active;          // 是否激活
	uint8       type;               // 激活类型
	uint32      conditions;         // 所需钻石
	uint32      recharge_num;       // 充值钻石
	string      direct_purchase_code; // 直购id
	vector<indexTypeItem> item_list;   // 物品奖励  index是第几天
	uint16 award_day; // 已领取的天数
};

// 活动周卡领奖
struct U2GS_get_ac_weekly_card_award ->
{
	uint32		id;		// 活动ID
	uint8		day;	// 奖励天数
};
// 活动周卡领奖返回
struct GS2U_get_ac_weekly_card_award_ret <-
{
	uint32		id;		// 活动ID
	uint8		day;	// 奖励天数
	uint32		err_code;	
};

struct GS2U_ac_weekly_card_achieve <-
{
	uint32		id;		// 活动ID
};
// ================================= 活动周卡 end =================================

// ================================= 招财猫 start =================================
// 招财猫每次抽奖
struct luck_cat_stc
{
	uint32                   times;           // 次数
	key_value                condition;       // 抽奖条件（条件类型，参数）
	vector<consWay>			 consume;		  // 消耗
};

// 抽奖记录
struct lucky_cat_record
{
	string    name;             // 玩家名字
	uint8  sex;         // 性别，0-男，1-女
	uint8     multiple;         // 抽中的倍率
	key_value  reward;          // 获得的奖励（货币类型，货币数量）
};


// 招财猫返回
struct GS2U_lucky_luck_info_ret <-
{
	uint32		id;		// 活动ID
	uint32      err; //
	uint32                   reward_type;     // 抽中返还的货币ID
	vector<key_3value>       multiple;        // 招财猫倍率
	vector<luck_cat_stc> lucky_list;   // 每次抽奖配置信息
	vector<key_value> reach_cond_list; // 达成的招财条件
	uint32     has_drawn_times;        // 已招财次数
	string probability_text; // 概率公示文本内容
};

// 请求招财猫全服抽奖记录
struct U2GS_lucky_cat_record ->
{
	
};

// 招财猫全服抽奖记录返回
struct GS2U_lucky_cat_record_ret <-
{
	vector<lucky_cat_record>     all_record;  // 抽奖记录
};

// 请求招财抽奖
struct U2GS_drawn_luck_cat ->
{
	uint32					id;			  // 活动id
};

// 招财抽奖返回
struct GS2U_drawn_luck_cat_ret <-
{
	uint32			id;	     // 活动id
	uint32	        err_code;    // 错误码
	uint32          index;       // 抽中的编号
	vector<key_value> reward;    // 获得的奖励(货币类型，货币数量)	
	uint8           is_record;   // 是否抽奖记录
};
// ================================= 招财猫 end =================================

// ================================= 悬赏 start =================================
struct wanted_config
{
	vector<consWay> cost; // 消耗
	string directPurchase; // 直购商品ID
	uint32 timeBuy; // 购买限时（秒）
	string nameText; // 门票名称
	uint32 overTime; // 超时时间（小时）
}

// 悬赏 返回
struct GS2U_wanted_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	wanted_config info;    // 配置
	uint8 is_buy; // 是否购买 0 未购买 1 已购买
	uint32 recharge;			 // 累充
	vector<conditionClass> conditionInfo;	    // 达成项目列表
	vector<achieveCondition>	achieveList;	// 当前条件达成值
	vector<achieveParam>	hasAchieveList;	    // 已达成列表
};

// 悬赏 购买门票请求
struct U2GS_wanted_buy_ticket_req ->
{
	uint32		id;					// 活动入口ID
};

// 悬赏 购买门票返回
struct GS2U_wanted_buy_ticket_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
};

// 悬赏 领奖
struct U2GS_wanted_get_conditional_award ->
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
};

// 悬赏 领奖返回
struct GS2U_wanted_get_conditional_award_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		func_id;			// 活动项
	uint16		index;				// 奖励索引
	uint32      err;                // 错误码
	achieveParam achieve_param;     // 新达成项
};
// ================================= 悬赏 end =================================

// ============================ 首充 =========================
struct U2GS_reset_recharge_first ->
{

};

struct GS2U_reset_recharge_first <-
{
	uint32		err_code;	// 错误码
};

// 累充信息
struct RechargeFirstInfo
{
	string					label_text;		// label文字
	string					banner_text;	// banner文字
	vector<ModelInfo>		model_list;		// 展示模型
	uint32					recharge;		// 需要累充金额
	vector<indexTypeItem>	award_list;		// 奖励列表
};

// 上线推送累充信息
struct GS2U_recharge_first_info <-
{
	vector<RechargeFirstInfo>	recharge_list;	// 累充信息
};

// ============================ 首充 end ===========================
// ============================ 版本预告 ===========================
struct version_notice_config
{
	uint32 id;                         // 功能预告图id
	uint8  num;						   // 序号
	uint16 pic;						   // 图片id
	vector<indexTypeItem> item_new;	   // 奖励 以序号1的奖励为准
	uint8 type;						   // 领奖后是否不再预告
	string banner_text1;			   // banner文字1
	vector<int16> image_text1;		   // banner文字1位置
	string banner_text2;
	vector<int16> image_text2;	
	string banner_text3;
	vector<int16> image_text3;	
}

struct GS2U_version_notice <-
{
	uint32 id;                // 预告id
	string top_tile;                   // 标题
	vector<version_notice_config> notice_list; // 预告内容
	uint8 is_award;  // 是否领奖
};

// 版本预告 领奖
struct U2GS_version_notice_award ->
{
	uint32 id;                // 预告id
};

// 版本预告 领奖返回
struct GS2U_version_notice_award_ret <-
{
	uint32 		id;         // 预告id
	uint32      err;        // 错误码
};
// ============================ 版本预告 ===========================

// ==========================******************** 远征相关 ***********************=============================
// ========================= 猎魔BOSS =========================
// 猎魔挑战BOSS上榜信息
struct ExpeditionHuntBossRankInfo
{
	uint8	rank;			// 排名
	uint8	camp_id;		// 阵营
	uint16	title_id;		// 爵位称号
	string	name;			// 名字
	uint64	fight_power;	// 战斗力
	uint32	use_time;		// 战斗耗时
	uint32	fight_time;		// 通关时刻
	uint8   sex;            // 性别，0-男，1-女
};

// 
struct hunt_demon_rank_boss
{
	uint16				camp_id;			// 阵营ID
	uint16				nobility_id;		// 爵位ID
	uint64				fight_power;		// 战斗力
	uint16				type;				// boss类型
	uint16				type_yesterday;		// 昨天的boss类型
	uint16				fight_time;			// 本日攻打次数
	uint16				yesterday_rank;		// 昨日排名(已领奖或未上榜则为0)
	uint16				yesterday_time;		// 昨日通关时间(已领奖或者未上榜则为0)
	vector<ExpeditionHuntBossRankInfo> rank_list;	// 今日排名信息
};

// 获取猎魔挑战boss排行榜
struct U2GS_GetExpeditionHuntBossRankList ->
{
};
struct GS2U_GetExpeditionHuntBossRankListRet <-
{
	vector<ExpeditionHuntBossRankInfo>	today_rank_list;
	vector<ExpeditionHuntBossRankInfo>	yesterday_rank_list;
	uint32								my_time;				// 我的本日最短挑战时间
	uint32								my_time_yesterday;		// 我的昨日最短挑战时间
	uint32								err_code;				// 错误码
};

// 猎魔挑战BOSS领奖
struct U2GS_GetExpeditionHuntBossAward ->
{
};
struct GS2U_GetExpeditionHuntBossAwardRet <-
{
	uint32							err_code;				// 错误码
};

// ========================= 猎魔BOSS end =========================

// ======================= 远征试炼 =======================
struct hunt_demon_st
{
	uint16				level;				// boss等级
	bool				is_pass;			// 是否通过0否 1是
	bool				is_challenge;		// 是否已经挑战过 0否 1是
};

struct drop_item
{
	uint32		itemID;
	uint16		num;
}

// 获取猎魔界面信息
struct U2GS_get_hunt_demon_panel ->
{
};

// 登录推送
struct GS2U_hunt_demon_panel <-
{
	vector<hunt_demon_st> demon_info;		// boss信息
	uint16				season;				// 当前赛季
	uint16				level;				// 猎魔等级
	uint16				phy_value;			// 猎魔精力值
	uint32				next_recover_time;	// 下次恢复精力时间戳
	uint32				season_star_score;	// 赛季星魂评分
	hunt_demon_rank_boss	rank_boss;		// 排行榜BOSS信息
};

// 挑战
struct U2GS_challenge_demon_boss ->
{
	uint16				level;				// 猎魔等级
};

struct GS2U_challenge_demon_boss_ret <-
{
	uint32				error_code;				// 错误码
};

// 扫荡
struct U2GS_sweep_demon_boss ->
{
	uint16				level;				// 猎魔等级
	uint16				times;				// 扫荡次数
};

struct GS2U_sweep_demon_boss_ret <-
{
	uint32				error_code;				// 错误码
};

// 更新体力信息
struct GS2U_update_hunt_demon_phy <-
{
	uint16				phy_value;			// 猎魔精力值
	uint32				next_recover_time;	// 下次恢复精力时间戳
};

// 更新boss信息
struct GS2U_update_demon_boss_info <-
{
	hunt_demon_st demon_info;		// boss信息
};


// ======================= 远征试炼 ======================= end


// ======================= 远征爵位系统 ======================= 
struct nobility_rank
{
	uint64 				player_id; // 玩家ID
	string 				name;        // 名字
	uint32 				level;
	uint32				headid;	// 头像ID
	uint32				frame;	// 头像框
	uint64				fight; // 远征战力	
	uint8 				vip;
	uint32              career;
	uint8  				sex;
	uint32 				contribution; // 本赛季累计功勋值
	uint16				rank; // 排名
	uint16				nobility_id; // 爵位Id
	uint16				title_id; // 称号ID
	uint8				award_status; // 0未分配奖励 1已分配 2已领取
	uint32 				box_id; // 宝箱ID
};

// 获取界面信息
struct U2GS_get_nobility_info ->
{
};

struct GS2U_get_nobility_info_ret <-
{
	uint16 nobility_id; // 爵位Id
	uint32 contribution; // 本赛季累计功勋值
	uint8 is_got; // 今日工资是否已领取 0否 1是
	vector<nobility_rank> director; // 统领列表
	uint32 score; // 小队积分
	uint16 member_num; // 小队人数
	uint8 times;	// 强征次数
	uint8	award_status; // 0未分配奖励 1已分配 2已领取
};

struct GS2U_team_member_change <-
{
	uint16 member_num; // 小队人数
};

// 爵位晋升
struct U2GS_nobility_up ->
{
};

struct GS2U_nobility_up_ret <-
{
	uint32 error_code; // 错误码 0表示成功
	uint16 nobility_id; // 新的爵位Id
};

// 领取小队积分奖励
struct U2GS_get_team_reward ->
{
};

struct GS2U_get_team_reward_ret <-
{
	uint32 error_code; // 错误码 0表示成功
};


// 领取今日工资
struct U2GS_get_salary ->
{
};

struct GS2U_get_salary_ret <-
{
	uint32 error_code; // 错误码 0表示成功
};



// 获取小队贡献排行榜
struct U2GS_get_team_rank ->
{
};

struct GS2U_get_team_rank_ret <-
{
	vector<drop_item> items; // 小队奖励
	vector<nobility_rank> rank_list;
};

// 获取本阵营功勋排行榜
struct U2GS_get_contribution_rank ->
{
};

struct GS2U_get_contribution_rank_ret <-
{
	vector<nobility_rank> rank_list;
};

// 修改小队成员默认分配
struct U2GS_set_team_player_award_status ->
{
	uint64 	player_id; 	// 玩家ID
	uint8	status;		// 0取消分配 1分配
	uint32 	item_id; 	// 分配的宝箱ID
};

struct GS2U_set_team_player_award_status_ret <-
{
	uint32 error_code;	// 错误码
	nobility_rank rank; // 更新单个玩家排行信息
};

// 获取所有阵营功勋排行榜
struct U2GS_get_global_contribution_rank ->
{
};

struct GS2U_get_global_contribution_rank_ret <-
{
	vector<nobility_rank> rank_list;
};

// 获取强征信息
struct U2GS_get_force_info ->
{
};

struct GS2U_get_force_info_ret <-
{
	uint8 times;	// 强征次数
};

// 强征
struct U2GS_force_expedition ->
{
};

struct GS2U_force_expedition_ret <-
{
	uint32 error_code;	// 错误码
};

// ======================= 远征爵位系统 ======================= end



// ======================= 远征PVP =======================
// 发起挑战
struct U2GS_challenge_other_camp_player ->
{
	uint64 player_id; // 玩家ID
};

struct GS2U_challenge_other_camp_player_ret <-
{
	uint32 error_code;	// 错误码
};

// 战斗玩家信息
struct expedition_battle_info
{
	uint64 	player_id;
	string 	player_name;
	uint32	career;			// 职业
	uint32	level;			// 等级
	uint32	head_id;		// 头像id
	uint32	head_frame;		// 头像框
	uint8 	camp_id;		// 阵营ID
	uint32		title;		// 玩家爵位
	vector<uint32> buff_id_list; // buff id 列表
	uint64 fight;			// 远征战力
	vector<roleModel>   role_list;	    // 角色列表
};

struct GS2U_expedition_battle_info <-
{
	vector<expedition_battle_info> info;	// 对方战斗信息
};

// 玩家主动认输
struct U2GS_exit_fail ->
{
};

struct GS2U_pvp_ensure_code <-
{
};

struct U2GS_pvp_ensure_code_ret ->
{
};

// ======================= 远征PVP ======================= end

// ======================== 远征 start ========================
// 远征玩家结构
struct ExpeditionPlayer
{
	uint64		player_id;	// 玩家ID
	uint32		camp_id;	// 阵营ID
	string		name;		// 玩家名称
	uint8		sex;		// 玩家性别
	uint16		career;		// 玩家职业
	uint64		fight_power;// 玩家战力
	uint32		score;		// 玩家功勋
	uint32		title;		// 玩家爵位
	uint32		headid;		// 玩家头像
	uint32		frame;		// 玩家头像框	
	uint32		damage;		// 伤害百分比
	uint32		kill_num;	// 击杀玩家
	uint32		explore_num;	// 剩余探险次数
	uint32		protect_timestamp;	// 保护结束时间戳
};

// 远征奖励结构
struct ExpeditionAwardInfo
{
	uint32				time;                	// 时间
	uint8				is_receive;				// 是否领取
	vector<key_value>	area_info_list;			// key:城池类型,value:占领数量
};

// 赛季信息
struct ExpeditionInfo
{
	uint16				stage;				// 阶段
	uint16				first_camp;			// 皇城占领阵营ID
	expedition_battle_info	first_player;		// 皇城界面展示玩家
	uint16				first_camp_title;	// 皇城称号
	vector<key_value>	camp_title_list;	// 阵营称号信息
};

// 阵营信息
struct ExpeditionCampInfo
{
	uint16				camp_id;			// 阵营ID
	uint16				publish_task_times;	// 任务已发布次数
	ExpeditionPlayer	leader1;			// 统帅1
	ExpeditionPlayer	leader2;			// 统帅2
	ExpeditionPlayer	leader3;			// 统帅3
	uint32				title;				// 阵营称号
};

// 小队信息
struct ExpeditionGroupInfo
{
	uint16			group_id;	// 小队ID
	uint16			camp_id;	// 阵营ID
	uint64			leader_id;	// 队长ID
	string			leader_name;// 队长名字
	uint32			score;		// 小队积分
	uint32			exploit;	// 小队功勋
	uint64			power;		// 小队战力
};

// 任务记录
struct ExpeditionTaskInfo
{
	uint64		task_id;            	// 任务ID
	uint16		camp_id;            	// 阵营ID
	uint32		type1;                	// 0-初始任务, 1-动态任务 
	uint32		type2;                	// 任务作战类型
	uint32		target_area;        	// 目标区域
	uint32		team_id;           		// 接取该任务的小队
	string		team_leader_name;		// 队长ID
	uint16		state;                	// 任务当前状态 0 - 未接取, 1 - 未完成, 2 - 已完成
	uint32		progress;				// 任务进度
	uint32		target_score;			// 目标分数
};

// 阵营战报记录
struct ExpeditionCampFightInfo
{
	uint64		id;            			// 战报ID
	uint16		camp_id;            	// 阵营ID
	uint32		type;                	// 战报类型  1-占领,2-被占领,3-任务类
	uint32		area_id;           		// 地区ID
	uint32		time;                	// 时间
	uint32		task_type;				// 任务类型
	uint32		task_score;				// 任务目标分数
};

// 个人战报记录
struct ExpeditionPlayerFightInfo
{
	uint64		id;            			// 战报ID
	uint32		area_id;           		// 地区ID
	uint32		type;                	// 战报类型
	uint16		enemt_title;			// 敌人爵位
	string		enemy_name;				// 敌人名字
	uint16		energy;        			// 消耗能量
	uint16		score;        			// 奖励功勋
	uint32		time;                	// 时间
};

// 城池争夺支援信息
struct ExpeditionAreaFightHelpInfo
{
	uint32				pos;
	uint32				camp;
	bool				fight;
	vector<key_value>   area_info;   // key:阵营, value :支援人数
};

// 请求历史活动信息
struct U2GS_GetExpeditionHistoryUI ->
{
};
struct GS2U_GetExpeditionHistoryUIRet <-
{
	vector<ExpeditionAwardInfo>   history_info_list;		// 历史活动信息
	uint32				err_code;		// 错误码
};

// 请求活动主页面信息
struct U2GS_GetExpeditionUI ->
{
};
struct GS2U_GetExpeditionUIRet <-
{
	ExpeditionInfo						info;				// 赛季信息
	ExpeditionCampInfo					camp_info;			// 阵营信息
	vector<ExpeditionGroupInfo> 		group_list;			// 小队信息
	vector<ExpeditionCampFightInfo> 	fight_info_list;	// 争夺战报信息
	uint32								title;				// 爵位
	uint32								rank;				// 排名
	uint32								score;				// 功勋
	uint32								group;				// 小队
	uint32								err_code;			// 错误码
};

// 请求活动远征页面信息
struct U2GS_GetExpeditionMapUI ->
{
};
struct GS2U_GetExpeditionMapUIRet <-
{
	vector<uint32>						move_list;			// 玩家移动路径
	vector<ExpeditionTaskInfo> 			task_list;			// 任务信息
	vector<key_value> 					area_list;			// key - 城池ID value - 归属阵营ID
	uint32								err_code;		// 错误码
};

// 请求活动远征页面信息
struct U2GS_GetExpeditionMoveList ->
{
};
struct GS2U_GetExpeditionMoveListRet <-
{
	vector<uint32>						move_list;			// 玩家移动路径
	uint32								now_area;			// 现在所处位置
	uint32								contribution;		// 本赛季累计功勋
	uint32								gather_city;		// 集结城池
	uint32								gather_cd;			// 集结CD
	uint32								err_code;		// 错误码
};

// 请求指定数量的活动远征城池信息
struct U2GS_GetExpeditionAreaInfo ->
{
	vector<uint32>	area_id_list;				//城池ID
};
struct GS2U_GetExpeditionAreaInfoRet <-
{
	uint32										err_code;		// 错误码
	vector<ExpeditionAreaFightHelpInfo>			area_info_list;		// 城池信息
};

struct GS2U_update_expedition_area_info <-
{
	ExpeditionAreaFightHelpInfo		area_info;	 // 更新城池信息
};

// 请求单个活动远征城池信息
struct U2GS_GetExpeditionAreaUI ->
{
	uint32	area_id;				//城池ID
};
struct GS2U_GetExpeditionAreaUIRet <-
{
	uint32							area_id;				// 城池ID
	uint8							hp_rate;				// boss血量
	vector<ExpeditionPlayer>		our_num;				// 我方在场人员
	uint32							our_buff;				// 我方BUFF
	vector<ExpeditionPlayer>		enemy_num;				// 敌方在场人员
	uint32							err_code;				// 错误码
};

// 活动城池信息实时同步
struct GS2U_GetExpeditionAreaInfoSync <-
{
	uint32		pos;		// 城池ID
	uint32		camp;		// 所属阵营ID
};

struct role_key_value
{
	uint64  role_id;			// 角色ID
	uint64	fight_power;		// 战斗力
	vector<key_value>	attr;	// 属性
	uint64	hp;					// 剩余血量
};

// 请求远征玩家信息
struct U2GS_GetExpeditionPlayerInfo ->
{
};
struct GS2U_GetExpeditionPlayerInfoRet <-
{
	uint16							camp_id;				// 阵营ID
	uint16							group_id;				// 小队ID
	uint16							energy;					// 总能量
	uint32							last_reply_time;		// 上次能量回复时间
	uint16							now_area;				// 目前所在区域
	uint32							carry_energy;			// 携带能量
	uint32							all_score;				// 本赛季功勋
	uint32							week_score;				// 本周功勋
	uint32							time_score;				// 本场争夺功勋
	uint32							time_kill_num;			// 本场争夺杀人数量
	uint64							fight_power;			// 战斗力
	vector<role_key_value>			role_attrs;				// 角色属性
	uint32							strong_camp_id;			// 强阵营展示id
	uint32							err_code;				// 错误码
};

// 请求活动战报信息
struct U2GS_GetExpeditionFightInfo ->
{
};
struct GS2U_GetExpeditionFightInfoRet <-
{
	uint32								err_code;				// 错误码
	vector<ExpeditionCampFightInfo> 	fight_info_list;		// 争夺战报信息
	vector<ExpeditionPlayerFightInfo>	player_fight_info_list;	// 个人战报
};

// 活动战报实时同步
struct GS2U_GetExpeditionFightInfoSync <-
{
	uint8					type;				// 1-新增, 2-删除
	ExpeditionCampFightInfo	fight_info;			// 争夺战报信息
};

// 同步远征玩家信息
struct U2GS_GetExpeditionPlayerInfoSync ->
{
};
struct GS2U_GetExpeditionPlayerInfoSyncRet <-
{
	uint16							kill_num;				// 杀人
	uint16							score;					// 获得功勋
	uint32							err_code;				// 错误码
};

// 加入阵营
struct U2GS_ExpeditionJoinCamp ->
{
};
struct GS2U_ExpeditionJoinCampRet <-
{
	uint32				camp_id;	// 加入阵营ID
	uint32				err_code;	// 错误码
};

// 远征购买能量
struct U2GS_ExpeditionBuyEnergy ->
{
	uint32				time;	// 次数
};
struct GS2U_ExpeditionBuyEnergyRet <-
{
	uint32				time;		// 次数
	uint32				err_code;	// 错误码
};

// 远征发布任务
struct U2GS_ExpeditionPublishTask ->
{
	uint16				type;			// 任务类型
	uint32				target_area;	// 目标区域
	uint32				target_score;	// 目标分数
};
struct GS2U_ExpeditionPublishTaskRet <-
{
	uint16				type;			// 任务类型
	uint32				target_area;	// 目标区域
	uint32				target_score;	// 目标分数
	uint64				task_id;		// 任务ID
	uint32				err_code;		// 错误码
};

// 远征修改任务
struct U2GS_ExpeditionModifyTask ->
{
	uint64				task_id;		// 远征任务ID
	uint16				type;			// 修改后的任务类型
	uint32				target_area;	// 修改后的目标区域
	uint32				target_score;	// 修改后的目标分数
};
struct GS2U_ExpeditionModifyTaskRet <-
{
	uint16				type;			// 任务类型
	uint32				target_area;	// 目标区域
	uint64				task_id;		// 任务ID
	uint32				target_score;	// 修改后的目标分数
	uint32				err_code;		// 错误码
};

// 远征接取任务
struct U2GS_ExpeditionReceiveTask ->
{
	uint64				task_id;		// 任务ID
};
struct GS2U_ExpeditionReceiveTaskRet <-
{
	uint64				task_id;		// 任务ID
	uint32				err_code;		// 错误码
};

// 任务状态刷新
struct GS2U_ExpeditionRefreshTaskRet <-
{
	uint8					type;			// 1- 发布,2- 修改/接取/完成
	ExpeditionTaskInfo		task_info;		// 任务信息
};

// 初始任务信息同步
struct GS2U_ExpeditionRefreshInitTask <-
{
	vector<ExpeditionTaskInfo>		task_info_list;		// 任务信息
};

// 远征玩家携带体力
struct U2GS_ExpeditionPlayerCarryEnergy ->
{
	uint32				energy_num;			// 携带能量数(在主城时才可以携带体力)
};
struct GS2U_ExpeditionPlayerCarryEnergyRet <-
{
	uint32				energy_num;			// 携带能量数(在主城时才可以携带体力)
	uint32				err_code;		// 错误码
};

// 远征玩家移动
struct U2GS_ExpeditionPlayerMove ->
{
	vector<uint32>		move_list;			// 经过城池列表(需按照行走顺序)
	bool				need_send;			// 到达目的地后是否需要乘坐飞艇
};
struct GS2U_ExpeditionPlayerMoveRet <-
{
	uint32				err_code;		// 错误码
};

// 远征其他玩家移动信息
struct GS2U_ExpeditionOtherPlayerMove ->
{
	uint64		player_id;				// 玩家ID
	string 		name;					// 玩家名字
	uint16		camp_id;				// 阵营ID
	uint16		career;					// 玩家职业
	pb_uint32 	head_id;     			// 头像ID
	pb_uint32 	frame;					// 头像框ID
	uint16		honor_lv;				// 头衔等级
	uint8 		sex;					// 性别
	vector<uint32>		move_list;		// 经过城池列表(需按照行走顺序)
};

// 远征玩家移动到达
struct GS2U_ExpeditionPlayerArriveRet <-
{
	uint32				arrived_time;	// 到达时间
	uint32				area_id;		// 城池ID
	bool				need_send;		// 到达目的地后是否需要乘坐飞艇
};

// 远征玩家传送到达
struct GS2U_ExpeditionPlayerArriveRet2 <-
{
	uint32				arrived_time;	// 到达时间
	uint32				area_id;		// 城池ID
};

// 远征玩家进入
struct U2GS_ExpeditionPlayerEnter ->
{
	uint32				area_id;		// 城池ID
	bool				is_1v1;			// 是否是从1v1退出来的
};
struct GS2U_ExpeditionPlayerEnterRet <-
{
	uint32				area_id;		// 城池ID
	uint32				err_code;		// 错误码
};

// 玩家申请PK
struct U2GS_ExpeditionPlayerFight ->
{
	uint64				enemy_id;		// 敌人ID
};
struct GS2U_ExpeditionPlayerFightRet <-
{
	uint64				enemy_id;		// 敌人ID
	uint32				err_code;		// 错误码
};
// 玩家PK结果
struct GS2U_ExpeditionPlayerFightResultRet <-
{
	uint16				is_win;			// 是否胜利
	uint16				get_score;		// 获得分数
	uint16				cost_energy;	// 消耗能量
	uint16              get_war_coin;   // 获得战功
	uint16              get_honor_exp;  // 获得荣誉点
	uint16              get_conquer_exp;// 获得征服点
};

// 远征玩家离开
struct U2GS_ExpeditionPlayerExit ->
{
};
struct GS2U_ExpeditionPlayerExitRet <-
{
	uint32				err_code;		// 错误码
};

// 远征城池结算
struct GS2U_ExpeditionAreaSettlementSuccRet <-
{
	uint32						area_id;		// 城池ID
	uint8						camp_id;		// 获胜阵营ID
	uint32						camp_damage;	// 获胜阵营造成伤害百分比
	ExpeditionPlayer 			kill_player;	// 击杀者
	vector<ExpeditionPlayer> 	player_list;	// 造成伤害前三名
	uint32						rank;			// 玩家伤害排名
	uint32						damage;			// 玩家造成伤害百分比
	uint32						score;			// 玩家获得功勋
	uint32                      get_war_coin;   // 获得战功
	uint32                      get_honor_exp;  // 获得荣誉点
	uint32                      get_conquer_exp;// 获得征服点
};
struct GS2U_ExpeditionAreaSettlementFailRet <-
{
	uint32						area_id;		// 城池ID
	uint32						camp_id;		// 阵营ID
};
// 远征争夺结算
struct GS2U_ExpeditionSettlementRet <-
{
	uint32					time;					// 结算时间
	vector<key_2value>		old_area_info_list;		// 位置信息：key-阵营ID,value1-城池类型,value2-占领数量
	vector<key_2value>		new_area_info_list;		// 位置信息：key-阵营ID,value1-城池类型,value2-占领数量
	uint32					score;					// 获得功勋
	uint32                      get_war_coin;   // 获得战功
	uint32                      get_honor_exp;  // 获得荣誉点
	uint32                      get_conquer_exp;// 获得征服点
};
// 远征皇城结算
struct GS2U_ExpeditionImperialSettlementRet <-
{
	uint32					time;					// 结算时间
	vector<ExpeditionPlayer>show_player;			// 展示玩家
	vector<key_value>		camp_title_list;		// 阵营称号信息
	uint32					score;					// 获得功勋
	uint32					kill_num;				// 击杀玩家
	ExpeditionInfo						info;		// 赛季信息
	uint32                      get_war_coin;   // 获得战功
	uint32                      get_honor_exp;  // 获得荣誉点
	uint32                      get_conquer_exp;// 获得征服点
};

// 玩家领取争夺结算奖励
struct U2GS_ExpeditionPlayerGetAward ->
{
	uint32	close_time;  				// 结束时间
};
struct GS2U_ExpeditionPlayerGetAwardRet <-
{
	uint32				close_time;  			// 结束时间
	uint32				err_code;				// 错误码
};

// 玩家进入城池信息同步
struct GS2U_ExpeditionMapInfo <-
{
	vector<key_value>			camp_score_list;	// 战盟分数
	vector<ExpeditionPlayer>	enemy_list;			// 敌人信息
	uint32						people_num;			// 我方人数
	uint32						enemy_num;			// 敌方人数
	uint32						buff;				// BUFF
	uint32						kill_num;			// 杀人数
	uint32						score;				// 获得功勋
	uint32						protect_timestamp;		// 保护结束时间戳
};
struct GS2U_ExpeditionMapInfoSync1 <-
{
	vector<key_value>			camp_score_list;	// 战盟分数
};
struct GS2U_ExpeditionMapInfoSync2 <-
{
	uint8						type;				// 1-新增, 2-减少
	ExpeditionPlayer			enemy;				// 敌人
};
struct GS2U_ExpeditionMapInfoSync3 <-
{
	uint32						our;			// 我方人数变化人数    0 - 不变,1 - 增加,2 - 减少
	uint32						enemy;			// 敌方人数变化人数    0 - 不变,1 - 增加,2 - 减少
};
struct GS2U_ExpeditionMapInfoSync4 <-
{
	uint32						buff;				// BUFF
};

struct GS2U_ExpeditionPlayerCamp <-
{
	uint32						camp_id;				// 阵营ID，没加入阵营为0
	uint32						fight_type;				// 下场开启的争夺类型
	uint32						fight_time;				// 下场开启的争夺时间
};

// 玩家远征战力改变
struct GS2U_ExpeditionPlayerPowerChange <-
{
	uint64						power;		// 远征战力
};

// 请求远征玩家属性信息
struct U2GS_GetExpeditionPlayerAttrInfo ->
{
};
struct GS2U_GetExpeditionPlayerAttrInfoRet <-
{
	uint32							nobility_id;			// 爵位ID
	vector<role_key_value>			role_attrs;				// 角色属性
	uint32							err_code;				// 错误码
};

// 赛季重置信息同步
struct GS2U_ExpeditionResetSeason <-
{
};

// 推送上线外显红点
struct GS2U_ExpeditionRedPoint <- 
{
	bool	is_red;
};

// ========================= 远征 end =========================





// 发起集结
struct U2GS_ExpeditionGather ->
{
	uint32		city_id;		//	 城池ID
};
struct GS2U_ExpeditionGatherRet <-
{
	uint32		city_id;		// 城池ID	
	uint32		err_code;		// 错误码
};

// 集结人员信息
struct ExpeditionGatherPeopleInfo
{
	uint64		player_id;		// 玩家ID	
	uint32		title_id;		// 玩家爵位
	uint8		leader_id;		// 玩家指挥称号(不是指挥则为0)
	string		name;			// 玩家名称
	uint8		sex;			// 玩家性别
};

// 获取集结信息
struct U2GS_GetExpeditionGatherInfo ->
{
};
struct GS2U_GetExpeditionGatherInfoRet <-
{
	uint32							area_id;		// 城池ID
	uint8							hp_rate;		// boss血量	
	ExpeditionGatherPeopleInfo	leader;				// 发起玩家
	vector<ExpeditionGatherPeopleInfo> player_list;	// 响应玩家
	uint32		over_time;							// 集结结束时间
	uint32		err_code;							
};

// 集结信息更新
struct GS2U_ExpeditionGatherInfoSync <-
{
	uint32								gather_city;		// 集结城池
	uint32								gather_cd;			// 集结CD
	ExpeditionGatherPeopleInfo			player_info;		// 集结发起玩家
};

// 集结人员更新
struct GS2U_ExpeditionGatherPersonSync <-
{
	ExpeditionGatherPeopleInfo  player_info;		// 响应玩家
};
// 请求小地图信息
struct U2GS_GetExpeditionMiniMapUI ->
{
};

// 城池争夺支援信息
struct ExpeditionCityInfo
{
	uint32				city_id;		// 城池ID
	uint32				our_num;		// 我方人数
	uint32				enemy_num;		// 敌方人数
};

struct GS2U_GetExpeditionMiniMapUIRet <-
{
	uint32		gather_city;		// 集结城池
	vector<ExpeditionCityInfo>	city_info;			// 城池信息
	uint32		err_code;				
};

struct ExpeditionWeakCampInfo
{
	uint32	area_id;	// 地区ID
	uint32	camp_id;	// 阵营ID
	uint32	level;		// 弱阵营等级
	uint32	num;		// 城池数量
};
// 请求远征弱阵营信息
struct U2GS_GetAllExpeditionWeakCampInfo ->
{
};
struct GS2U_GetAllExpeditionWeakCampInfoRet <-
{
	vector<ExpeditionWeakCampInfo> info_list;
	uint32	err_code;
};

// 获取远征强阵营信息
struct U2GS_GetExpeditionStrongCampInfo ->
{
};
// 远征强阵营信息
struct GS2U_GetExpeditionStrongCampInfoRet <-
{
	uint8	type;			// 1-结算，2-主动申请
	uint32	camp_id;		// 阵营ID
	uint32	time;			// 次数
	uint32	notice_camp_id;	// 预告阵营
};

// 请求远征飞艇信息
struct U2GS_GetExpeditionAirShipInfo ->
{
};
struct GS2U_GetExpeditionAirShipInfoRet <-
{
	uint32	send_time;					// 可乘坐次数
	uint32	send_player_num;			// 已传送人数
	uint64	recovery_timestamp;			// 回复次数时间戳
	uint32	err_code;
};

// 请求飞艇传送
struct U2GS_GetExpeditionAirShipSend ->
{
};
struct GS2U_GetExpeditionAirShipSendRet <-
{
	uint32	err_code;
};

// --------------- 远征探险 -----------------
// 资源点
struct	ExpeditionExplore
{
	uint16	city_id;						// 城池ID
	uint8	type;							// 资源类别
	ExpeditionPlayer	occ_player;			// 占领玩家信息
	uint32	protect_timestamp;				// 保护时间
	uint32	award_timestamp;				// 发奖时间
};

// 请求远征探险信息
struct U2GS_GetAllExpeditionExploreInfo ->
{
};
struct GS2U_GetAllExpeditionExploreInfoRet <-
{
	uint16	explore_award_time;				// 探险获奖次数
	uint16	explore_fight_time;				// 探险争夺次数
	uint64	restore_explore_fight_timestamp;	// 探险争夺次数回复时间
	uint16	explore_bag_time;					// 探险宝箱累计次数
	vector<ExpeditionExplore> explore_list;	// 资源点信息
	uint32	err_code;
};

// 请求单个城池的探险信息
struct U2GS_GetExpeditionExploreInfo ->
{
	uint32	city_id;		// 城池ID
};
struct GS2U_GetExpeditionExploreInfoRet <-
{
	ExpeditionExplore  explore_list;	// 资源点信息
	uint32	err_code;
};

// 远征探险玩家信息更新
struct GS2U_ExpeditionExplorePlayerInfoSync <-
{
	uint16	explore_award_time;				// 探险获奖次数
	uint16	explore_fight_time;				// 探险争夺次数
	uint64	restore_explore_fight_timestamp;	// 探险争夺次数回复时间
	uint16	explore_bag_time;					// 探险宝箱累计次数
};
// 远征探险信息更新
struct GS2U_ExpeditionExploreInfoSync <-
{
	vector<ExpeditionExplore> 	explore_info;	// 资源点信息
};

// 请求远征探险占领/离开/攻占
struct U2GS_ExpeditionExploreRequest ->
{
	uint8	type;		// 操作类型：1-占领, 2-离开, 3-攻占
	uint32	city_id;	// 城池ID
};
struct GS2U_ExpeditionExploreRequestRet <-
{
	uint8	type;		// 操作类型：1-占领, 2-离开, 3-攻占
	uint32	city_id;	// 城池ID
	uint32	err_code;
};

struct GS2U_ExpeditionExploreBattleEnd <-
{
	bool	is_win;	
};

// 远征探险抢夺信息
struct ExpeditionExploreFightInfo
{
	uint32		type;           		// 探险资源类型
	string		enemy_server;			// 敌人服务器名字
	string		enemy_name;				// 敌人名字
	uint32		timestamp;              // 时间	
};

// 请求远征探险抢夺信息
struct U2GS_GetAllExpeditionExploreFightInfo ->
{
};
struct GS2U_GetAllExpeditionExploreFightInfoRet <-
{
	vector<ExpeditionExploreFightInfo> info_list;	// 争夺信息
	uint32	err_code;
};

struct GS2U_ExpeditionExploreFightInfoSync <-
{
	ExpeditionExploreFightInfo info;	// 争夺信息
};

// ========================= 远征 end =========================

//----------------------------远征手册----------------------------------
// 任务进度信息
struct ExpeditionNotesTaskInfo
{
	uint8 type_id;            // 条件类型(配置表Condition中的条件类型)
	uint32 progress;         // 进度 （玩家达到的次数、积分、排名）
};


// 上线同步
struct GS2U_ExpeditionNotes <-
{
	vector<ExpeditionNotesTaskInfo> task_info; //任务进度信息
	vector<uint32> already_awarded_id; // 已经领奖的手册成就id
};

//刷新成就进度
struct GS2U_ExpeditionNotesTaskUpdate <-
{
	ExpeditionNotesTaskInfo task_info; //成就进度信息(只发发生改变的)
};


//赛季重置 已经领奖的成就id客户端需要清空
struct GS2U_ExpeditionNotesTaskReset <-
{
	vector<ExpeditionNotesTaskInfo> task_info; //成就进度信息
};

//领奖
struct U2GS_ExpeditionNotesGetReward ->
{
	uint32 id;        // 手册成就id
};
struct GS2U_ExpeditionNotesGetRewardRet <-
{
	uint32 id;        // 手册成就id
	uint32 err_code;   // 成功 客户端需要更新此成就id为已领取  
};

//----------------------------远征手册 END----------------------------------


// ====================== 远征-巨魔降临==================================
// boss信息
struct expedition_demon_come_boss{
	uint16 city_id               // boss刷新的城池id
	uint32 boss_cfg_id;          // boss配置id
	uint8 blood_percentage;      // 剩余血量百分数（无百分号%）
};
// 阵营boss信息
struct expedition_demon_come_camp_boss_info{
	uint32 camp_id;              // 阵营id
	vector<expedition_demon_come_boss> boss_info_list; // 该阵营的所有boss信息
};

// 活动开始刷新boss boss城池及boss配置
struct expedition_demon_come_city_boss{
	uint16 city_id               // boss刷新的城池id
	uint32 boss_cfg_id;          // boss配置id
};

// 伤害排名信息
struct expedition_demon_come_damage_rank_info
{
	uint8 rank;                  // 排名 前50
	string name;                 // 玩家名称
	uint64 damage;               // 累计伤害
	uint32 camp_id;              // 阵营id
};
// 功勋排名信息
struct expedition_demon_come_score_rank_info
{
	uint8 rank;                  // 排名 前50
	string name;                 // 玩家名称
	uint64 score;                // 累计功勋
	uint16 kill_number;          // 击杀数量
};

// 请求巨魔降临活动信息
struct U2GS_expedition_demon_come_info ->
{
};

struct GS2U_expedition_demon_come_info_ret <-
{
	uint8 session;               // 场次 0-未开启 1-第一场 2-第二场 3-第三场
	vector<expedition_demon_come_camp_boss_info> camp_boss_info_list; // 所有阵营的boss信息
};

// 5秒定时请求巨魔降临活动信息
struct U2GS_expedition_demon_come_info_on_tick ->
{
};
// 只发发送改变的boss信息
struct GS2U_expedition_demon_come_info_update <-
{
	uint8 session;               // 场次 0-未开启 1-第一场 2-第二场 3-第三场
	vector<expedition_demon_come_camp_boss_info> camp_boss_info_list; // 发生改变的boss信息
};

// 前往防守/前往击杀（进入地图）
struct U2GS_expedition_demon_come_enter_map ->
{
	uint16 city_id;             // boss所在城池id
};

// 活动开启 发boss刷新的城池  活动结束发空列表
struct GS2U_expedition_demon_come_start <-
{
	vector<expedition_demon_come_city_boss> city_boss_list; // 所有刷新的城池boss信息
};

// boss被击杀 副本倒计时
struct GS2U_expedition_demon_come_end <-
{
	uint8 time;               // 倒计时 单位：秒
};

// 伤害排行（伤害排行和功勋排行，只会发其中一个）
struct GS2U_expedition_demon_come_sync_damage_rank <-
{
	vector<expedition_demon_come_damage_rank_info> rank_info;   // 排行信息（前50）
	uint8 my_rank;                                              //  我的排名 0-未上榜
	uint64 my_damage;                                           // 我的累计伤害
	uint32 my_camp_id;                                          // 我的阵营id
};

// 功勋排行
struct GS2U_expedition_demon_come_sync_score_rank <-
{
	vector<expedition_demon_come_score_rank_info> rank_info;    // 排行信息（前50）
	uint8 my_rank;                                              //  我的排名 0-未上榜
	uint64 my_score;                                            // 我的累计功勋
	uint16 my_kill_number;                                      // 我的击杀数量
	uint64 my_add_score;                                        // 需要飘字显示的功勋值 0-不需要飘字显示
};

// ====================== 远征-巨魔降临==================================
// ====================== 远征图鉴 start==================================

struct expedition_card
{
	uint8		type;				// 图鉴类型
	uint32		level;				// 图鉴吞噬等级
	uint32		exp;				// 图鉴吞噬经验
	uint32		fetter_level;		// 图鉴羁绊激活等级
	vector<uint32>	card_id_list;	// 图鉴激活列表
};

struct GS2U_expedition_card_info <-
{
	uint32						suit_lv;	// 套装等级
	vector<expedition_card>		card_list;	// 图鉴信息
};

// 图鉴激活 
struct U2GS_expedition_card_active -> 
{
	uint32		card_id;
};
struct	GS2U_expedition_card_active_ret <-
{
	uint32		card_id;
	uint32		err_code;
};

// 图鉴吞噬 
struct U2GS_expedition_card_swallow -> 
{
	uint32					card_type;		// 图鉴类别
	vector<key_value>		card_list;		// 图鉴吞噬列表
};
struct	GS2U_expedition_card_swallow_ret <-
{
	uint32					card_type;		// 图鉴类别
	vector<key_value>		card_list;
	uint32					new_level;
	uint32					new_exp;
	uint32					err_code;
};

// 图鉴羁绊升级
struct U2GS_expedition_card_fetter_level_up -> 
{
	uint32		card_type;
};
struct	GS2U_expedition_card_fetter_level_up_ret <-
{
	uint32		card_type;
	uint32		new_level;
	uint32		err_code;
};

// 图鉴套装升级
struct U2GS_expedition_card_suit_level_up -> 
{
};
struct	GS2U_expedition_card_suit_level_up_ret <-
{
	uint32		new_level;
	uint32		err_code;
};

// ====================== 远征图鉴 end==================================

// ==========================******************** 远征相关end ***********************=============================

// 雷霆要塞联服对决信息
struct AshuraServer
{
    uint16  server_id;
    string  server_name;
    vector<chartPlayer>  top_list;     // 战力排行榜前十
};
struct U2GS_AshuraCluster ->
{
};
struct GS2U_AshuraCluster <-
{
    vector<AshuraServer>  server_list;
};


// 天命守护选择职业
struct U2GS_DestinyGuardCareerSelect ->
{
	uint16 career;
};


// ====================== 蓝钻祈福（绿钻换蓝钻） ====================
struct greenBlessInfo
{
	uint32		id;				// 祈福ID 
	uint16		free_res;		// 占卜结果（无结果为0）
	uint32		bless_time;		// 祈福时间
	uint8		day_count;		// 今日祈福次数
	uint32		bless_count;	// 祈福总次数
	uint32		uncrit_times;	// 未暴击次数（0开始）
};

// 上线同步
struct GS2U_sendGreenBlessData <-
{
	vector<greenBlessInfo> bless_list;
};

// 每日占卜
struct U2GS_GreenBlessFree ->
{
	uint32		id;			// 祈福ID
};
struct GS2U_GreenBressFreeRes <-
{
	uint32				id;			// 祈福ID
	uint32				res_free;	// 占卜结果系数
	vector<Dialog_Coin>	coins;		// 奖励货币
	uint32				err_code;
};

// 请求祈福
struct U2GS_GreenBless ->
{
	uint32		id;			// 祈福ID
	uint16		time;		// 抽取次数
};
struct GS2U_GreenBressRes <-
{
	uint32				id;				// 祈福ID
	uint16				time;			// 抽取次数
	vector<key_value>	award_res;		// 结果<暴击倍数、蓝钻数量>
	uint32				err_code;	
};
// =========================== 蓝钻祈福end =========================

// 前端上传空模型对象用于协议优化
struct U2GS_HideModel ->
{
    vector<uint64>  role_id_list;   // 空模型角色ID列表
};

// 消除商店一次性红点
struct U2GS_CleanShopRed ->
{
	uint8		shopID;		// 商店ID
};

// 请求神魔战场连杀信息
struct U2GS_pantheon_boss_kill ->
{
};
struct GS2U_pantheon_boss_kill_ret <-
{
	uint16				total_kill;			// 总击杀
	vector<uint16>		award_list;			// 已领取的id
};

// 请求神魔战场领取连杀奖励
struct U2GS_pantheon_boss_kill_award ->
{
	uint16 id;  // 奖励id
};
struct GS2U_pantheon_boss_kill_award_ret <-
{
	uint16	id;
	uint32	err_code;
};

// 请求神魔战场bp信息
struct U2GS_GetPantheonBpInfo ->
{
};
struct GS2U_GetPantheonBpInfoRet <-
{
	uint32				close_time;	// 结束时间(本轮bp的结束时间)
	uint32				player_lv;	// 玩家等级
	uint32				assist_num;	// 助战位数量
	uint32				score;		// 积分
	uint8				purchase;	// 购买信息(bit位为1表示购买了对应档位的bp)
	vector<key_3value>	award_list;	// 领奖信息(key为奖励id,value1-3表示对应档位的bp奖励是否领取)
};

// 神魔战场bp领奖
struct U2GS_GetPantheonBpAward ->
{
};
struct GS2U_GetPantheonBpAwardRet <-
{
	uint32				err_code;	// 错误码
	vector<key_3value>	award_list;	// 领奖信息
};

// =========================== 公会副本start =======================

// 关卡
struct guild_ins_zones_node
{
	uint16 node_id;
	uint8 is_pass;
	uint8 is_mark;
	uint8 player_num;
	pb_uint64 param1;
	pb_uint64 max_hp; // boss关有效
};


struct guild_ins_zones_bag
{
	uint16 node_id; // 可用关卡
	vector<key_value> item_list; // 道具id，数量
};

struct guild_ins_zones_first_pass
{
	uint16 chapter_id;
    uint16 first_pass_guild_icon; // 首通公会图标
    string first_pass_guild_name; // 首通公会名
};

// 请求界面信息
struct U2GS_guild_ins_zones_info ->
{
	
};
struct GS2U_guild_ins_zones_info_ret <-
{
	uint32 err_code;
	uint16 chapter_id;  // 当前章节
	uint16 pos_node;  // 当前关卡位置
	vector<guild_ins_zones_node>  guild_node_list; // 公会关卡
	vector<key_value>  personal_node_list; // 个人已通关关卡  包含福利关、迷宫关 key=chapter value =node
	vector<key_value>  award_node_list; // 已领取奖励的关卡 key=chapter value =node
	uint16 use_times; // 已消耗次数
	uint16 max_times; // 最大次数
	uint16 progress; // 最大进度
	uint16 yesterday_chapter_id;  // 昨日章节
	uint16 yesterday_progress; // 昨日进度
	uint16 challenge_times; // 本周挑战次数
	uint8 is_progress_award; // 是否领取每日进度奖
	vector<uint16> times_award_list; // 已领取的次数奖励 order
	vector<guild_ins_zones_bag> bag_item_list;  // 获取的道具
	vector<guild_ins_zones_first_pass> first_pass_list;  // 章节首通公会

};

// 标注
struct U2GS_guild_ins_zones_remark ->
{
	uint16 chapter_id;  // 章节 
	uint16 node_id; // 关卡
	uint8 is_mark;  // 1-标记 0-不标记
};
struct GS2U_guild_ins_zones_remark_ret <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id; // 关卡
	uint8 is_mark;  // 1-标记 0-不标记
	uint32 err_code;
};

// 能量打击
struct U2GS_guild_ins_zones_hit ->
{ 
	uint16 chapter_id;  // 章节
	uint16 node_id; // 关卡
	key_value  use_item;
};
struct GS2U_guild_ins_zones_hit_ret <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id; // 关卡
	key_value  use_item;
	uint32 err_code;
};

// 结算-BOSS关
struct GS2U_guild_ins_zones_settle_boss <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id; // 关卡
	uint64 total_damage; // 总伤害
	uint16 percent; // 万分比
	uint8 is_kill;
	vector<Dialog_Item>  item_list;
	vector<EqInfo>       eq_list;
	vector<Dialog_Coin>  coin_list;
};

// 结算-采集关
struct GS2U_guild_ins_zones_settle_collect <-
{
	uint16 chapter_id;  // 当前章节
	uint16 node_id; // 当前关卡
	uint16 total_num; // 已采集总数量
	uint8 is_success;  // 是否通关
	vector<key_value>  item_list; // 获得的资源
	vector<key_value>  total_item_list; // 公会获得的资源总数
};

// 结算-小怪关
struct GS2U_guild_ins_zones_settle_monster <-
{
	uint16 chapter_id;  // 当前章节
	uint16 node_id; // 当前关卡
	uint8 is_success;  // 是否通关
	uint16 num; // 击杀数量
	uint16 total_num; // 已击杀总数量
};

// 结算-福利关
struct GS2U_guild_ins_zones_settle_welfare <-
{
	uint16 chapter_id;  // 当前章节
	uint16 node_id; // 当前关卡
	uint8 is_success;  // 是否通关
	pb_uint64 param;  // 参数
	vector<Dialog_Item>  item_list;
	vector<EqInfo>       eq_list;
	vector<Dialog_Coin>  coin_list;
};

// 福利关提交采集物
struct U2GS_guild_ins_zones_welfare_coll_put ->
{
};

// 通知服务器迷宫通关
struct U2GS_guild_ins_zones_maze_pass ->
{
	uint16 chapter_id;  // 章节 
	uint16 node_id; // 关卡
};
struct GS2U_guild_ins_zones_maze_pass_ret <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id; // 关卡
	uint32 err_code;
};

// 领取奖励
struct U2GS_guild_ins_zones_award ->
{
	uint8 type; // 1-每日进度奖励 2-次数奖励
	uint32 param; // 参数
};
struct GS2U_guild_ins_zones_award_ret <-
{
	uint8 type;
	uint32 param; // 参数
	uint32 err_code;
};

// 日志
struct guild_ins_zones_log
{
	uint8 type; // 1. 个人挑战 2.公会消息-标记 3. 公会消息-打击  4. 公会消息-通关
	uint64 player_id;  // 玩家ID
	string name;		// 玩家名字
	uint16 player_lv;   // 玩家等级
	uint32 head_id;		// 头像 、 公会消息时为公会icon
	uint32 frame_id;	// 头像框
	uint16 chapter_id;	// 章节
	uint16 node_id;		// 关卡
	uint32 boss_id;     // BossID
	uint16 boss_lv;     // Boss等级
	uint32 use_item_id; // 使用的道具
	pb_uint64 param1;   // 参数1 BOSS关-造成的伤害     采集关-无           小怪关-无               打击-造成的伤害
	pb_uint32 param2;	// 参数2 BOSS关-伤害万分比     采集关-采集数量      小怪关-击杀小怪数量     打击-伤害万分比      标记-玩家职位 
	pb_uint32 param3;	// 参数3 BOSS关-剩余血量万分比 采集关-公会采集总数  小怪关-公会击杀小怪总数  打击-消耗道具数量
	uint32 time;		// 时间戳
};
// 请求日志
struct U2GS_guild_ins_zones_log ->
{
	uint16 pages; // 页数
};
struct GS2U_guild_ins_zones_log_ret <-
{
	uint16 pages; // 页数
	uint16 total_pages; // 总页数
	vector<guild_ins_zones_log> log_list;
	uint32 err_code;
};

// 关卡实时同步参数
struct guild_ins_zones_node_param
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
	uint8  is_mark;
	uint8  is_pass;
	uint8  player_num;
	uint16 param1;
};

// 关卡实时同步信息
struct GS2U_guild_ins_zones_node_param_sync <-
{
	vector<guild_ins_zones_node_param> param_list;
};

// 进入关卡
struct U2GS_guild_ins_zones_enter ->
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
};
struct GS2U_guild_ins_zones_enter_ret <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
	uint32 err_code;
};

// 关卡移动
struct U2GS_guild_ins_zones_move ->
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
};
struct GS2U_guild_ins_zones_move_ret <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
	uint32 err_code;
};

// boss关伤害排行
struct guild_ins_zones_boss_rank
{
	uint8 rank;
	string name;
	uint8 sex;
	uint64 damage;
	uint8 percent;
};

struct GS2U_guild_ins_zones_boss_rank <-
{
	vector<guild_ins_zones_boss_rank> rank_list;
	uint8 my_rank;
	uint64 my_damage;
};

// 侧方信息同步
struct GS2U_guild_ins_zones_label_info <-
{
	uint16 chapter_id;  // 章节
	uint16 node_id;
	uint32 my_value;	// 我的值
	uint32 guild_value; // 公会的值
	uint8  player_num;  // 当前地图人数
};


struct guild_assign_award_item
{
	uint32 item_id;		// 物品id
	uint8 source_from;	// 来源（各个类型自定义）
	uint8 is_assign;	// 是否被分配
	string belong_name; // 归属者名字
};

// 请求分配列表
struct U2GS_guild_assign_award_list ->
{
	uint8 type; // 类型 1-公会副本
};
struct GS2U_guild_assign_award_list_ret <-
{
	uint8 type; // 类型 1-公会副本
	vector<guild_assign_award_item> list;
};

// 分配奖励
struct U2GS_guild_assign_award_to ->
{
	uint8 type; // 类型 1-公会副本
	uint64 player_id;   // 归属玩家
	uint32 item_id;		// 物品id
};
struct GS2U_guild_assign_award_to_ret <-
{
	uint8 type; // 类型 1-公会副本
	uint32 item_id;		// 物品id
	uint64 player_id;   // 归属玩家
	uint32 err_code;
};

// 自动分配规则设置
struct U2GS_guild_assign_award_rule_set ->
{
	uint8 type; // 类型 1-公会副本
    uint8 rule;  // 1-按周声望排序 2-按战力排序 3-按等级排序 4-不进行自动分配
};
struct GS2U_guild_assign_award_rule_set_ret <-
{
	uint8 type; // 类型 1-公会副本
	uint8   rule;
	uint32	err_code;
};

struct guild_assign_award_log
{
	uint8 type; // 1-手动分配 2-自动分配
	string name; // 手动分配的角色名
	uint32 item_id;
	string to_name; // 被分配的角色名
	uint32 time;
};

// 请求分配日志
struct U2GS_guild_assign_award_log ->
{
	uint8 type; // 类型 1-公会副本
};
struct GS2U_guild_assign_award_log_ret <-
{
	uint8 type; // 类型 1-公会副本
	vector<guild_assign_award_log> list;
};


// 请求BOSS关卡首通
struct guild_ins_zones_boss_first_pass
{
	uint16 chapter_id;
	uint16 node_id;
	string guild_name;
};
struct U2GS_guild_ins_zones_boss_first_pass ->
{
	uint16 chapter_id;  // 章节
};
struct GS2U_guild_ins_zones_boss_first_pass_ret <-
{
	vector<guild_ins_zones_boss_first_pass> list;
};
// =========================== 公会副本end =========================

// =========================== 神秘商店 =========================
struct mystery_shop_goods
{
	uint16 id;
	uint16 seat;
	ShopItem     item;            // 商品道具
    ShopCurrency currency;        // 商品货币
    ShopEquip    equip;			  // 商品装备
    ShopCurrency currency1;       // 货币1
    ShopItem     needItem1;       // 所需道具1
    uint8        limitType;		  // 限购类型 
    pb_uint32    limitParam;      // 限购参数
    pb_uint32    buyNum;		  // 已经购买的个数
    uint8        conditionType;	  // 购买条件类型
    pb_uint32    conditionParam;  // 购买条件参数
    pb_uint32    conditionParam2; // 购买条件参数2
    pb_uint32    conditionParam3; // 购买条件参数3
    uint8        recommend;       // 推销：0-no，1-yes
    uint8        show_type;		  // 可显示条件类型
    pb_uint32    show_param;	  // 可显示条件参数1
    pb_uint32    show_param2;	  // 可显示条件参数2
    pb_uint32    show_param3;	  // 可显示条件参数3
    pb_uint16	 recNum;		  // 推荐购买数量
};

struct mystery_shop_buy_success
{
	uint16 id;
	uint16 seat;
	uint32 newPrice1;       		// 成功后有意义，货币1新的现价
	uint32 discount1;       		// 成功后有意义，货币1新的当前折扣
	uint32 newNeedItemCount1;       // 成功后有意义，所需道具1新的现价
	uint32 needItemDiscount1;       // 成功后有意义，所需道具1新的当前折扣
	uint32 newBuyNum;		    	// 成功后有意义，新的已经购买的个数
};

// 请求神秘商店信息
struct U2GS_mystery_shop ->
{

};
struct GS2U_mystery_shop_ret <-
{
	uint16 ref_free;    // 初始最大免费刷新次数
	uint16 ref_pay;     // 消耗货币刷新次数
	uint16 ref_consume; // 消耗货币刷新，单次消耗
	uint16 pay_refresh_times; // 已付费刷新次数
	uint16 free_refresh_times; // 剩余免费刷新次数
	uint32 next_free_time;    // 下次恢复次数时间 0-不恢复
	vector<mystery_shop_goods> goods_list;
};

// 购买神秘商店物品
struct U2GS_mystery_shop_goods_buy ->
{
	uint16 id;
	uint16 seat;
	uint16 buy_num;
};
struct GS2U_mystery_shop_goods_buy_ret <-
{
	uint16 id;
	uint16 seat;
	uint32 newPrice1;       		// 成功后有意义，货币1新的现价
	uint32 discount1;       		// 成功后有意义，货币1新的当前折扣
	uint32 newNeedItemCount1;       // 成功后有意义，所需道具1新的现价
	uint32 needItemDiscount1;       // 成功后有意义，所需道具1新的当前折扣
	uint32 newBuyNum;		    	// 成功后有意义，新的已经购买的个数
	uint32 err_code;
};

// 刷新神秘商店
struct U2GS_mystery_shop_goods_refresh ->
{
};
struct GS2U_mystery_shop_goods_refresh_ret <-
{
	uint32 err_code;
};

// 神秘商店红点
struct GS2U_mystery_shop_goods_red <-
{
};

// 一键购买神秘商店物品
struct U2GS_mystery_shop_goods_one_key_buy ->
{
	vector<key_2value> buy_list; // key=id value1=seat value2=buy_num
};
struct GS2U_mystery_shop_goods_one_key_buy_ret <-
{
	vector<mystery_shop_buy_success> success_list;
	uint32 err_code;
};
// =========================== 神秘商店 =========================

// =========================== 宠物装备+升星 =========================
// 宠物装备部位信息
struct pet_eq_pos
{
	uint8 pos;        // 部位
	uint64 uid;       // 实例id（为0表示未装配）
};

// 宠物装备技能信息
struct pet_eq_skill
{
	uint8   pos;        // 部位
	uint32  skill_id;   // 技能id
};

// 宠物装备信息
struct pet_eq
{
	uint64 uid;       // 实例id
	uint32 cfg_id;    // 配置id
	uint32 reset_time; // 已重置次数
	vector<pet_eq_skill> skill_list;  // 装备的所有技能（为空表示没有技能）
	vector<pet_eq_skill> reset_skill_list;   // 待保存的重置技能（为空表示没有）
};

// 推送宠物装备（上线时-同步所有宠物装备    在线时-只推送发生改变的宠物装备）
struct GS2U_pet_eq_sync <-
{
	vector<pet_eq> eq_list;  //装备列表
};

// 宠物进化（升星）
struct U2GS_pet_add_star_new ->
{
	uint64 pet_uid;              // 宠物实例id
	vector<uint64>	assist_cost_pet_uid_list; // 材料 宠物实例id列表（不需要传入空即可）
	// 辅助材料 道具 后端会自己判断
};
struct GS2U_pet_add_star_new_ret <-
{
	uint64 pet_uid;       // 宠物实例id
	uint32 err_code;      // 0-成功，非0-错误原因
};

// sp英雄战阶提升
struct U2GS_pet_add_sp_lv ->
{
	uint64 pet_uid;              // 宠物实例id
	vector<uint64>	assist_cost_pet_uid_list; // 材料 宠物实例id列表（不需要传入空即可）
};
struct GS2U_pet_add_sp_lv <-
{
	uint64 pet_uid;       // 宠物实例id
	uint32 err_code;      // 0-成功，非0-错误原因
};

// 宠物高星点亮星位
struct U2GS_pet_add_star_pos ->
{
	uint64 pet_uid;       // 宠物实例id
	uint16 star_pos;      // 星位
	vector<uint64>	assist_cost_pet_uid_list; // 材料 宠物实例id列表（不需要传入空即可）
};
struct GS2U_pet_add_star_pos_ret <-
{
	uint64 pet_uid;       // 宠物实例id
	uint16 star_pos;      // 星位
	uint32 err_code;      // 0-成功，非0-错误原因
};

// 宠物快速进化消耗
struct pet_quickly_add_cost
{
	uint64 pet_uid;     // 将要进化的宠物实例id
	vector<uint64>	assist_cost_pet_uid_list; // 材料 宠物实例id列表（不需要传入空即可）
	// 辅助材料 道具 后端会自己判断
};

// 宠物快速进化
struct U2GS_pet_add_star_new_quickly ->
{
	vector<pet_quickly_add_cost> cost_list; // 快速进化消耗列表
};
struct GS2U_pet_add_star_new_quickly_ret <-
{
	uint32 err_code;      // 0-成功，非0-错误原因
	vector<uint64> pet_uid_list; // 进化成功的宠物uid列表（失败为空）
};

// 穿戴宠物装备
struct U2GS_pet_eq_equip_on ->
{
	uint8  pet_pos;       // 出战位
	uint64 eq_uid;        // 宠物装备uid
	uint8  pos;           // 部位（1、2、3）
};
struct GS2U_pet_eq_equip_on_ret <-
{
	uint8  pet_pos;       // 出战位
	uint32 err_code;      // 0-成功，非0-错误原因
};

// 卸下宠物装备
struct U2GS_pet_eq_remove ->
{
	uint8  pet_pos;       // 出战位
	uint8  pos;           // 部位
};
struct GS2U_pet_eq_remove_ret <-
{
	uint8  pet_pos;       // 出战位
	uint32 err_code;      // 0-成功，非0-错误原因
};

// 宠物装备技能重置
struct U2GS_pet_eq_skill_reset ->
{
	uint64 eq_uid;       // 宠物装备实例id
	uint8  type;          // 1-重置 0-保存重置结果
};
struct GS2U_pet_eq_skill_reset_ret <-
{
	uint64 eq_uid;       // 宠物装备实例id
	uint8  type;          // 1-重置 0-保存重置结果（保存重置结果即把重置结果变成当前技能）
	uint32 err_code;      // 0-成功，非0-错误原因
	// 成功前，会先更新宠物装备，装备里有当前技能和重置结果
};
// =========================== 宠物装备+升星 =========================

// --------------------------------宠物 基础-----------------------------
// 资质属性键值_info
struct wash_value
{
  uint16  type; // 10001血量 10003攻击 10004防御 10005破甲
  int32  value;
};

// 宠物结构
struct pet_info
{
	uint64         	uid;					  		// 宠物唯一ID
	uint32         	pet_cfg_id;					 	// 宠物id (配置表Id)
	uint16         	pet_lv;					  		// 等级
	uint32         	pet_exp;						// 经验
	uint16         	break_lv;				  		// 突破等级  和宠物等级相关
	uint16         	star;				      		// 星数
	vector<uint16>  star_pos;						// 星位
	uint16         	grade;				      		// 品质(稀有度)
	uint8		   	fight_flag;						// 0否 1出战中 2助战中
	uint16			fight_pos;						// 出战/助战位置
	uint8			is_auto_skill;					// 自动释放技能 0是/1否
	vector<wash_value> wash_list;					// 洗练属性列表
	uint8			is_lock;						// 是否锁定 1是 0否
	vector<wash_value> wash_preview;				// 洗练属性列表--未保存
	vector<key_value> wash_material;				// 洗练所消耗的材料
	uint64 link_uid;                                // 幻兽链接的宠物uid 
	uint64 been_link_uid;                           // 宠物被链接的幻兽uid 
	uint64 appendage_uid;                           // 幻兽附灵的宠物uid
	uint64 been_appendage_uid;                      // 宠物被幻兽附灵的uid
	uint8           get_by_egg;                     // 是否根据孵蛋获得 1是/0否
	uint8           hatch_id;                       // 照看的孵化id 0表示未照看
	uint8			shared_flag;					// 0 未入驻圣树 1 已入驻圣树
	uint16         	pet_lv_original;				// 入驻圣树前等级 0 未入驻圣树
	uint64			point;							// 入驻圣树前出战评分 0 未入驻圣树
	uint16			sp_lv;							// sp英雄战阶等级
	uint32          been_link_pet_cfg_id;           // 宠物被链接的幻兽配置id
	uint16          been_link_pet_sp_lv;			// 宠物被链接的幻兽战阶等级
};
	
// 刷新宠物 上线&属性变化时发送
struct GS2U_pet_update <-
{
  vector<pet_info>     pets;				  		
};

struct pet_prop
{
	uint64         	uid;					  		// 宠物唯一ID
	vector<BattleProp> prop_list;					// 属性列表		
};

// 上线推
struct GS2U_push_pet_prop <-
{
  	vector<pet_prop>  pet_prop_list;	  		
};

// 变化推
struct GS2U_update_pet_prop <-
{
  	pet_prop  pet_prop;	  		
};

// 请求推，单独计算
struct U2GS_show_pet_prop ->
{
	uint64	uid;		// 宠物id
};
struct GS2U_show_pet_prop <-
{
	uint32    error_code;
  	pet_prop  pet_prop;	  	// 属性列表	
};

// 删除宠物同步
struct GS2U_pet_delete <-
{
  vector<uint64> delete_uid_list; // 删除的宠物实例id列表
};

// 升级
struct U2GS_pet_upgrade ->
{
	uint64         	uid;					  	// 宠物唯一ID
	vector<key_value> item_list;				// 使用的道具列表
};

struct GS2U_pet_upgrade_ret <-
{
	uint64         	uid;					  	// 宠物唯一ID
	uint32			ret_code;					// 0正常 否则为错误码
	uint8			flag;						// 等级是否变化 1是 0 否
};

// 锁定
struct U2GS_pet_set_lock ->
{
	uint64         	uid;					  	// 宠物唯一ID
	uint8			is_lock;					// 是否锁定 1是 0否
};
struct GS2U_pet_set_lock_ret <-
{
	uint64         	uid;					  	// 宠物唯一ID
	uint32          err_code;                   // 0-成功，非0-错误原因
	uint8			is_lock;					// 是否锁定 1是 0否
};

// 洗髓
struct U2GS_pet_wash_preview ->
{
	uint64         	uid;					  	// 宠物唯一ID
	uint8         	times;					  	// 洗髓次数 1或者3	
};

struct GS2U_pet_wash_preview_ret <-
{
	uint64      uid;					  	// 宠物唯一ID
	uint32		ret_code;	// 0正常 否则为错误码
	vector<wash_value> add_attr_list;	// 本次洗髓变化的属性列表（增量）
};

// 洗髓保存、放弃 -- 同时推送GS2U_pet_update
struct U2GS_pet_wash_save ->
{
	uint64         	uid;					  	// 宠物唯一ID
	uint8         	flag;					  	// 1 保存 0 放弃
};

struct GS2U_pet_wash_save_ret <-
{
	uint64         	uid;					  	// 宠物唯一ID
	uint32			ret_code;	// 0正常 否则为错误码
};

// 突破
struct U2GS_pet_break_up ->
{
	uint64         	uid;					  	// 宠物唯一ID
};

struct GS2U_pet_break_up_ret <-
{
	uint64         	uid;					  	// 宠物唯一ID
	uint32			ret_code;	// 0正常 否则为错误码
};

// 回退
struct U2GS_return_pet_material ->
{
	vector<uint64>         	uid_list;			// 宠物唯一ID列表
};

struct GS2U_return_pet_material_ret <-
{
	uint32			ret_code;	// 0正常 否则为错误码
	vector<uint64>         	uid_list;			// 宠物唯一ID列表
	vector<key_value>       item_list;			// 回退的道具
};

// --------------------------------宠物 基础-----------------------------

// =========================== 宠物图鉴 =========================
// 图鉴信息
struct AtlasInfo
	{
		uint32 atlas_id;  // 图鉴id
		uint8 stars; //星数
	};
// 上线发送图鉴信息
struct GS2U_AtlasUpdate <-
	{
		vector<AtlasInfo> atlas_list;  // 图鉴列表
	};
// 图鉴激活
struct U2GS_AtlasActive ->
	{
		uint32 atlas_id;  // 图鉴id
	};
struct GS2U_AtlasActiveRet <-
	{
		uint32 atlas_id;  // 图鉴id
		uint32	err_code;			// 0-成功，非0-错误原因
	};
// 图鉴升级
struct U2GS_AtlasLevelUp ->
	{
		uint32 atlas_id;  // 图鉴id
	};

struct GS2U_AtlasLevelUpRet <-
	{
		uint32 atlas_id;  // 图鉴id
		uint32	err_code;			// 0-成功，非0-错误原因
	};
// =========================== 宠物图鉴 =========================


// ====================== 宠物上阵 start =========================
// 上阵消息
struct PetPos
{
	uint8	type;		// 类型 出战1/助战2
	uint16	pos;		// 位置
	uint64	uid;	// 宠物uid 0代表无
	uint32	pet_cfg_id; // 宠物配置id
	uint8	is_auto_skill;	// 是否自动释放技能 1是/0否
	vector<pet_eq_pos> pos_ring_list;    // 戒指装备
};

// 防守阵容信息
struct PetPosDef
{
	uint16	func_id;	// 功能id
	uint8	type;		// 类型 出战1/助战2
	uint16	pos;		// 位置
	uint64	uid;		// 宠物uid 0代表无
	uint32	pet_cfg_id; // 宠物配置id
};

// 同步宠物上阵消息 
struct GS2U_PetPosSync <-
{
	vector<PetPos>  pet_pos;
};

// 同步宠物防守阵容消息 
struct GS2U_PetPosDefSync <-
{
	vector<PetPosDef>  pet_pos;
};

// 复制玩家默认英雄阵容到防守阵容
struct U2GS_CopyPetPosDef <-
{
	uint16	func_id;  // 功能id
};
struct GS2U_CopyPetPosDef ->
{
	uint32	err_code; // 错误码
	uint16	func_id;  // 功能id
};

// 解锁宠物出战/助战栏位
struct U2GS_PetPosActive ->
{
	uint8		type;	// 出战1/助战2
	uint16		pos;	// 解锁位置
};
struct GS2U_PetPosActive <-
{
	uint8		type;	// 出战1/助战2
	uint16		pos;	// 解锁位置
	uint32		err_code; // 错误码
};

// 上阵
struct U2GS_PetOutFight ->
{
	uint8		type;	// 出战1/助战2
  	uint8		pos;	// 位置
  	uint64		uid;	// 宠物uid
};
struct GS2U_PetOutFightRet <-
{
	uint8		op;			// 1-上阵  2-下阵
	uint8		type;		// 出战1/助战2
	uint8		pos;		// 位置
	uint64		uid;		// 宠物uid
	uint32		err_code;	// 错误码
};

// 一键上阵结构
struct PetOut
{
	uint8		type;	// 出战1/助战2
  	uint8		pos;	// 位置
  	uint64		uid;	// 宠物uid
};

// 一键上阵
struct U2GS_PetOutFightOneKey ->
{
	vector<PetOut>	list;
};
struct GS2U_PetOutFightOneKey <-
{
	uint32		err_code;	// 错误码
};

// 防守上阵
struct U2GS_PetOutDef ->
{
	uint16		func_id;// 功能id
	uint8		type;	// 出战1/助战2
  	uint8		pos;	// 位置
  	uint64		uid;	// 宠物uid
};
struct GS2U_PetOutDef <-
{
	uint16		fun_id;		// 功能id
	uint8		op;			// 1-上阵  2-下阵
	uint8		type;		// 出战1/助战2
	uint8		pos;		// 位置
	uint64		uid;		// 宠物uid
	uint32		err_code;	// 错误码
};

// 一键上阵防守阵容
struct U2GS_PetOutDefOneKey ->
{
	uint16			func_id;// 功能id
	vector<PetOut>	list;
};
struct GS2U_PetOutDefOneKey <-
{
	uint32		err_code;	// 错误码
	uint16		func_id;// 功能id
};

// 切换是否自动释放技能
struct U2GS_PetAutoSkill ->
{
	uint8       type;          // 出战1/助战2
	uint8       pos;           // 出战位置
	uint8       is_auto_skill; // 是否自动释放技能 1是/0否
};
struct GS2U_PetAutoSkillRet <-
{
	uint8		type;			// 出战1/助战2
	uint8		pos;			// 出战位置
	uint8		is_auto_skill;	// 是否自动释放技能 1是/0否
	uint8		uid;		// 宠物uid
	uint32		err_code;   	// 错误码
};

// 选择防守英雄
// =========================== 宠物上阵 end =========================

// =========================== 宠物大师 start =========================
// 同步宠物大师信息
struct GS2U_PetMasterUpdate <-
{
  uint16     lv;
};
// 激活
struct U2GS_PetMasterActive ->
{
  uint16     f_lv;  // 激活到的等级
};
struct GS2U_PetMasterActiveRet <-
{
  uint16     f_lv;  // 激活到的等级
  uint32     err_code;   // 错误码
};
// =========================== 宠物大师 end =========================


// =========================== 宠物抽奖 start =========================
// 抽奖消耗
struct PetDrawConsume
{
	uint8	draw_time;	// 抽卡次数
	uint32	item;		// 消耗道具/货币id
	uint16	num;		// 消耗数量	
};

// 心愿单
struct PetWish
{
	uint8	type;	// 宠物类型
	uint64	pet_id;	// 选中宠物配置id
};

// 奖励预览
struct PetDrawShow
{
	uint8	type;		// 宠物类别
	uint8	quality;	// 品质
	uint16	per;		// 概率万分比
};

struct QualityShow
{
	uint8   index;   // 序号
	uint8   quality; // 品质
};


// 抽奖信息
struct PetDrawInfo
{
	uint8   				id; 			// 抽奖Id：1普通英雄抽奖、2高级英雄抽奖
	uint16					day_time;		// 今日已抽奖次数
	uint16					day_limit;		// 今日抽奖限制次数
	uint16					all_time;		// 总次数
	uint16					wish_time;		// 抽满多少次后开启心愿单
	uint16					wish_vip;		// vip多少提前开启心愿单
	uint8					can_free;		// 是否可以免费抽 1是/0否
	uint32  				free_time;		// 免费开始时间，当前时间大于该值时为免费状态
	vector<PetDrawConsume>	cost_item;		// 道具抽奖消耗
	vector<PetDrawConsume>	cost_coin;		// 货币抽奖消耗
	key_value               score_cost;		// 积分领奖需要的货币 <CurrencyType, Num>
	vector<key_value>		score_award;	// 累计积分可领取奖励<宠物元素类别，奖励库id>（<0,0>表示不能领奖）
	vector<PetWish>			pet_wish;		// 心愿单（<0,0>表示无法放心愿单）
	uint8					element;		// 当前元素(0无 1风 2火 3土)
	uint32					switch_time;	// 元素切换时间
	key_value				switch_cost;	// 元素切换消耗(货币id，值)
	vector<PetDrawShow>     show_per;		// 预览展示，读取奖励库中的物品[<>]
	vector<uint32>			preview;		// 超稀有英雄，预览标签用
	string					per_text;		// 概率公示
};

// 奖励库
struct PetDrawLibrary
{
	uint32					id;					// 奖励库id
	vector<key_value>		index_item			// 奖励物品(序号，物品ID)
	vector<key_value>		quality_show;		// 奖励预览时，加入那个品质的列表中进行预览(序号、品质)
};

// 物品奖励
struct PetDrawItem
{
	uint32  cfgId;          // 配置ID
	uint32  amount;         // 数量
	uint8   is_new;			// 是否新获得 1是/0否
};

// 请求玩家信息配置
struct U2GS_PetDrawInfo ->
{
	uint8	id;		// 抽奖Id
};
struct GS2U_PetDrawInfoRet <-
{
	uint32	err_code;	// 错误码
	PetDrawInfo	info;	// 奖励配置
};

// 请求奖励库
struct U2GS_PetDrawLib ->
{
	uint8	id;		// 抽奖Id
};
struct GS2U_PetDrawLibRet <-
{
	uint8	id;		// 抽奖Id
	uint32	err_code;  			// 错误码
	vector<PetDrawLibrary>	lib;	// 奖励库
};

// 抽奖请求
struct U2GS_PetDraw ->
{
	uint16	id;			// 抽奖id
	uint16	num;		// 抽奖次数
	uint8	is_free;	// 是否免费抽 1是/0否
};
struct GS2U_PetDrawRet <-
{
	uint16	id;						// 抽奖id
	uint16	num;					// 抽奖次数
	uint8	is_free;				// 是否免费抽 1是/0否
	uint32  next_free_time;			// 下次免费时间
	vector<PetDrawItem>	draw_item;	// 获得物品奖励
	vector<key_value> draw_coin;	// 获得货币 <货币类型,数量>
	uint32	err_code;				// 错误码
};

// 积分领奖
struct U2GS_PetDrawScoreAward ->
{
	uint16	id;			// 抽奖id
	uint8   type;		// 宠物元素类别
};
struct GS2U_PetDrawScoreAwardRet <-
{
	uint16	id;						// 抽奖id
	vector<PetDrawItem>	draw_item;	// 获得物品奖励
	uint32	err_code;				// 错误码
};

// 设置心愿单
struct U2GS_PetDrawSetWish ->
{
	uint16	id;						// 抽奖id
	vector<key_value>	wish_list;	// <元素类型、宠物配置id>
};
struct GS2U_PetDrawSetWishRet <-
{
	uint32	err_code;	// 错误码
	uint16	id;						// 抽奖id
	vector<key_value>	wish_list;	// <元素类型、宠物配置id>
};

// 切换元素限定
struct U2GS_ChangeElement ->
{
	uint16	id; // 抽奖id
	uint8   type; // 切换至类型
};
struct GS2U_ChangeElementRes <-
{
	uint16	id;	// 抽奖id
	uint8	element;	// 当前元素(1风 2火 3土)
	uint32	err_code;	// 错误码
};

// 抽奖红点
struct GS2U_PetDrawRed <-
{
	uint8   normal_score;  // 普通积分领奖 1有/0无
	uint8	normal_free; // 普通免费抽 1有/0无
	uint8	normal_ten;  // 普通道具十连 1有/0无
	uint8	senior_ten;  // 高级道具十连 1有/0无
};

// 抽奖气泡
struct GS2U_PetDrawBubbles <-
{
	uint8	normal_bubble; // 普通抽奖气泡 1有/0无
	uint8	senior_bubble; // 高级抽奖气泡 1有/0无
};
// =========================== 宠物抽奖 end =========================

// =========================== 宠物置换 start =========================
// 低星置换
struct U2GS_PetSubstitutionLow ->
{
  uint64     uid; //宠物uid
  uint8      tpye; // 置换的类别 低星为1 高星为 2
		
};
// 高星转换
struct U2GS_PetSubstitutionHigh ->
{
  uint64     uid; //被置换宠物uid
  uint32     pet_id; // 目标宠物的id 
  vector<uint64>   cost_uid_list; // 消耗的宠物的uid列表
  uint8      tpye; // 置换的类别 低星为 1 高星为 2
		
};

struct GS2U_PetSubstitutionRet <-
{
  uint64     uid; //宠物uid
  uint32     pet_id; //获得宠物的配置id
  uint32     err_code; // 0-成功，非0-错误原因
};	
// =========================== 宠物置换 end =========================

// =========================== 宠物共生 start =========================
// 同步圣树守卫信息
struct GS2U_PetGuardSync <-
{
	vector<uint64> uid_list; // 被选择为圣树守卫的宠物uid列表
	uint64	shared_uid; // 被共享属性的宠物uid
	uint8	state; // 0-一期 1-二期
}

// 入驻信息
struct PetEnter
{
	uint16 pos; // 位置
	uint64 uid; // 宠物uid 0代表无
	uint32 pet_cfg_id; // 宠物配置id
	uint32 cd; // 入驻cd
	uint16 lv; // 入驻位等级
	uint32 unlock_time; // 解锁时间
}

// 同步入驻信息
struct GS2U_PetEnterSync <-
{
	vector<PetEnter> pet_enter;
}

// 解锁入驻栏位
struct U2GS_PetUnlockPosReq ->
{
	uint16 pos; // 解锁位置
}
struct GS2U_PetUnlockPosRet <-
{
	uint16 pos; // 解锁位置
	uint32 err_code; // 错误码
}

// 宠物入驻/卸下
struct U2GS_PetEnterReq ->
{
	uint16 pos; // 入驻/卸下位置
	uint64 uid; // 入驻/卸下宠物uid
}
struct GS2U_PetEnterRet <-
{
	uint16 pos; // 入驻/卸下位置
	uint64 uid; // 入驻/卸下宠物uid
	uint8 op; // 1-入驻 2-卸下
	uint32 cd; // 卸下后的入驻cd时间，0 表示入驻操作，不会有cd
	uint32 err_code; // 错误码
}

// 重置入驻栏位cd
struct U2GS_ResetPosCDReq ->
{
	uint16 pos; // 重置位置
}
struct GS2U_ResetPosCDRet <-
{
	uint16 pos; // 重置位置
	uint32 err_code; // 错误码
}

// 提升入驻位等级
struct U2GS_PetPosLevelUp ->
{
	uint32 pos; // 位置
};
struct GS2U_PetPosLevelUp <-
{
	uint32 pos; // 位置
	uint32 err_code; // 错误码
};

// 入驻位回退
struct U2GS_PetPosLevelBack ->
{
	uint32 pos; // 位置
};
struct GS2U_PetPosLevelBackRet <-
{
	uint32 pos; // 位置
	uint32 err_code; // 错误码
};
// =========================== 宠物共生 end =========================

// 竞技场玩家
struct arena_player
{
    uint64  player_id;     // 玩家Id
    string  player_name;   // 玩家名字
    string  server_name;   // 服务器名字
    string  guild_name;    // 战盟名字
    uint32  head_id;	   // 头像Id
    uint32  frame_id;	   // 头像框Id
    uint8   sex;           // 玩家性别
    uint16  career;        // 职业
    uint64  battle_value;  // 战斗力
    uint16  score;         // 积分
    uint16  rank;          // 排名
};
struct arena_player_model
{
    playerModelUI  player_model;  // 玩家模型
    uint16         score;         // 积分
    uint16         rank;          // 排名
    uint16         top_times;     // 登顶次数
};

// 竞技场主界面
struct U2GS_arena_info ->
{
};
struct GS2U_arena_info <-
{
    uint16                      my_score;     // 我的积分
    uint16                      my_rank;      // 我的排名
    vector<arena_player_model>  player_list;  // 积分排名前四玩家
    uint32                      last_season_time;  // 上期赛季结算时间
};

// 竞技场我的积分排名
struct U2GS_arena_rank ->
{
};
struct GS2U_arena_rank <-
{
    uint16  my_score;     // 我的积分
    uint16  my_rank;      // 我的排名
};

// 竞技场积分排行榜
struct U2GS_arena_top ->
{
};
struct GS2U_arena_top <-
{
    vector<arena_player>  player_list;  // 排行榜前N玩家和自己
};

// 竞技场挑战界面
struct U2GS_arena_match ->
{
};
struct GS2U_arena_match <-
{
    uint32                last_time;     // 上次刷新时间
    vector<arena_player>  player_list;   // 匹配玩家和自己
};

// 竞技场刷新
struct U2GS_arena_refresh ->
{
};
struct GS2U_arena_refresh <-
{
    uint32                last_time;    // 上次刷新时间
    vector<arena_player>  player_list;  // 匹配玩家
};

// 竞技场挑战
struct U2GS_arena_fight ->
{
    uint64  player_id;     // 玩家Id
    bool    is_skip;       // 是否跳过
};
struct GS2U_arena_fight <-
{
    uint32  error;         // 0-成功，非0-错误原因
    playerModelUI target_model; // 对手信息
};

// 竞技场战报界面
struct arena_player_report
{
    arena_player  player;     // 对方玩家
    int16         add_score;  // 增加积分
    uint32        time;       // 时间
};
struct U2GS_arena_report ->
{
};
struct GS2U_arena_report <-
{
    vector<arena_player_report>  player_list;  // 战报玩家
};

// 竞技场上期赛季
struct U2GS_arena_last_season ->
{
};
struct GS2U_arena_last_season <-
{
    uint16                      my_score;     // 我的积分
    uint16                      my_rank;      // 我的排名
    uint32                      season_time;  // 赛季结束时间
    vector<arena_player_model>  player_list;  // 排行榜前三玩家
    uint16                      world_level;  // 世界等级
};

// 竞技场次数
struct GS2U_arena_times_notice <-
{
    uint8  remain; // 剩余的次数
};

// 竞技场被打扣分红点
struct GS2U_arena_report_notice <-
{
    uint32  time; // 时间
};

// =========================== 幻兽 start =========================
// 幻兽链接
struct U2GS_PetLink ->
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 链接宠物的uid
};

struct GS2U_PetLinkRet <-
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 链接宠物uid
	uint32 error_code; // 错误码
};

// 取消链接
struct U2GS_CancelPetLink ->
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 链接宠物的uid
};

struct GS2U_CancelPetLinkRet <-
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 链接宠物uid
	uint32 error_code; // 错误码
};

// 幻兽附灵
struct U2GS_PetAppendage ->
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 附灵宠物uid
};

struct GS2U_PetAppendageRet <-
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 附灵宠物uid
	uint32 error_code; // 错误码
};

// 取消附灵
struct U2GS_CancelPetAppendage ->
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 附灵宠物uid
};


struct GS2U_CancelPetAppendageRet <-
{
	uint64 uid; // 幻兽uid
	uint64 target_uid; // 附灵宠物uid
	uint32 error_code; // 错误码
};
// =========================== 幻兽 end =========================

// =========================== 翅膀副本 start ==========================
// 获取翅膀副本玩家信息
struct U2GS_GetWingDungeonsPlayerInfo ->
{
	uint8		id;						// 副本ID
};
struct GS2U_GetWingDungeonsPlayerInfoRet <-
{
	uint8		id;						// 副本ID
	vector<key_value>	challenge_area;	// 目前所在地区 <X, Y>
	vector<key_value>	open_area;		// 已经完成挑战的地区 <X, Y>
	vector<key_value>	shop;			// 商店信息 <key - 商品ID, value - 已购买次数>
	uint8		can_enter;				// 是否可进入(上层是否通关) 1是/0否
};

// 请求当前可挑战的最高层
struct U2GS_GetWingDungeonsMaxId ->
{
};
struct GS2U_GetWingDungeonsMaxIdRet <-
{
	uint8		id; // 副本ID
};

// 进入翅膀副本
struct U2GS_EnterWingDungeonsDungeon ->
{
	uint8		id;					// 副本id
	uint8		x;					
	uint8		y;
};
struct GS2U_EnterWingDungeonsDungeonRet ->
{
	uint8		id;					// 副本id
	uint8		x;					
	uint8		y;
	uint32		err_code;			// 错误码
};

// 副本内信息同步
struct GS2U_WingDungeonsDungeonSync <-
{
	uint32		kill_num;			// 杀怪数量
	uint32		cur_num;			// 当前波杀怪数量
	uint64		exp;				// 累计经验
};

// 副本结算
struct GS2U_WingDungeonsDungeonSettle <-
{
	uint8		is_win;				//0:失败 1:胜利
	uint16		energy;			
	vector<itemInfo>	items;
	vector<CoinInfo>	coins;
	vector<EqInfo>		eqs;
};

// 玩家重置副本地图
struct U2GS_WingDungeonsResetMap ->
{
	uint8	id;		// 副本ID;
};
struct GS2U_WingDungeonsResetMapRet <-
{
	uint8	id;		// 副本ID;
	vector<key_value>	challenge_area;	// 当前正在挑战的地区
	vector<key_value>	open_area;		// 已经完成挑战的地区
	uint32		err_code;			// 错误码
};

// 玩家翅膀副本神秘商店购买商品
struct U2GS_WingDungeonsShopping ->
{
	uint16	id;			// 副本ID;
	uint16	item_num;	// 出售商品序号
};
struct GS2U_WingDungeonsShoppingRet <-
{
	uint16	id;			// 副本ID;
	uint16	item_num;	// 出售商品序号
	uint32	err_code;	// 错误码
};

// 请求同步能量值
struct U2GS_WingDungeonsSyncEnergy ->
{
};
struct GS2U_WingDungeonsSyncEnergy <-
{
	uint32	energy;		// 能量值
};

struct GS2U_WingDungeonsAddEnergy <-
{
	uint32	item_id;			// 道具ID;
	uint32	use_num;			// 使用数量
	uint32	add_energy;			// 恢复能量数
};
// =========================== 翅膀副本 end =========================

// ===========================坐骑副本 start=============
// 关卡信息
struct DungeonMountInfo
{
	uint32  dungeonID;			// 关卡ID
	uint16	freeTimes;			// 免费次数
	uint16  maxProgress;		// 最高进度万分比
	uint8	star;				// 最高通关星数
}
//坐骑副本玩法信息
struct DungeonMountGroupInfo
{
	uint8  type;				// 秘境类型
	uint16  maxFightCount;		// 最大挑战次数
	uint16  fightCount;			// 已使用挑战次数
	uint16  buyFightCountDay;	// 今天已购买的次数
	vector<DungeonMountInfo>  dungeonList;		// 已解锁副本列表
}
//坐骑副本次数
struct DungeonMountFightCount
{
	uint8  type;				// 秘境类型
	uint8  maxFightCount;		// 最大挑战次数
	uint8  fightCount;			// 已使用挑战次数
	uint8  buyFightCountDay;//今日购买的额次数
}
//坐骑副本结算
struct GS2U_DungeonMountFightResult <-
{
	uint32  dungeonID;				// 关卡ID
	uint16  progress;				// 当前进度万分比
	uint16  maxProgress;			// 最高进度万分比
	uint8	cur_star;				// 当前通关星数
	uint8	max_star;				// 最大通关星数
	uint8	is_first_star;			// 是否第一次三星
	bool    isOpenNext;				// 是否解锁下一关
	uint64	exp;					// 经验
	uint16  double_times;           // 双倍次数
	vector<CoinInfo>  coinList;		// 奖励货币列表
	vector<itemInfo>  itemList;		// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
	uint8 	  max_enter_count;		// 最大进入次数
	uint8	  enter_count;		    // 已进入次数
	vector<CoinInfo>  firstCoinList;// 首通奖励货币列表
	vector<itemInfo>  firstItemList;// 首通奖励物品列表
	vector<EqInfo>	  first_eq_list;// 首通奖励装备列表
};
// 坐骑副本信息
struct U2GS_DungeonMountInfo->
{
};
struct GS2U_DungeonMountInfo <-
{
	vector<DungeonMountGroupInfo>  groupList;		// 坐骑副本信息列表
};
// 进入坐骑副本
struct U2GS_EnterDungeonMount ->
{
	uint32  dungeonID;			// 关卡ID
};
//坐骑副本扫荡
struct U2GS_MopupDungeonMount ->
{
	uint32  dungeonID;			// 关卡ID
};
struct GS2U_MopupDungeonMount <-
{
	uint32  dungeonID;				// 关卡ID
	uint16  maxProgress;			// 最高进度万分比
	bool    isOpenNext;				// 是否解锁下一关
	uint64	exp;					// 经验
	vector<CoinInfo>  coinList;		// 奖励货币列表
	vector<itemInfo>  itemList;		// 奖励物品列表
	vector<EqInfo>	  eq_list;		// 奖励装备列表
	uint8     double_times;         // 双倍次数
	uint8     star;
};
// 基础数据
struct DungeonMountBase {
  uint8    batch;       // 波次
  uint16   remain_num;        // 剩余数量
  uint16   escape_score;  // 逃跑点
};
// 进入地图后同步基础数据
struct GS2U_DungeonMountBaseInfo <-
{
	DungeonMountBase base;
};
// 基础数据刷新
struct GS2U_DungeonMountBaseUpdate_Batch <-
{
  uint8   batch;       // 波次
};
struct GS2U_DungeonMountBaseUpdate_Remain <-
{
  uint16   remain_num;       // 剩余数量
};
struct GS2U_DungeonMountBaseUpdate_Escape <-
{
  uint32   monsterID;            //逃跑的怪物id
  uint16   escape_score;       // 现在逃跑点
};
// Buff球信息
struct  Buff{
	uint64  id;             // 实例ID
	int  buff_data_id;//BUFF的配置表ID
};

struct  BuffInfo
{
	uint64	playerId; //玩家id
	vector<Buff> buffs; //玩家获得的buff球列表
};
// 同步BuffInfo
struct GS2U_BuffInfo <-
{
	BuffInfo buffinfo;
};

// Buff球拾取
struct U2GS_TakeBuffObject ->
{
    uint64  id;       			// Buff球实例ID
};
struct GS2U_TakeBuffObject <-
{
    uint64	playerID;			// 拾取玩家
    uint64  id;       			// Buff球实例ID
	uint32  dataID;         	// Buff球配置ID
    uint32  errorCode;          // 0-成功，非0-错误原因
};

//Buff球使用
struct U2GS_UseTakeBuffObject ->
{
    uint64  id;       			// Buff球实例ID
};
struct GS2U_UseTakeBuffObject <-
{
    uint64  id;       			// Buff球实例ID
    uint32  dataID;         	// Buff球配置ID
    uint32  errorCode;          // 0-成功，非0-错误原因
};


// =========================坐骑副本 end============

// =========================== 主线副本 start =======================
// 主线副本结构
struct mainlineCopyMap
{
	uint32 dungeon_id; // 关卡ID
	uint8 times; // 今日已挑战次数
	uint8 reset_times; // 今日已重置次数
	uint8 star; // 最大通关星数
};

struct mainlineCopyMapChapter
{
	uint16 chapter_id;         // 章节id
	vector<uint8> award_star_list; // 已领取的星级奖励序号
	vector<mainlineCopyMap> list; // 关卡信息
};

// 请求主线副本章节关卡信息
struct U2GS_getMainlineCopyMsg ->
{
	vector<uint32> chapter_list;
};
struct GS2U_getMainlineCopyMsgRet <-
{
	vector<mainlineCopyMapChapter> list;
};
// 后端推送全部的
struct GS2U_getMainlineCopyMsgAll <-
{
	vector<mainlineCopyMapChapter> list;
};

// 进入主线副本
struct U2GS_enterMainlineCopyMap ->
{
	uint32 dungeon_id; // 关卡ID
};
struct GS2U_enterMainlineCopyMapRet <-
{
	uint32 dungeon_id; // 关卡ID
	uint32 error_code; // 错误码
};

struct U2GS_mainlineCopyReultE ->
{
   uint8	keyindex;
   binary	info; // U2GS_mainlineCopyReult 的二进制加密信息
};

// 主线副本挑战结果
struct U2GS_mainlineCopyReult ->
{
	uint32 dungeon_id;
	uint8  result; // 1-成功 0-失败
	uint64 hp; // 剩余血量
	vector<key_value> eval_cond_list; // key 条件类型 value 参数
};

// 主线副本挑战结果返回
struct GS2U_mainlineCopyReultRet <-
{
	uint32 dungeon_id;
	uint8  result; // 1-成功 0-失败
	vector<key_value> eval_cond_list; // key 条件类型 value 参数
	vector<Dialog_Item>  itemList;
	vector<EqInfo>       equipmentList;
	vector<Dialog_Coin>  coinList;
	vector<Dialog_Item>  firstItemList;
	vector<EqInfo>       firstEquipmentList;
	uint64               exp;
	uint8 times; // 今日已挑战次数
	uint8 star; // 最大通关星数
	uint32 error_code;
};

// 领取章节宝箱奖励
struct U2GS_getMainlineChapterAward ->
{
	uint16 chapter_id;         // 章节id
	uint8  index;              // 序号
};
struct GS2U_getMainlineChapterAwardRet <-
{
	uint16 chapter_id;         // 章节id
	uint8  index;              // 序号
	uint32 error_code; // 错误码
};

// 扫荡主线副本
struct U2GS_MopUpMainlineCopyMap->
{
	uint32 dungeon_id;
};

// 扫荡主线副本
struct GS2U_MopUpMainlineCopyMapRet <-
{
	uint32 error_code; // 错误码
	uint32 dungeon_id;
	vector<Dialog_Item>  itemList;
	vector<EqInfo>       eq_list;
	vector<Dialog_Coin>  coinList;
	uint64               exp;
};

// 主线副本次数重置
struct U2GS_mainlineCopyMapResetTimes ->
{
	uint32 dungeon_id; // 关卡ID
};
struct GS2U_mainlineCopyMapResetTimesRet <-
{
	uint32 dungeon_id; // 关卡ID
	uint32 error_code; // 错误码
};

// 主线副本三星秒杀通关
struct U2GS_mainlineCopyMapSeckill ->
{
	uint32 dungeon_id;	// 关卡id
};

// 主线副本三星秒杀通关
struct GS2U_mainlineCopyMapSeckillRet <-
{
	uint32 error_code;	// 错误码
	uint32 dungeon_id;
	vector<Dialog_Item>  itemList;
	vector<EqInfo>       eq_list;
	vector<Dialog_Coin>  coinList;
	uint64               exp;
};

// =========================== 主线副本 end =========================

// =========================== 流程孵蛋 start =========================
struct egg_info {
   uint8    egg_id;           // 孵化Id	
   uint32  start_time;     // 开始计时的时间戳	
   uint32  end_time;     // 根据加速万分比算出的完成孵化时间戳
   uint64  look_pet;     // 照看宠物的Uid
   uint8   is_finish;       // 是否完成孵化 0 未完成；1 幼龙，2 巨龙
};

// 功能开启推送
struct GS2U_DragonEggFuncOpenRet <-
{
    uint8 is_open; // 0未开启，1开启				  		
	
};

// 更新龙蛋
struct GS2U_DragonEggUpdateRet <-
{
    vector<egg_info>  eggs;				  		
	
};

//  获得龙蛋
struct U2GS_GetDragonEgg ->
{
   uint8 egg_id;  //孵化id
};

struct GS2U_GetDragonEggRet <-
{
   uint8 egg_id;  //孵化id
   uint32 error_code;
};


// 宠物照看
struct U2GS_LookAfterEgg ->
{
   uint8 egg_id; // 蛋的id
   uint64 pet_uid; // 照看宠物的uid
};

struct GS2U_LookAfterEggRet <-
{
   uint8 egg_id; // 蛋的id
   uint64 pet_uid; // 照看宠物的uid
   uint32 error_code;
};

// 孵化完成
struct U2GS_HatchComplete ->
{
   uint8 egg_id; // 蛋id
};

struct GS2U_HatchCompleteRet <-
{
   uint8 egg_id; // 蛋id
   uint64 pet_uid; // 激活宠物uid 
   uint32 error_code;		
};

// 孵蛋二期 ==========
// 开始孵化
struct U2GS_EggGrowth ->
{
};
struct GS2U_EggGrowth <-
{
	uint32	error_code;
};
// 更新龙蛋 
struct GS2U_hatch_info <-
{
	vector<egg_info> 	eggs;		// 孵化信息
	uint8				is_reward;	// 是否有宝箱
	vector<uint8>		ac_list;	// 已激活龙晶列表
};
// 注入能量
struct U2GS_hatch_add_energy ->
{
	uint8	id;		// 龙晶id
	uint8	type;	// 加速类型
};
struct GS2U_hatch_add_energy <-
{
	uint32	error_code;
	uint8	id;		// 龙晶id
	uint8	type;	// 加速类型
};

// 领取二期宝箱
struct U2GS_hatch_reward ->
{
};
struct GS2U_hatch_reward <-
{
	uint32	error_code;
};

// 巨龙孵化完成
struct U2GS_HatchComplete2 ->
{
};
struct GS2U_HatchComplete2 <-
{
	uint32	error_code;		
	uint64	pet_uid; 	// 孵化幼龙宠物uid
	uint64	new_pet_uid; // 新宠物uid
};
// =========================== 流程孵蛋 end =========================

// 查看玩家：简单查看
struct U2GS_player_view_base ->
{
	uint64  player_id;  			// 玩家Id
    uint8   type;                   // 类型：0-其他查看、1-竞技场查看
};
struct GS2U_player_view_base <-
{
	uint64  player_id;  			// 玩家Id
    uint8   type;                   // 类型：0-其他查看、1-竞技场查看
	uint16  error;					// 0-成功，非0-错误原因
    uint16  server_id;
    string  server_name;            // 服务器名字
	uint32  head_id;                // 头像Id
	uint8   sex;                    // 性别
	uint8   vip;					// Vip等级
	uint16  career;					// 玩家职业（非转职职业）
	uint16  level;					// 玩家等级
	team_view   team;				// 队伍
	guild_view  guild;				// 战盟
	uint32  head_frame;				// 头像框ID
	string  player_name;			// 玩家名字
	uint64  battle_value;			// 总战力
	uint32  nationality_id;        // 区域id
    vector<pet_info>  pet_list;  // 宠物列表
    vector<PetPos>    pos_list;  // 宠物位置
    uint32  param1;         // 附加参数：竞技场积分
    uint32  param2;         // 附加参数：竞技场排名
};

// 查看奖杯
struct view_cup
{
	uint32	cup_id;		// 奖杯id
	uint16	level;		// 奖杯品质
};
// 查看黄金契约
struct view_astro
{
	uint8	rare;	// 品质
	uint16	num;	// 数量
};
// 查看玩家：完整查看
struct U2GS_player_view ->
{
	uint64  player_id;  			// 玩家Id
    uint8   type;                   // 类型：0-其他查看、1-竞技场查看
};
struct GS2U_player_view <-
{
	uint32  error;					// 0-成功，非0-错误原因
	uint64  player_id;  			// 玩家Id
    uint8   type;                   // 类型：0-其他查看、1-竞技场查看
	string  name;					// 玩家名字
	uint16  level;					// 玩家等级
	uint64  battle_value;			// 总战力
	uint32  head_id;                // 头像Id
	uint32  head_frame;				// 头像框ID
	uint8   sex;                    // 性别
	uint8   vip;					// Vip等级
	uint32  nationality_id;        // 区域id
	guild_view  				guild;				// 战盟
	wedding_view  				wedding;			// 伴侣
	vector<role_view>  			role_list;			// 角色列表
	vector<role_skill>			role_skill_list;    // 角色技能列表
    vector<pet_info>  			pet_list;  			// 宠物列表
	vector<key_2value>			eq_pos;				// 装备位置强化<部位,段,阶>
	vector<key_value>			gem_lv;				// 宝石等级<Type, Lv> Type 1绿/2红/3黄/4核心
	uint32	shouling_lv;			// 兽灵等级
	uint32	yiling_lv;				// 翼灵等级
	vector<uint32>				mount_list;			// 激活坐骑配置列表
	vector<uint32>				wing_list;			// 激活翅膀配置列表
	vector<constellation_info>	constellation_list;	// 泰坦信息
	vector<uint32>		fashion_id;			// 时装信息
	uint16	head_num;			// 激活头像数量
	uint16	head_frame_num;		// 激活头像框数量
	uint16	chat_bubble_num;	// 激活聊天气泡数量
	uint16	dg_num;				// 神像激活数量
	uint16	db_statue_num;		// 神像翅膀装配数量
	uint16	dg_weaopn_num;		// 圣装装配数量
	vector<key_value>	eq_collection;	// 装备收藏 <阶,数量>
	vector<uint32>		relic_list;		// 激活圣物
	vector<view_cup>	cup_list;		// 激活奖杯
	uint16	weapon_suit;		// 神兵套装
	uint16	weapon_main;		// 神兵主手
	uint16	weapon_sup;			// 神兵副手
	vector<view_astro>	astro_list;		// 激活黄金契约	
  	vector<key_big_value>  title_property_list;	// 称号属性列表
};

// 对象护盾值
struct GS2U_object_shield <-
{
	uint64     		object_id;       //对象ID(角色ID、怪物ID)
	uint64			value;		//HP
};

// 抽奖送vip
struct U2GS_draw_vip ->
{

};
struct GS2U_draw_vip <-
{
	uint32	error_code;	// 错误码
	uint8	type;		// 激活1/增加经验0
};


// 服务器组id同步
struct GS2U_servar_group_cfg_sync <-
{
	uint8   type;		// 1 首充
	uint8   group_id;   // 分组id
};

// =========================== 周活跃通行证 start =========================
struct U2GS_sync_active_pass ->
{
	
};
struct GS2U_sync_active_pass <-
{
	uint16			active;		// 周活跃积分
	vector<uint16>	free_gift;	// 免费已领取奖励
	vector<uint16>	pay_gift;	// 付费已领取奖励
	uint32			reset_time;	// 下次刷新时间
	uint8			is_pay;		// 是否付费 1是/0否
	uint16			player_lv;	// 起始等级
};

// 领取奖励
struct U2GS_get_active_pass_reward ->
{
	uint16	id;			// 奖励段位
};
struct GS2U_get_active_pass_reward <-
{
	uint32	error_code;	// 错误码
	uint16	id;			// 奖励段位
};

// 开通付费
struct U2GS_open_active_pass_pay ->
{
	uint16	id;
};
struct GS2U_open_active_pass_pay <-
{
	uint16	id;
	uint32	error_code;	// 错误码
	uint8	is_first;	// 是否首次开通
};
// =========================== 周活跃通行证 end =========================
//-------------- 幸运转盘start -----------
// 钻石幸运转盘
struct WheelLuckDiamond
{
	uint16 num;			// 次数
	uint32 condition;	// 需要充值钻石数
	uint8 location;		// 转盘位置
	key_2value award;   // 奖励{参数1，参数2，参数3}
	uint8 level;		// 0：普通奖励 1：大奖 2：特奖
};

// 鸿运当头转盘
struct WheelGoodFortune
{
	uint32 condition;	// 每次充值钻石数
	vector<uint32> award_show; //展示外圈钻石
	vector<uint16> multiple_show; //展示内圈倍数	
	uint16 curr_type;   // 奖励货币类型
	uint32 max_chance;  // 抽奖上限
	uint16 double_award_total; // 暴击值上限
    string probability_text;  // 概率公式文字
	uint32 double_notice; // 暴击公告条件
};

// 中奖记录
struct WinRecord
{
	string name;		
	uint8 sex;
	uint32 cfg_id;      // 中奖物品
	uint32 amount;		// 中奖数量
	uint8 multiple;		// 倍数
	uint8 double_mul;   // 双倍数
};

struct GS2U_wheel_luck_diamond_ret <-
{
	uint32				err_code;		// 错误码
	uint32				id;				// 活动id
	vector<WheelLuckDiamond> cfg_list; // 配置
	uint32              recharge_num; //  已充值钻石数
	uint16              has_drawn_times; // 已抽奖次数
	vector<uint16>		draw_list; // 已抽奖位置序号
};

struct GS2U_wheel_good_fortune_ret <-
{
	uint32				err_code;		// 错误码
	uint32				id;				// 活动id
	WheelGoodFortune 	cfg_list; // 配置
	uint32              recharge_num; //  已充值钻石数
	uint16              lucky_value; // 当前幸运值
	uint16              has_drawn_times; // 已抽奖次数
};


// 幸运转盘抽奖
struct U2GS_wheel_luck_diamond_draw ->
{
	uint32			   id;			// 活动id
	uint8              one_key;         // 一键抽奖 0 否 1 是
};
struct GS2U_wheel_luck_diamond_draw_ret <-
{
	uint32				err_code;		// 错误码
	uint32				id;			// 活动id
	uint8               one_key;        // 一键抽奖 0 否 1 是
	uint16				award_times;    // 抽完后的累计次数
	vector<uint16>		draw_pos;		// 本次抽奖的位置
};

// 鸿运转盘抽奖
struct U2GS_wheel_good_fortune_draw ->
{
	uint32			   id;			// 活动id
	uint8              one_key;         // 一键抽奖 0 否 1 是
};
struct GS2U_wheel_good_fortune_draw_ret <-
{
	uint32				err_code;		// 错误码
	uint32				id;			// 活动id
	uint8               one_key;         // 一键抽奖 0 否 1 是
	uint16              lucky_value; // 当前幸运值
	vector<key_2value>	award;          // {数量，倍数，暴击倍数}
};

// 转盘抽奖记录
struct U2GS_wheel_good_luck_record ->
{
	uint32				id;			// 活动id
	uint8               type;            // 1-幸运 2-鸿运
};
struct GS2U_wheel_good_luck_record_ret <-
{

	uint32				id;			// 活动id
	uint8               type;            // 1-幸运 2-鸿运
	vector<WinRecord>	record;         // 

};
//-------------- 幸运转盘end -------------

//-------------- 英雄国度start -------------
// 建筑信息
struct PetCityBuild
{
	uint16	id;		// 建筑id
	uint16	lv;		// 等级
	uint32	time;	// 升级完成时间（0表示没有在升级）
	uint64	param;	// 星光祭坛-已存储家园币；装备工坊-协助英雄；次元召唤-消耗道具；研究圣所-选择英雄
	uint32	param2;	// 装备工坊-选择图纸/到时间后获得的奖励道具；研究圣所-升级序号
	uint32	make_time;	// 星光祭坛-开始储存时间；次元召唤阵召唤/装备工坊-打造结束时间；研究圣所-研究结束时间
	vector<key_value>	lv_list;	// 研究圣所/力量神像等级列表<序号，等级>
	vector<key_2value>	pray_list;	// 祈愿所<位置-道具id-结束时间>
};
// 任务
struct PetCityTask
{
	uint16	task_id;	// 任务id
	uint32	progress;	// 任务进度 
	uint8	is_reward;	// 是否已领取奖励（1是/0否）
};

// 同步信息
struct U2GS_pet_city_info ->
{
	
};
struct GS2U_pet_city_info <-
{
	vector<PetCityBuild>	build_list;
};

// 同步任务
struct U2GS_pet_city_task ->
{
	
};
struct GS2U_pet_city_task <-
{
	vector<PetCityTask>		task_list;
};

// 单独建筑同步
struct U2GS_pet_city_update ->
{
	uint16	id;	// 建筑id
};
struct GS2U_pet_city_update <-
{
	vector<PetCityBuild>	build_list;
};

// 单独任务同步
struct GS2U_pet_city_task_update <-
{
	vector<PetCityTask>		task_list;
};

// 建筑升级
struct U2GS_pet_city_build_level_up ->
{
	uint16	id;			// 建筑id
};
struct GS2U_pet_city_build_level_up <-
{
	uint32	error_code;	// 错误码
	uint16	id;			// 建筑id
};

// 加速建造
struct U2GS_pet_city_quick_build ->
{
	uint16	id;			// 建筑id
};
struct GS2U_pet_city_quick_build <-
{
	uint32	error_code;	// 错误码
	uint16	id;			// 建筑id
};

// 研究圣所研究升级
struct U2GS_pet_city_research ->
{
	uint16	id;			// id
	uint64	pet_id;		// 选择英雄
};
struct GS2U_pet_city_research <-
{
	uint32	error_code;	// 错误码
	uint16	id;			// id
	uint64	pet_id;		// 选择英雄
};

//领取研究圣所 升级
struct U2GS_pet_city_research_reward ->
{
};

struct GS2U_pet_city_research_reward <-
{
	uint32	error_code;	// 错误码
};

// 次元召唤
struct U2GS_pet_city_call ->
{
	uint32	id;			// 图纸
};
struct GS2U_pet_city_call <-
{
	uint32	error_code;	// 错误码
	uint32	id;			// 图纸
};

// 领取次元召唤阵奖励
struct U2GS_pet_city_call_reward ->
{

};
struct GS2U_pet_city_call_reward <-
{
	uint32	error_code;	// 错误码
};

// 领取星光祭坛奖励
struct U2GS_pet_city_altar_reward ->
{
	uint16	id;			// 建筑id
};
struct GS2U_pet_city_alter_reward <-
{
	uint32	error_code;	// 错误码
	uint16	id;			// 建筑id
};

// 装备打造
struct U2GS_pet_city_equip_make ->
{
	uint64	hero_id;	// 英雄
	uint32	id;			// 图纸id
};
struct GS2U_pet_city_equip_make <-
{
	uint32	error_code;	// 错误码
	uint64	hero_id;	// 英雄
	uint32	id;			// 图纸id
};

// 获取装备打造奖励
struct U2GS_pet_city_equip_make_reward ->
{

};
struct GS2U_pet_city_equip_make_reward <-
{
	uint32	error_code;	// 错误码
};

// 祈愿
struct U2GS_pet_city_pray ->
{ 
	uint8	pos;		// 位置
	uint32	item;		// 材料道具
};
struct GS2U_pet_city_pray <-
{
	uint32	error_code;	// 错误码
	uint8	pos;		// 位置
	uint32	item;		// 材料道具
};

// 获取祈愿奖励
struct U2GS_pet_city_pray_reward ->
{
	uint8	pos;		// 位置
};
struct GS2U_pet_city_pray_reward <-
{
	uint32	error_code;	// 错误码
	uint8	pos;		// 位置
};

// 完成任务领奖
struct U2GS_pet_city_task_complete ->
{
	uint32	id;			// 任务id
};
struct GS2U_pet_city_task_complete <-
{
	uint32	error_code;	// 错误码
	uint32	id;			// 任务id
};

//-------------- 英雄国度end -------------

//-------------- 英雄装备start -----------
// 英雄装备结构
struct bless_eq
{
	uint64			uid;			// 配饰uid
	uint32			cfg_id;			// 配置id
	uint8			bind;			// 绑定状态
	uint32			int_lv;			// 强化等级
	vector<key_value>	rand_prop;	// 极品属性 (属性库,属性ID)
	uint8			pos;			//部位
};

// 英雄装备部位结构
struct bless_eq_pos
{
	uint64			uid;			// 英雄装备uid
	uint32			cfg_id;			// 配置id
	uint8			pos;			// 部位
	uint8			stage;			// 阶段数
	uint8 			battle_pos;		// 出战位置
	vector<uint32>	cast_prop;		// 祝福属性
	vector<uint32>	cast_prop_temp;	// 祝福属性(保留)
	vector<key_big_value> soul_stone_list; // 装配的魂石 key:pos value:uid
};

// 英雄装备上线同步
struct GS2U_BlessEqSync <-
{
	vector<uint8>			stage_list;		//玩家各出战位 阶段等级
	vector<bless_eq>		orn_list;		// 英雄装备列表
	vector<bless_eq_pos>	orn_pos_list;	// 英雄装备部位结构列表
};

// 英雄装备更新
struct GS2U_BlessEqUpdate <-
{
	uint8  	op;								//操作  0 更新或添加 1删除
	vector<bless_eq>		orn_list;		// 英雄装备列表
};

// 英雄装备部位结构更新
struct GS2U_BlessEqPosUpdate <-
{
	vector<bless_eq_pos>	orn_pos_list;	// 英雄装备部位结构列表
};

// 英雄装备穿戴操作
struct U2GS_BlessEqOp ->//祝福修改-添加一个字段 前端发送的穿戴请求 增加出战位置数据  问问加不加//	uint8   battle_pos; // 出战位置
{
	uint8	op;			// 操作(0:装备 1:卸下)
	uint64	uid;		// 英雄装备uid
	uint8	stage;			// 阶段位
	uint8   battle_pos;	// 出战位置
};

// 英雄装备穿戴操作结果
struct GS2U_BlessEqOpRet <-
{
	uint32	err_code;			// 错误码
	uint8	op;					// 操作(0:装备, 1:卸下)
	uint64	uid;				// 英雄装备uid
	uint8   pos;				// 孔位置
	uint8	stage;				// 阶段位
	uint8   battle_pos;			// 出战位置
	vector<key_value>  suitlist;	// 套装效果：key为套装件数 value1为套装序号
};

// 英雄装备一键穿戴操作
struct U2GS_BlessEqOneKeyOp ->//添加字段 出战位置
{
	uint8			op;			// 操作(0:装备)
	vector<uint64>	uids;		// 英雄装备uid列表
	uint8	stage;				// 阶段位
	uint8 	battle_pos ;		// 出战位置
};

// 英雄装备一键穿戴操作结果
struct GS2U_BlessEqOneKeyOpRet <-
{
	uint32	err_code;			// 错误码
	uint8	op;					// 操作(0:装备, 1:卸下)
	vector<uint64>	uids;		// 英雄装备uid列表
	uint8	stage;				// 阶段位
	uint8 	battle_pos ;		// 出战位置
	uint8	stagelv;			//玩家当前出战位 新的阶段等级
	vector<key_value>  suitlist;	// 套装效果：key为套装件数 value1为套装序号
};


// 英雄装备 祝福
struct U2GS_BlessEqCast ->
{
	uint8   pos;			// 孔位置
	uint8	stage;			// 阶段位
	uint8   battle_pos;		// 出战位置
	uint8	op;				// 操作(0:祝福, 1:替换)
};

// 英雄装备 祝福结果
struct GS2U_BlessEqCastRet <-
{
	uint32	err_code;			// 错误码
	uint8   pos;				// 孔位置
	uint8	stage;				// 阶段位
	uint8   battle_pos;			// 出战位置
	uint8	op;					// 操作(0:祝福, 1:替换, 2:放弃)
	bless_eq_pos	bless_eq_pos;// 新的英雄装备部位信息
};


// 英雄装备魂石一键镶嵌/卸下
struct U2GS_BlessEqSoulStoneOP ->
{
	uint8   pos;			// 孔位置
	uint8	stage;			// 阶段位
	uint8   battle_pos;		// 出战位置
	uint8	op;				// 操作(1:镶嵌 2:卸下)
	vector<key_big_value>  op_pos; // 操作镶嵌位 key:镶嵌位 value:uid
};

// 英雄装备魂石一键镶嵌/卸下结果
struct GS2U_BlessEqSoulStoneOPRet <-
{
	uint32	err_code;			// 错误码
	uint8   pos;				// 孔位置
	uint8	stage;				// 阶段位
	uint8   battle_pos;			// 出战位置
	uint8	op;					// 操作(1:镶嵌 2:卸下)
	vector<key_big_value>  op_pos; // 操作镶嵌位 key:镶嵌位 value:uid
};


//-------------- 英雄装备end -------------

//-------------- vip礼包 -------------
struct vipDirectPurchaseStc
{
	uint16 id;						// 直购id
	uint8 type;						// 购买类型
	key_value curr_type;			// 货币价格
	string direct_purchase_code;	// 直购价格
	vector<key_value> discount;		// 原价显示值
	uint16 discount2;				// 折扣万分比
	vector<indexTypeItem> item_new; // 奖励物品
	uint16 buy_times;				// 限购次数
	uint16 has_buy_times;			// 已购买次数
};

struct vipDirectPurchase
{
	uint16 vip_lv;
	vector<vipDirectPurchaseStc> list;
};

struct U2GS_vip_direct_purchase_packs ->
{
};
struct GS2U_vip_direct_purchase_packs <-
{
	vector<vipDirectPurchase> packs_list;
};

struct U2GS_vip_direct_purchase_buy ->
{
	uint16	id;			// 直购id
};
struct GS2U_vip_direct_purchase_buy_ret <-
{
	uint16	id;			// 直购id
	uint32	error_code;	// 错误码
};
//-------------- vip礼包 -------------
//-------------- 运营活动-云购 -------------
struct cloud_lucky_award_record
{
	string		name;		// 玩家名字
	uint8 		sex;        // 玩家性别
	uint32		time;		// 时间戳
	vector<itemInfo> item_list;		// 物品信息
	vector<CoinInfo> currency_list;	// 货币信息
	vector<EqInfo> eq_list;		// 装备信息
};

struct cloud_lucky_buy_record
{
	string		name;		// 玩家名字
	uint8 		sex;        // 玩家性别
	uint32		num;		// 数量
	uint32		time;		// 时间戳
};

// 抽奖返回
struct GS2U_drawn_cloud_lucky_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint16		times;				// 抽奖次数
	uint32		itemCount;			// 物品库存数量	
	vector<wheelItem> itemSp_list;	// 特殊物品奖励
	vector<wheelItem> itemCom_list;	// 普通物品奖励
	vector<uint32>    lucky_num;    // 我的幸运数字
	uint16     total_times;         // 全服次数
};

// 云购转盘返回
struct GS2U_cloud_lucky_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	uint8       is_settle;          // 是否结算
	wheelBaseInfo wheel_base_info;
	uint32      drawn_times;         // 个人总抽奖次数
	uint32      total_drawn_times;   // 全服总抽奖次数
	uint32		itemCount;			// 物品库存数量
	uint16      single_limit;       // 个人限购
	uint16      full_limit;         // 全服限购
	vector<uint16> display_pro;     // 展示几率
	uint32      open_time;          // 开始出售时间戳
	uint32      close_time;         // 活动开奖时间戳
	uint16      purchase_time;      // 开奖前X秒不限购
	vector<indexTypeItem> award_item; // 大奖
	vector<ModelInfo> model;	// 大奖模型
	vector<key_value> cond_para; // 个人累计奖励次数
	vector<indexTypeItem> award_para_new1; // 个人累计奖励
	uint16   total_limit; // 领取全服奖励所需购买次数
	vector<key_value> total_cond_para; // 全服累计奖励次数
	vector<indexTypeItem> award_para_new2; // 全服累计奖励
	vector<uint32>    lucky_num;      // 我的幸运数字
	string     winner_name;          // 今日大奖得主名字
	uint32     winner_number;		// 今日大奖幸运数字
	uint32     stage_award_mask;    // 云购领取状态 bit0~15 全服领取进度 bit16~31 自己领取进度
};

// 云购领取阶段奖励
struct U2GS_cloud_lucky_stage_award ->
{
  uint32 id;	 // 活动入口ID
  uint8  type;   // 0-自己的进度  1-全服的进度
};
struct GS2U_cloud_lucky_stage_award_ret <- 
{
  uint32 id;	 // 活动入口ID
  uint32 err_code;
  uint8  type;   // 0-自己的进度  1-全服的进度
  vector<uint8>  stage; // 领取的序号
};


// 中奖纪录
struct U2GS_cloud_lucky_award_record ->
{
	uint32 id;	 // 活动入口ID
};
struct GS2U_cloud_lucky_award_record_ret <-
{
	uint32 id;	 // 活动入口ID
	vector<cloud_lucky_award_record> list;	// 中奖纪录
};

// 购买记录
struct U2GS_cloud_lucky_buy_record ->
{
	uint32 id;	 // 活动入口ID
};

struct GS2U_cloud_lucky_buy_record_ret <- 
{
	uint32 id;	 // 活动入口ID
	vector<cloud_lucky_buy_record> list;	// 购买纪录
};

// 大奖结算
struct GS2U_cloud_lucky_settle_sync <- 
{
  	uint32 	   id;	 // 活动入口ID
  	uint32     total_drawn_times;   // 全服总抽奖次数
	string     winner_name;          // 今日大奖得主名字
	uint32     winner_number;		// 今日大奖幸运数字
};
//-------------- 运营活动-云购 -------------
//-------------- 运营活动-消费排行 -------------
struct consume_top_player
{
	string  player_name;
	uint8   player_sex;
	uint16  rank;
	uint32  value;
};

struct consume_top_day
{
	uint8 day; // 第几天
	vector<consume_top_player> top_list; // 排名列表
	vector<playerModelUI> top_model; // 玩家外观展示
};

// 消费排行返回
struct GS2U_consume_top_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	uint8       settle_type;        // 结算类型
	vector<uint32> type;            // 类型|榜单人数|上榜条件
	vector<indexTypeItem> reward;   // 奖励
	uint16      my_rank;            // 我的排名
	uint32      my_value;			// 我的值
	consume_top_day today_top;      // 今日排名
	uint32      end_time;           // 结算时间
};

// 查看往日排名
struct U2GS_consume_top_one_day ->
{
	uint32 id;	 // 活动入口ID
	uint8 day; // 第几天
};

struct GS2U_consume_top_one_day_ret <- 
{
	uint32 id;	 // 活动入口ID
	uint8 day; // 第几天
	consume_top_day today_top;	// 排名
};

//-------------- 运营活动-消费排行 -------------
//-------------- 运营活动-天命转盘 -------------
struct tm_wheel_draw_pool
{
	uint32 id;  // 抽奖Id
	uint32 consWay; // 消耗积分
	vector<wheelRewardItem> award;// 奖励
	vector<key_value>  notice; // 极品标签
	string probability_text; // 概率公示
};

struct GS2U_tm_wheel_info_ret <-
{
	uint32		id;					// 活动入口ID
	uint32      err;                // 错误码
	vector<uint32> activitys;       // 调用顺序
	key_2value  integral;           // 积分途径
	vector<key_value> recommend_new;       // 积分获得途径
	vector<key_value> active_base_id_show;       // 运营活动途径
	vector<uint16> recommend_show;  // 积分获取途径上是否显示推荐标签
	vector<string>         recommend_icon;  // 跳转功能的icon图
	vector<tm_wheel_draw_pool> draw_pool; // 奖励库
	uint32   draw_id;    // 当前抽奖id
	uint32   recharge;  // 充值数
	uint32   consume_score; // 已消耗积分
	vector<uint32> get_pos; // 已获得奖励编号
};

struct GS2U_drawn_tm_wheel_ret <-
{
	uint32		id;					// 活动入口ID
	uint32		err;				// 错误码
	uint32      times;          	// 抽奖次数
	uint32   	draw_id;    		// 当前抽奖id
	uint32   consume_score; 		// 已消耗积分
	vector<uint32> get_pos; 		// 获得奖励编号
};

// 抽奖记录查看
struct U2GS_tm_wheel_record ->
{
	uint32 id;	 // 活动入口ID
};

struct GS2U_tm_wheel_record_ret <- 
{
	uint32 id;	 // 活动入口ID
	vector<wheel_record>	my_record_list;		// 个人抽奖记录
	vector<wheel_record>	server_record_list;		// 全服抽奖记录
};

//-------------- 运营活动-天命转盘 -------------

//-------------- 回归 -------------
// 回归状态同步
struct GS2U_ReturnStateSync <-
{
	uint32			end_time;			// 触发结束时间
	uint32			bind_server_id;		// 绑定服务器id
	uint32			total_recharge;		// 累计充值
	vector<uint32>	server_list;		// 回归服务器列表
};

// 绑定服务器
struct U2GS_BindReturnServerReq ->
{
	uint32			server_id;			// 服务器id
};
struct GS2U_BindReturnServerRet <-
{
	uint32			err_code;			// 错误码
	uint32			server_id;			// 服务器id
};

// 新服活动同步
struct GS2U_ReturnAcSync <-
{
	uint32				end_time;		// 结束时间
	uint32				total_recharge;	// 累计充值
	bool				award_vip;		// vip经验领取
	vector<uint32>		award_level;	// 已领列表
	vector<uint32>		award_recharge;	// 已领列表
};

// 新服活动领奖
struct U2GS_ReturnAcAwardReq ->
{
	uint8			type;				// 0-vip经验，1-等级奖励，2-充值奖励
	uint32			task_id;			// 任务id
};
struct GS2U_ReturnAcAwardRet <-
{
	uint32			err_code;			// 错误码
	uint8			type;				// 1-等级奖励，2-充值奖励
	uint32			task_id;			// 任务id
};

// 红点
struct GS2U_ReturnAcRedPoint <-
{
	vector<CommonRedPoint> red_list;	// 红点
};

//------------ 回归 end -----------
//-------------- 自选直购 start-------------

struct selectgoodItem
{
	uint8	index;		// 选择位置序号	
	uint8 	sign;		// 奖励序号(同一位置仅一个)
	uint8   type;       // 类型 1道具 2货币 3装备
	uint32	itemID;		//物品ID
	uint32	count;		// 数量
	uint16  quality;    // 品质
	uint16  star;       // 星级
	uint8	bind;		// 是否绑定 0 非绑  1 绑定
	uint8	effect;		// 是否转圈特效  0 不显示  1显示
	uint8  	islimit;	// 是否被选择后，下一次还能选择 0 不能  1能
};

//单个自选礼包数据
struct selectgoods
{
	uint8 gift_id;			//礼包id
	string 		text;		//礼包名称
	uint8 	itemNew2Num;				//自选奖励，选择框格子数量
	vector<indexTypeItem> fixed_rewards;//固定奖励配置 奖励序号不填
	vector<selectgoodItem> select_rewards;//自选奖励配置
	key_value 	currType;				//货币价格 key=货币ID，value=数量
	string 		directPurchase;			//直购商品ID
	vector<key_value> 	discount;		//折扣参数万分比 
	key_value 	conditionType			//可购买条件（条件，参数）0.代表无需条件 1.玩家等级，参数=对应等级 2、vip等级，参数=对应等级
	key_value 	showType;				//可显示条件（条件，参数）0.代表无需条件 1.玩家等级，参数=对应等级 2、vip等级，参数=对应等级
	key_2value 	limit;					//(类型，参数1，参数2）0：表示不限购  类型1：个人每日限购，参数1=限购次数，参数2=0；  类型2：个人活动期间限购，参数1=限购次数，参数2=0；
	uint8 		redDot;					//商品是否有登录红点 1、有  0、无  CurrType、DirectPurchase两个字段都配置为0时，表示免费领取
	uint8 		mustBuyLabel;			//显示必买标签 1、有 0、无
	uint16 		times;					//当前已购买次数
	vector<key_value>	item_list;		//玩家已购买的道具列表  [{选择位置序号,奖励序号},{选择位置序号,奖励序号}]
	vector<key_value>	select_item;	//玩家当前选择的道具列表 [{选择位置序号,奖励序号},{选择位置序号,奖励序号}]
	vector<key_value>	last_item_list;	//上次购买的道具列表 [{选择位置序号,奖励序号},{选择位置序号,奖励序号}]
};

struct GS2U_selectgoods_info_ret <-
{
	uint32 entranceId;		//活动入口id
	uint32 item;			//直购活动界面顶部道具显示 配置0，则不显示
	vector<selectgoods> gift_list;	//自选礼包列表
	uint32  error;				//错误码
};

//自选直购礼包 选择请求
struct U2GS_selectgoods_item ->
{
	uint32 entranceId;			//活动入口id
	uint8 gift_id;				//礼包id
	vector<key_value>	selectgoods_item;//选择的道具组合 [{选择位置序号,奖励序号},{选择位置序号,奖励序号}]
};

struct GS2U_selectgoods_item_ret <-
{		
	uint32 entranceId;		//活动入口id
	uint8 gift_id;			//礼包id
	uint32 error;			//错误码
};

//自选直购礼包 货币购买请求
struct U2GS_selectgoods_buy ->
{
	uint32 entranceId;			//活动入口id
	uint8 gift_id;			//礼包id
};

struct GS2U_selectgoods_buy_ret <-
{
	uint32 entranceId;			//活动入口id
	uint8 gift_id;			//礼包id
	uint32 error;			//错误码
};

//-------------- 自选直购 end-------------

//-------------- 转生BP -------------
// bp信息
struct ReBpInfo
{
	uint8				rein_lv;		// 转生等级
	uint16				buy;			// 购买项[1|2|4|...]
	uint32				score;			// 积分
	vector<key_value>	award;			// 领取项[{award_id,idx}|...]
	vector<key_2value>	ext;			// 额外数据[{type,order,num}|...]
};

// 获取信息
struct U2GS_ReBpInfoReq ->
{
};
// 整体数据替换
struct GS2U_ReBpInfoSync <-
{
	vector<ReBpInfo>	list;			// 信息列表
};
// 单条数据更新
struct GS2U_ReBpInfoUpdate <-
{
	vector<ReBpInfo>	list;			// 信息列表
};

// 领奖
struct U2GS_ReBpAwardReq ->
{
	uint8				rein_lv;		// 转生等级
};
struct GS2U_ReBpAwardRet <-
{
	uint32				err_code;		// 错误码
	uint8				rein_lv;		// 转生等级
};

// 购买积分
struct U2GS_ReBpScoreBuyReq ->
{
	uint8				rein_lv;		// 转生等级
	uint32				buy_num;		// 购买数量
};
struct GS2U_ReBpScoreBuyRet <-
{
	uint32				err_code;		// 错误码
	uint8				rein_lv;		// 转生等级
	uint32				buy_num;		// 购买数量
};

//------------ 转生BP end -----------
//-------------- 通用功能BP -------------
// bp信息
struct CommonBpInfo
{
	uint8				id;			// BP类型
	uint16              order;   	// 序号
	uint8               lv_index; 	// 等级段
	uint16				buy;		// bit1 进阶 bit2 高级
	uint32				score;		// 积分
	vector<key_value>	award;		// 领取项 key=积分等级 value = bit1进阶是否领取 bit2 高级是否领取
	uint32              reset_time; // 重置时间
};

// 整体数据替换
struct GS2U_CommonBpInfoSync <-
{
	vector<CommonBpInfo>	list;			// 信息列表
};
// 单条数据更新
struct GS2U_CommonBpInfoUpdate <-
{
	vector<CommonBpInfo>	list;			// 信息列表
};

// 领奖
struct U2GS_CommonBpAward ->
{
	uint8				id;			// BP类型
	uint16              order;   	// 序号
};
struct GS2U_CommonBpAwardRet <-
{
	uint32				err_code;		// 错误码
	uint8				id;			// BP类型
	uint16              order;   	// 序号
};

// 购买积分
struct U2GS_CommonBpScoreBuy ->
{
	uint8				id;			// BP类型
	uint16              order;   	// 序号
	uint32				buy_num;		// 购买数量
};
struct GS2U_CommonBpScoreBuyRet <-
{
	uint32				err_code;		// 错误码
	uint8				id;			// BP类型
	uint16              order;   	// 序号
	uint32				buy_num;		// 购买数量
};

//------------ 通用功能BP end -----------

//-------------- 联服公会战 -------------
// 公会信息
struct GuildWarGuild
{
	uint64				guild_id;		// 公会id
	uint32				server_id;		// 服务器id
	string				guild_name;		// 公会名
	uint8				head_icon;		// 公会图标
	uint64				battle_value;	// 公会战力
	uint32				member_count;	// 成员数
	uint32				rank_local;		// 本服排名
	uint8				draw;			// 是否已抽取 0-未抽取，1-已抽取
	uint32				rank;			// 跨服段位 1:冠军，2:亚军，3:季军, 4:4强，5:8强
};

// 轮次信息
struct GuildWarRound
{
	uint64					fight_id;		// 对战id
	uint8					round_id;		// 轮次id 常规赛：(1:分组，2-4:积分赛1-3，5:8进4，6:4进2，7:季军赛，8:冠军赛) 练习赛：(101:分组，102-107:积分赛1-6)
	uint8					group_id;		// 分组id 1-4
	vector<uint64>			guild_ids;		// 公会列表
	vector<key_big_value>	guild_camp;		// 阵营 key 1红2蓝 start_point同
	uint32					start_time;		// 开始时间
	uint32					end_time;		// 结束时间
	uint64					winner_id;		// 胜者id
	vector<big_key_value>	bet_list;		// 下注信息 [{guild_id, num}]
};

// 竞猜信息
struct GuildWarBet
{
	uint64			fight_id;			// 对战id
	uint64			winner_id;			// 竞猜胜者
	uint8			state;				// 领取状态
};

// 公会对战记录
struct GuildWarGuildRecord
{
	uint64				fight_id;		// 对战id
	uint64				guild_id;		// 公会id
	uint32				server_id;		// 服务器id
	string				guild_name;		// 公会名
	uint8				head_icon;		// 公会图标
	uint64				battle_value;	// 公会战力
	uint8				camp;			// 阵营 1红2蓝 start_point同
	vector<uint64>		members;		// 参与玩家id列表
	vector<key_value>	inspire;		// 鼓舞情况 [{type, num}]
	uint32				score;			// 总积分
	uint32				kill_num;		// 击杀数量
	uint32				kill_score;		// 击杀积分
	uint32				ocp_times;		// 占领次数
	uint32				boss_num;		// boss数量
};

// 结算公会信息
struct GuildWarGuildSeason
{
	uint64				guild_id;		// 公会id
	uint32				server_id;		// 服务器id
	string				guild_name;		// 公会名
	uint8				head_icon;		// 公会图标
	uint32				rank;			// 跨服段位 1:冠军，2:亚军，3:季军
};

// 公会对战信息
struct GuildWarFightGuild
{
	uint64				guild_id;		// 公会id
	uint32				server_id;		// 服务器id
	string				guild_name;		// 公会名
	uint8				head_icon;		// 公会图标
	uint64				battle_value;	// 公会战力
	uint8				camp;			// 阵营 1红2蓝 start_point同
	vector<uint64>		members;		// 参与玩家id列表
	vector<key_value>	inspire;		// 鼓舞情况 [{type, num}]
	uint32				score;			// 总积分
	uint32				kill_num;		// 击杀数量
	uint32				kill_score;		// 击杀积分
	uint32				ocp_times;		// 占领次数
	uint32				boss_num;		// boss数量
	uint32				member_count;	// 在地图的玩家数量
};

// 玩家对战信息
struct GuildWarFightPlayer
{
	uint64				player_id;		// 玩家id
	uint32				server_id;		// 服务器id
	uint64				guild_id;		// 公会id
	string				player_name;	// 玩家名
	uint8				player_sex;		// 玩家性别
	uint32				score;			// 总积分
	uint32				kill_num;		// 击杀数量
	uint32				kill_score;		// 击杀积分
	uint32				ocp_times;		// 占领次数
	uint32				boss_num;		// boss数量
	uint32				rank;			// 排名
};

// 旗帜
struct GuildWarFlag
{
	uint8				index;			// 序号
	uint32				data_id;		// 配置id
	uint8				type;			// 类型
	float				x;				// 坐标x
	float				y;				// 坐标y
	float				r;				// 旋转r
	uint64				uid;			// 采集物uid
	uint64				owner_id;		// 归属id
};

// boss
struct GuildWarBoss
{
	uint64				uid;			// 怪物uid
	uint32				data_id;		// 配置id
	uint32				level;			// 等级
	uint8				state;			// 状态 0-存活，1-死亡
};

// 活动状态同步
struct GS2U_GuildWarAcStateSync <-
{
	uint8					state;			// 活动状态
	uint32					start_time;		// 开始时间
	uint32					wait_time;		// 等待时间
	uint32					next_time;		// 下一阶段时间
	uint32					end_time;		// 结束时间
	vector<key_value>		timeline;		// 活动时间线
};

// 请求活动信息
struct U2GS_GetGuildWarUI ->
{
};
struct GS2U_GetGuildWarUIRet <-
{
	uint8					state;			// 活动状态
	uint32					start_time;		// 开始时间
	uint32					wait_time;		// 等待时间
	uint32					next_time;		// 下一阶段时间
	uint32					end_time;		// 结束时间
	vector<key_value>		timeline;		// 活动时间线
	vector<GuildWarGuild>	guild_list;		// 公会列表
	vector<GuildWarRound>	round_list;		// 轮次列表
	vector<GuildWarBet>		bet_list;		// 竞猜信息
	vector<GuildWarGuildRecord>	record_list;// 公会对战记录列表
};

// 抽签
struct U2GS_GuildWarRoundDrawReq ->
{
};
struct GS2U_GuildWarRoundDrawRet <-
{
	uint32			err_code;			// 错误码
	uint64			fight_id;			// 对战id
};
struct GS2U_GuildWarRoundDrawSync <-
{
	uint64			guild_id;			// 公会id
	uint64			fight_id;			// 对战id
};

// 请求轮次信息
struct U2GS_GuildWarRoundInfoReq ->
{
	vector<uint64>			fight_list;		// fight_id列表
};
struct GS2U_GuildWarRoundInfoRet <-
{
	vector<GuildWarRound>	round_list;		// 轮次列表
};

// 请求对战记录
struct U2GS_GetGuildWarGuildRecordReq ->
{
	vector<big_key_value>		key_list;	// 公会对战记录key列表 [{fight_id, guild_id}]
};
struct GS2U_GetGuildWarGuildRecordRet <-
{
	vector<GuildWarGuildRecord>	record_list;// 公会对战记录列表
};

// 竞猜下注
struct U2GS_GuildWarBetReq ->
{
	uint64			fight_id;			// 对战id
	uint64			winner_id;			// 胜者id
};
struct GS2U_GuildWarBetRet <-
{
	uint32			err_code;			// 错误码
	uint64			fight_id;			// 对战id
	uint64			winner_id;			// 胜者id
};

// 竞猜领奖
struct U2GS_GuildWarBetAwardReq ->
{
	uint64					fight_id;	// 轮次id
};
struct GS2U_GuildWarBetAwardRet <-
{
	uint32					err_code;	// 错误码
	uint64					fight_id;	// 轮次id
};

// 结算公会信息
struct U2GS_GuildWarGuildSeasonInfoReq ->
{
};
struct GS2U_GuildWarGuildSeasonInfoRet <-
{
	vector<GuildWarGuildSeason>	list;	// 结算公会信息
};

// 进图
struct U2GS_GuildWarEnterMap ->
{
	uint64			fight_id;			// 对战id
};
// 进图加载信息
struct GS2U_GuildWarLoadingInfo <-
{
	GuildWarRound			round;			// 轮次信息
	vector<GuildWarGuild>	guild_list;		// 公会列表
};

// 鼓舞
struct U2GS_GuildWarInspireReq ->
{
	uint64			fight_id;	// 对战id
	uint8			type;		// 鼓舞类型
};
struct GS2U_GuildWarInspireRet <-
{
	uint32			err_code;	// 错误码
	uint64			fight_id;	// 对战id
	uint8			type;		// 鼓舞类型
};

// 对战信息
struct GS2U_GuildWarFightInfoSync <-
{
	uint64						fight_id;	// 对战id
	uint8						round_id;	// 轮次id
	uint32						start_time;	// 开始时间
	uint32						boss_time;	// boss刷新时间
	uint32						end_time;	// 结束时间
	vector<GuildWarFightGuild>	guild_list;	// 公会信息
	vector<GuildWarFightPlayer>	player_list;// 玩家信息
	vector<GuildWarFlag>		flag_list;	// 旗帜信息
	vector<GuildWarBoss>		boss_list;	// boss信息
};
struct GS2U_GuildWarFightGuildUpdate <-
{
	vector<GuildWarFightGuild>	guild_list;		// 公会信息
};
struct GS2U_GuildWarFightFlagUpdate <-
{
	vector<GuildWarFlag>		flag_list;		// 旗帜信息
};
struct GS2U_GuildWarFightPlayerUpdate <-
{
	vector<GuildWarFightPlayer>	player_list;	// 玩家信息
};
struct GS2U_GuildWarFightBossUpdate <-
{
	vector<GuildWarBoss>		boss_list;		// boss信息
};

// 结算
struct GS2U_GuildWarFightSettle <-
{
	uint64						fight_id;	// 对战id
	uint8						round_id;	// 轮次id
	uint32						start_time;	// 开始时间
	uint32						end_time;	// 结束时间
	uint64						winner_id;	// 胜者id
	vector<GuildWarFightGuild>	guild_list;	// 公会信息
	vector<GuildWarFightPlayer>	player_list;// 玩家信息
	vector<CoinInfo>			coin_list;	// 货币信息
	vector<itemInfo>			item_list;	// 物品信息
	vector<EqInfo>				eq_list;	// 装备信息
	vector<CoinInfo>			auction_coin_list;	// 拍卖货币信息
	vector<itemInfo>			auction_item_list;	// 拍卖物品信息
	vector<EqInfo>				auction_eq_list;	// 拍卖装备信息
};

//------------ 联服公会战 end -----------
// ============================ 功能预告 ===========================
struct guide_notice_config
{
	uint32 id;                         // 功能预告图id
	uint16 pic;						   // 图片id
	uint8 type;						   // 领奖后是否不再预告
	string banner_text1;			   // banner文字1
	vector<int16> image_text1;		   // banner文字1位置
	string banner_text2;
	vector<int16> image_text2;	
	string banner_text3;
	vector<int16> image_text3;
}

struct GS2U_guide_notice_sync <-
{
	uint16 icon;                       // 主界面入口图标
	vector<guide_notice_config> notice_list; // 预告内容
	vector<indexTypeItem> item_new;	   // 奖励
	uint8 is_award;  // 今日是否领奖
};

// 功能预告 领奖
struct U2GS_guide_notice_award ->
{
};

// 功能预告 领奖返回
struct GS2U_guide_notice_award_ret <-
{
	uint32      err;        // 错误码
};
// ============================ 功能预告 ===========================
// =========================== 英雄圣装 start ===========================
// 英雄圣装结构
struct sacred_eq
{
	uint64			uid;			// 配饰uid
	uint32			cfg_id;			// 配置id
	uint8			bind;			// 绑定状态
	uint16			int_lv;			// 强化等级
	vector<uint32>	base_prop;	// 基础属性 (属性库ID)
	vector<uint32>	rand_prop;	// 极品属性 (属性库ID)
	vector<uint32>	beyond_prop;// 卓越属性 (属性库ID)
};

// 英雄圣装部位结构
struct sacred_eq_pos
{
	uint64			uid;			// 英雄装备uid
	uint8			pos;			// 部位
	vector<key_value>	bless_prop;		// 祝福属性[{1,属性库ID}{2,技能库ID}]
	vector<key_value>	bless_prop_temp;	// 祝福属性(保留)[{1,属性库ID}{2,技能库ID}]
};

// 英雄圣装数据上线同步
struct GS2U_SacredEqSync <-
{
	uint16  masterlv;							// 大师已点亮等级
	vector<sacred_eq>		sacred_eq_list;		// 英雄圣装列表
	vector<sacred_eq_pos>	sacred_eq_pos_list;	// 英雄圣装部位结构列表
};


// 英雄圣装更新
struct GS2U_SacredEqUpdate <-
{
	uint8  	op;								//操作  0 更新或添加 1删除
	vector<sacred_eq>		sacred_eq_list;	// 英雄圣装列表
};

// 英雄圣装部位结构更新
struct GS2U_SacredEqPosUpdate <-
{
	vector<sacred_eq_pos>	sacred_eq_pos_list;	// 英雄圣装部位结构列表
};

// 英雄圣装穿戴卸下操作
struct U2GS_SacredEqOp ->
{
	uint8	op;			// 操作(0:装备 1:卸下)
	uint64	uid;		// 英雄圣装uid
};

// 英雄装备穿戴操作结果
struct GS2U_SacredEqOpRet <-
{
	uint32	err_code;			// 错误码
	uint8	op;					// 操作(0:装备, 1:卸下)
	uint64	uid;				// 英雄圣装uid
};

// 英雄圣装一键穿戴操作
struct U2GS_SacredEqOneKeyOp ->//添加字段 出战位置
{
	uint8			op;			// 操作(0:装备, 1:卸下)
	vector<uint64>	uids;		// 英雄圣装uid列表
};

// 英雄圣装一键穿戴操作结果
struct GS2U_SacredEqOneKeyOpRet <-
{
	uint32	err_code;			// 错误码
	uint8			op;			// 操作(0:装备, 1:卸下)
	vector<uint64>	uids;		// 英雄圣装uid列表
};

// 英雄圣装 升级
struct U2GS_SacredEqLvUp ->
{
	uint64  uid;			//圣装uid
};
//英雄圣装升级结果
struct GS2U_SacredEqLvUpRet <-
{
	uint32	err_code;		// 错误码
	uint64  uid;			//圣装uid
	uint8   pos;			// 部位
};

// 英雄圣装 升阶
struct U2GS_SacredEqStageUp ->
{
	uint64  uid;			//圣装uid
};
//英雄圣装 升阶结果
struct GS2U_SacredEqStageUpRet <-
{
	uint32	err_code;			// 错误码
	uint64  uid;			//圣装uid
	uint8   pos;			// 部位
};

// 英雄圣装 祝福
struct U2GS_SacredEqCast ->
{
	uint8   pos;			// 部位
	uint8	op;				// 操作(0:祝福, 1:替换, 2:放弃)
};

// 英雄圣装 祝福结果
struct GS2U_SacredEqCastRet <-
{
	uint32	err_code;			// 错误码
	uint8   pos;				// 部位
	uint8	op;					// 操作(0:祝福, 1:替换, 2:放弃)
	sacred_eq_pos	sacred_eq_pos;// 新的英雄圣装部位信息
};

//英雄圣装 大师属性点亮
struct U2GS_SacredEqSuitAdd ->
{
	uint16	newmasterlv;				  // 新的大师等级 
};

// 大师属性点亮结果
struct GS2U_SacredEqSuitAddRet <-
{
	uint32	err_code;					// 错误码
	uint16	newmasterlv;				  	// 新的大师等级 
};

//英雄圣装 圣装分解
struct U2GS_SacredEqFade ->
{
	vector<uint64>	uids;				 // 分解的圣装uid列表
};

//英雄圣装 圣装分解结果
struct GS2U_SacredEqFadeRet <-
{
	uint32	err_code;					// 错误码
};

//=========================== 英雄圣装 end ===========================

// ========================== 熔岩角斗场 ==========================
// 玩家信息
struct LavaFightPlayer
{
	uint64     			player_id;		// 玩家id
	uint32				server_id;		// 服务器id
	string				player_name;	// 角色名
	uint8				player_sex;		// 性别
	uint32				player_career;	// 职业
	uint32				dungeon_id;		// 副本id
	uint8				max_star;		// 最高通关星级
	uint16				best_time;		// 最佳通关时间
	uint32				rank;			// 排名
};

// 副本信息
struct LavaFightDungeon
{
	uint32				dungeon_id;		// 副本id
	uint8				max_star;		// 最高通关星级
	uint16				best_time;		// 最佳通关时间
	uint32				free_time;		// 免费次数
};

// 活动状态同步
struct GS2U_LavaFightAcStateSync <-
{
	uint8				cluster;		// 联服标记
	uint8				state;			// 状态 0未开始，1已开始，2已结束
	uint32				start_time;		// 开始时间
	uint32				end_time;		// 结束时间
};

// 获取ui信息
struct U2GS_GetLavaFightUI ->
{
};
struct GS2U_GetLavaFightUIRet <-
{
	uint8				cluster;		// 联服标记
	uint8				state;			// 状态 0未开始，1已开始，2已结束
	uint32				start_time;		// 开始时间
	uint32				end_time;		// 结束时间
	LavaFightPlayer		player_info;	// 玩家信息
	uint32				reduce_time;	// 消耗次数
	uint32				buy_time;		// 购买次数
	uint32				max_time;		// 总次数
	vector<LavaFightDungeon>	dungeon_list;	// 副本列表
};

// 获取玩家信息
struct U2GS_GetLavaFightPlayer ->
{
};
struct GS2U_GetLavaFightPlayerRet <-
{
	LavaFightPlayer		player_info;	// 玩家信息
};

// 获取排行
struct U2GS_GetLavaFightRank ->
{
	uint32		dungeon_id;		// 副本id
};
struct GS2U_GetLavaFightRankRet <-
{
	vector<LavaFightPlayer>	rank_list;	// 排行
};

// 排名变化推送
struct GS2U_LavaFightRankChange <-
{
	uint32		dungeon_id;		// 副本id
};

// 进入副本
struct U2GS_EnterLavaDungeon ->
{
	uint32		dungeon_id;		// 副本id
};

// 结算信息
struct GS2U_DungeonLavaSettle <-
{
	uint32				dungeon_id;	// 副本id
	uint8				is_win;		// 1:胜利;0:失败
	uint16				pass_time;	// 通关时间
	uint8				star;		// 通关星级
	uint8				is_best;	// 是否最佳
	uint64				exp;		// 经验
	vector<CoinInfo>	coin_list;	// 货币列表
	vector<itemInfo>	item_list;	// 道具列表
	vector<EqInfo>		eq_list;	// 装备列表
	vector<CoinInfo>	first_coin_list;	// 首通货币列表
	vector<itemInfo>	first_item_list;	// 首通道具列表
	vector<EqInfo>		first_eq_list;		// 首通装备列表
};

// 扫荡
struct U2GS_DungeonLavaMopUp ->
{
	uint32				dungeon_id;	// 副本id
};
struct GS2U_DungeonLavaMopUpRet <-
{
	uint32				err_code;	// 错误码
	uint32				dungeon_id;	// 副本id
	uint64				exp;		// 经验
	vector<CoinInfo>	coin_list;	// 货币列表
	vector<itemInfo>	item_list;	// 道具列表
	vector<EqInfo>		eq_list;	// 奖励装备列表
};

// ======================== 熔岩角斗场 end ========================

// ======================== 结婚 ============================
// 结婚信息 
struct U2GS_wedding_info ->
{
	
};
struct GS2U_wedding_info <-
{
	uint64			player_id;		// 玩家id
	uint32			time;			// 结婚时间
	uint64			divorce_id;		// 发起离婚的玩家id
	uint32			divorce_time;	// 离婚申请过期的时间戳
};

// 邀请进入界面
struct U2GS_wedding_pre_invite ->
{
	uint64     		player_id;		// 玩家id
};
struct GS2U_wedding_pre_invite <-
{
	uint64     		player_id;		// 玩家id
	uint32			err_code;		// 错误码
};

// 邀请进入界面的广播
struct GS2U_wedding_new_pre_invite <-
{
	uint64     		player_id;		// 玩家id
};

// 回复进入结婚界面
struct U2GS_wedding_pre_invite_reply ->
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
};
struct GS2U_wedding_pre_invite_reply <-
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
	uint32			err_code;		// 错误码
};

// 来自被邀请人的回应
struct GS2U_wedding_pre_invite_result <-
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
};

// 退出结婚界面
struct U2GS_wedding_cancel_pre_invite ->
{
	uint64     		player_id;		// 玩家id
};
struct GS2U_wedding_cancel_pre_invite <-
{
	uint64     		player_id;		// 玩家id
	uint32			err_code;		// 错误码
};
// 退出结婚界面同步给对方
struct GS2U_wedding_cancel_pre_invite_notice <-
{
	uint64     		player_id;		// 玩家id
};

// 邀请
struct U2GS_wedding_invite ->
{
	uint64     		player_id;		// 玩家id
};
struct GS2U_wedding_invite <-
{
	uint64     		player_id;		// 玩家id
	uint32			err_code;		// 错误码
};

// 接收到邀请
struct GS2U_wedding_new_invite <-
{
	uint64     		player_id;		// 玩家id
};

// 回应邀请
struct U2GS_wedding_reply_invite ->
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
};
struct GS2U_wedding_reply_invite <-
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
	uint32			err_code;		// 错误码
};

// 邀请回复（给邀请人）
struct GS2U_wedding_invite_result <-
{
	uint64     		player_id;		// 玩家id
	bool			agree;			// 是否同意
};

// 放弃邀请
struct U2GS_wedding_cancel_invit ->
{
};
struct GS2U_wedding_cancel_invit <-
{
	uint32			err_code;		// 错误码
};

// 放弃邀请通知对方
struct GS2U_wedding_cancel_invit_notice <-
{
	uint64     		player_id;		// 邀请玩家id
};

// 成功结婚
struct GS2U_wedding_success <-
{
	uint64			player_id;		// 伴侣的id
};

// 婚礼预定信息
struct booking_role
{
	uint64			player_id;		// 玩家id
	string			name;			// 玩家名
	uint8			sex;
};
struct wedding_booking
{
	uint32			id;				// 预定id （内含时间跟场次 （YY*100000+MM*1000+DD*10+index)）
	uint8			type;			// 婚礼类型
	vector<booking_role>	roles;	 
};
struct U2GS_wedding_get_booking ->
{
	
};
struct GS2U_wedding_get_booking <-
{
	vector<wedding_booking> list;	// 预定信息
	vector<uint32>	invitation_list;// 有请柬的婚礼id
	vector<uint32>	req_list;	// 索要请柬的婚礼id
};

// 预定(修改)
struct U2GS_wedding_booking ->
{
	uint32			date;			// 日期 （YY*10000+MM*100+DD)
	uint8			index;			// 场次
	uint8			type;			// 婚礼类型
	uint32			id;				// 被修改的id（预定时填0）
};
struct GS2U_wedding_booking <-
{
	uint32			date;			// 日期 （YY*10000+MM*100+DD)
	uint8			index;			// 场次
	uint8			type;			// 婚礼类型
	uint32			err_code;		// 错误码
};

// 婚礼预约信息
struct request_role 
{
	uint64			player_id;		// 玩家id
	string			name;			// 玩家名
	uint8			vip;			// VIP等级
	uint8			sex;			// 玩家性别
	uint16			level;			// 玩家等级
	uint32 			head_id;     	// 头像ID
	uint32 			frame;			// 头像框ID
	uint32			offline_time;	// 下线时间戳(0表示在线)
	string			guildName;		// 帮派名字
	uint64			battleValue;	//角色战斗力
};
struct booking_info
{
	uint32			id;				// 婚礼id
	uint8			type;			// 婚礼类型
	uint32			invitation_num;	// 剩余请柬数量
	vector<request_role> invitations;	// 已邀请玩家
};
struct U2GS_wedding_booking_info ->
{	
};
struct GS2U_wedding_booking_info <-
{
	vector<booking_info> list;		// 婚礼预定信息
};

// 发送请柬
struct U2GS_wedding_send_invitation ->
{
	uint32			id;				// 婚礼id
	vector<uint64> 	id_list;		// 玩家id列表
};
struct GS2U_wedding_send_invitation <- 
{
	uint32			id;				// 婚礼id
	vector<uint64> 	id_list;		// 玩家id列表
	uint32			err_code;		// 错误码
};

// 收到请柬
struct invite_role
{
	uint64			player_id;		// 玩家id
	string			name;			// 玩家名
	uint8			sex;			// 玩家性别
	uint32 			head_id;     	// 头像ID
	uint32 			frame;			// 头像框ID
};
struct GS2U_wedding_rec_invitation <-
{
	uint32			id;				// 婚礼id
	uint8			type;			// 婚礼类型
	vector<invite_role>	roles;	 
};

// 索要请柬
struct U2GS_wedding_req_invitation ->
{
	uint32			id;				// 婚礼id
};
struct GS2U_wedding_req_invitation <-
{
	uint32			id;				// 婚礼id
	uint32			err_code;		// 错误码
};

// 索要请柬列表
struct U2GS_wedding_req_invitation_list ->
{
	uint32			id;				// 婚礼id
};
struct GS2U_wedding_req_invitation_list <-
{
	uint32			id;				// 婚礼id
	vector<request_role> req_list;	// 索要列表
};

// 通知新人有新的索要请柬
struct GS2U_wedding_req_invitation_notice <-
{
	uint32			id;				// 婚礼id
	uint64			player_id;		// 索要玩家id
};

// 拒绝索要
struct U2GS_wedding_req_refuse ->
{
	uint32			id;				// 婚礼id
	uint64			player_id;		// 玩家id/0表示一键拒绝
};
struct GS2U_wedding_req_refuse <-
{
	uint32			id;				// 婚礼id
	uint64			player_id;		// 玩家id/0表示一键拒绝
	uint32			err_code;		// 错误码
};

// 进入婚礼场景
struct U2GS_wedding_enter_map ->
{
	uint8			index;			// 场次
};
struct GS2U_wedding_enter_map <-
{
	uint8			index;			// 场次
	uint32			err_code;		// 错误码
};

// 同步婚礼场景内信息
struct GS2U_wedding_map_schedule <-
{
	uint32			id;				// 婚礼id
	uint64			id1;			// 新郎和新娘id
	uint64			id2;
	uint8			type;			// 婚礼类型
	uint8			state;			// 当前阶段 1:等待仪式开始 2:确认仪式开始 3:仪式 4:等待婚宴 5:婚宴 6:等待婚礼结束
	uint32			wave;			// 婚宴波次			
	uint32			end_time;		// 当前阶段结束时间戳(也是下一阶段开始的时间)
	vector<key_value> gift_times;	// 赠送贺礼次数 key:贺礼id Value:已赠送次数
	vector<key_value> en_times;		// 赠送红包 key:红包id Value:已赠送次数
};

// 确认新人在地图，可以开始仪式
struct U2GS_wedding_confirm ->
{
	
};
struct GS2U_wedding_confirm <-
{
	uint32			err_code;		// 错误码
};

// 婚礼结束推送
struct GS2U_wedding_end_notice <-
{
	vector<invite_role> roles;
};

// 送贺礼
struct U2GS_wedding_map_gift ->
{
	uint32			gift_id;		// 贺礼id
	uint32			num;			// 赠送数量
};
struct GS2U_wedding_map_gift <-
{
	uint32			gift_id;		// 贺礼id
	uint32			num;			// 赠送数量
	uint32			err_code;		// 错误码
};

// 贺礼广播
struct GS2U_wedding_broadcast_gift <-
{
	string			name;			// 玩家名
	uint8			sex;			// 玩家性别
	uint32			gift_id;		// 贺礼id
	uint32			num;			// 赠送数量
};

// 发送红包
struct U2GS_wedding_send_envelope ->
{
	uint32			data_id;			// 红包id
};
struct GS2U_wedding_send_envelope <-
{
	uint32			data_id;		// 红包配置id
	uint32			err_code;		// 错误码
};

// 领取红包
struct U2GS_wedding_get_envelope ->
{
	uint32			en_id;			// 红包id
};
struct GS2U_wedding_get_envelope <-
{
	uint32			en_id;			// 红包id
	uint32			type;			// 货币类型
	uint32			num;			// 数量
	uint32			err_code;		// 错误码
};

// 新的红包
struct GS2U_wedding_new_envelope <-
{
	uint32 			en_id;			// 红包id
	uint32 			data_id;		// 红包配置id
};

// 进地图推送未领取过的红包列表
struct GS2U_wedding_envelope_info <-
{
	vector<key_value> en_list;			// 红包列表 key：红包id Value：红包配置id 
};

// 发送弹幕 
// U2GS_sendDanmaku 
// GS2U_syncDanmaku

// 请求离婚
struct U2GS_wedding_divorce_req ->
{
	uint8			type;			// 离婚类型 1：协议离婚 2：条件离婚 3：强制离婚
};
struct GS2U_wedding_divorce_req <-
{
	uint8			type;			// 离婚类型 1：协议离婚 2：条件离婚 3：强制离婚
	uint32			err_code;		// 错误码
};

// 收到协议离婚请求
struct GS2U_wedding_divorce_rec <-
{
	
};

// 协议离婚反馈
struct U2GS_wedding_divorce_reply ->
{
	bool			agree;		// 是否同意离婚
};
struct GS2U_wedding_divorce_reply <-
{
	bool			agree;		// 是否同意离婚
	uint32			err_code;		// 错误码
};

// 成功离婚通知双方
struct GS2U_wedding_divorce_notice <-
{
	
};

// 同步对方的离婚反馈
struct GS2U_wedding_divorce_reply_notice <-
{
	uint64			player_id;	// 玩家id
	bool			agree;		// 是否同意离婚
};

// 同步采集物剩余采集次数
struct GS2U_collect_times_sync <-
{
	uint64  		collectionID;	// 采集物实例ID
	uint32			times;			// 剩余采集次数
};

// 结婚基金
struct WeddingCard
{
	uint64			player_id;		// 玩家id
	uint64			couple_id;		// cp玩家id
	uint32			buy_time;		// 购买时间
	vector<uint32>	award_list;		// 领取列表
};

// 请求结婚基金信息
struct U2GS_WeddingCardInfoReq ->
{
};
struct GS2U_WeddingCardInfoRet <-
{
	vector<WeddingCard>		list;	// 基金信息
};

// 结婚基金信息同步
struct GS2U_WeddingCardInfoSync <-
{
	vector<WeddingCard>		list;	// 基金信息
};

// 结婚基金领奖
struct U2GS_WeddingCardAwardReq ->
{
};
struct GS2U_WeddingCardAwardRet <-
{
	uint32		err_code;			// 错误码
	uint32		award_day;			// 领取天数
};

// ======================== 结婚 end ========================
// ======================== 组队 start ========================
// 组队玩家信息
struct team_player
{
	uint64 player_id;		 // 玩家id
	uint64 guild_id;         // 公会id
	uint8  sex;				 // 玩家性别
	uint16 head_id;			 // 头像
	uint16 frame_id;		 // 头像框
	uint16 level;			 // 等级
	uint16 career;			 // 职业
	string name; 			 // 姓名
	uint64 battle_value;     // 战力
};

// 队伍列表信息
struct team_list
{
	uint64 team_id;          // 队伍id
	uint8 team_type;		 // 队伍类型 1-亲密助战
	team_player leader_info;    // 队长信息
	vector<uint64> member_list; // 成员玩家id列表
};

// 邀请玩家信息
struct team_invite_player
{
	team_player  player;
	uint8      is_team;  // 是否组队
};

// 邀请队伍列表
struct team_invite_team
{
	team_player  player;  // 队长信息
	uint64     team_id;    // 队伍id
	uint8      team_type;  // 队伍类型
};

// 队伍玩家信息
struct team_member
{
	team_player  player;
	uint8 is_leader;  // 是否队长
	uint8 is_online;  // 是否在线
	uint32 mapDataID;   // 所在地图
	uint64 role_id;     // 角色id
};

// 请求/刷新组队列表
struct U2GS_team_list ->
{
	uint8 team_type;  // 队伍类型 0-全部 1-亲密助战
	uint8 pages; 	  // pages=1时会刷新，其他值继续发剩余
};
struct GS2U_team_list_ret <-
{
	vector<team_list> list;
	uint8 is_matching;  // 自己是否在匹配中
	uint16 remain_num;  // 剩余队伍数
};

// 我的队伍
struct U2GS_my_team_info ->
{
};
struct GS2U_my_team_info_ret <-
{
	vector<playerModelUI> list; // 队友信息
	uint8 is_matching;  // 队伍是否在匹配中
	uint8 is_auto_agree; // 是否自动同意入队申请
};

// 快速匹配
struct U2GS_team_quick_match ->
{
	uint8           is_matching;    // 0-取消匹配 1-进入匹配
};
struct GS2U_team_quick_match_ret <-
{
	uint32			err_code;		// 错误码
	uint8           is_matching;    // 0-取消匹配 1-进入匹配
};

// 申请入队
struct U2GS_team_join_apply ->
{
	uint64 team_id;          // 队伍id
};
struct GS2U_team_join_apply_ret <-
{
	uint64 team_id;          // 队伍id
	uint32 err_code;		// 错误码
};

// 可邀请玩家列表
struct U2GS_team_invite_list ->
{
	uint8 type;    // 0全部 1公会 2好友 3附近
};
struct GS2U_team_invite_list_ret <-
{
	vector<team_invite_player> friend_list;    // 可邀请好友人员列表
	vector<team_invite_player> guild_list;     // 可邀请公会人员列表
	vector<team_invite_player> nearby_list;	// 附近人员列表
};

// 申请列表
struct U2GS_team_apply_list ->
{
};
struct GS2U_team_apply_list_ret <-
{
	vector<team_player> list;    // 申请人员
};

// 队伍邀请列表
struct U2GS_team_invite_team_list ->
{
};
struct GS2U_team_invite_team_list_ret <-
{
	vector<team_invite_team> list;    // 邀请队伍
};

// 邀请加入
struct U2GS_team_invite_player ->
{
	vector<uint64> player_list;
};
struct GS2U_team_invite_player_ret <-
{
	vector<uint64> player_list;
	uint32 err_code;
};

// 收到邀请 
struct GS2U_team_invite_player_recv <-
{
	team_player from_player;
	uint64 team_id;  // 队伍id
	uint8 team_type; // 队伍类型
};
struct U2GS_team_invite_player_repl ->
{
	pb_uint64 team_id;  // 队伍id 如果为0则为一键操作
	uint8 type;  // 0-拒绝 1-同意
};

// 收到申请
struct GS2U_team_player_apply_recv <- 
{
	team_player from_player;
};
struct U2GS_team_player_apply_repl ->
{
	uint64 player_id;  // 玩家id
	uint8 type;  // 0-拒绝 1-同意
	uint8 is_black; // 是否拉黑
};

// 队伍操作
struct U2GS_team_op ->
{
	uint8 type;  // 0-创建队伍 1-退出队伍 2-匹配队友 3-召集  4-申请列表全部拒绝 5-申请列表全部同意 6-转移队长 
	             // 7-申请队长 8-踢出队伍 9-自动同意入队
	pb_uint64 param; // 6-转移队长的目标玩家id  8-踢出队伍的目标玩家id 9-不自动0 自动1
};
struct GS2U_team_op_ret <-
{
	uint8 type;
	pb_uint64 param;
	uint32 err_code;
};

// 收到申请队长
struct GS2U_team_player_apply_leader_recv <- 
{
	team_player from_player;
};
struct U2GS_team_player_apply_leader_repl ->
{
	uint64 player_id;  // 玩家id
	uint8 type;  // 0-拒绝 1-同意
};

// 当前队伍
struct GS2U_current_team_info <-
{
	uint64 team_id;
	vector<team_member> member_list; // 队员信息
};

// 成员信息更新
struct GS2U_team_member_update <-
{
	uint64 team_id;
	team_member member;
};

// 队伍事件
struct GS2U_team_event_sync <-
{
	uint8 type; // 0-加入队伍 1-离开队伍 2-解散队伍 3-成为队长 4-拒绝申请 5-拒绝邀请 6-拒绝队长申请
	uint64 player_id; // 目标玩家id
	string name; // 目标玩家名
	uint8 sex; // 目标玩家性别
};

// 队伍召集
struct GS2U_team_convene_sync <-
{
	string name; // 队长玩家名
	uint8 sex; // 队长玩家性别
	uint32 		mapDataID;  // 目标地图ID
	float 		pos_x;		// X坐标
	float		pos_y;		// Y坐标
};

// 获取队长位置
struct U2GS_team_leader_locate ->
{
};
struct GS2U_team_leader_locate_ret <-
{
	uint32 		mapDataID;  // 目标地图ID
	float 		pos_x;		// X坐标
	float		pos_y;		// Y坐标
};

// 亲密度变化
struct GS2U_intimacy_change_sync <-
{
	uint64 player_id; // 对方玩家id
	string name; // 对方玩家名
	uint8 sex; // 对方玩家性别
	uint32 add_value; // 提升值
};

// ======================== 组队 end ========================
// 击杀
struct GS2U_CommonKillInfo <-
{
	uint32	target_id;			// 被击杀者id
	uint32	target_server_id;	// 被击杀者服务器
	string	target_name;		// 被击杀者名
	uint8	target_sex;			// 被击杀者性别
	uint32	attacker_id;		// 击杀者id
	uint32	attacker_server_id;	// 击杀者服务器
	string	attacker_name;		// 击杀者名
	uint8	attacker_sex;		// 击杀者性别
};
// ======================== 运营活动-首充重置 ========================
struct GS2U_diamond_first_recharge_ret <-
{
	uint32				err_code;		// 错误码
	uint32				id;				// 活动id
	uint8               is_reset;       // 是否重置
};

// 重置
struct U2GS_diamond_first_recharge_reset ->
{
	uint32				id;				// 活动id
};
struct GS2U_diamond_first_recharge_reset_ret <-
{
	uint32				id;				// 活动id
	uint32              err_code;       // 错误码
};
// ======================== 运营活动-首充重置 end ====================